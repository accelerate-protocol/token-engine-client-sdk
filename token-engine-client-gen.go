// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package client

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// Defines values for CommonChainID.
const (
	SOLANA CommonChainID = "1001"
)

// Defines values for EntityDEXPlatform.
const (
	DexRaydium     EntityDEXPlatform = "Raydium"
	DexRaydiumCLMM EntityDEXPlatform = "Raydium CLMM"
)

// Defines values for GetApiV1CommonBalanceParamsChainId.
const (
	GetApiV1CommonBalanceParamsChainIdN1001 GetApiV1CommonBalanceParamsChainId = "1001"
)

// Defines values for GetApiV1CommonTxResultParamsChainId.
const (
	GetApiV1CommonTxResultParamsChainIdN1001 GetApiV1CommonTxResultParamsChainId = "1001"
)

// Defines values for GetApiV1SwapPriceParamsChainId.
const (
	N1001 GetApiV1SwapPriceParamsChainId = "1001"
)

// Defines values for GetApiV1SwapPriceParamsPlatform.
const (
	Raydium     GetApiV1SwapPriceParamsPlatform = "Raydium"
	RaydiumCLMM GetApiV1SwapPriceParamsPlatform = "Raydium CLMM"
)

// CommonApiResp API标准响应格式
type CommonApiResp struct {
	// Code Code is the response code
	// @Description 响应状态码
	Code *int `json:"code,omitempty"`

	// Data Data is the response data
	// @Description 响应数据
	Data *interface{} `json:"data,omitempty"`

	// Message Message is the response message
	// @Description 响应消息
	Message *string `json:"message,omitempty"`
}

// CommonChainID defines model for common.ChainID.
type CommonChainID string

// EntityDEXPlatform defines model for entity.DEX_Platform.
type EntityDEXPlatform string

// RequestBorrowerWithdrawReq defines model for request.BorrowerWithdrawReq.
type RequestBorrowerWithdrawReq struct {
	// Amount 提取数额
	Amount int `json:"amount"`

	// Borrower 投资人地址
	Borrower string        `json:"borrower"`
	ChainId  CommonChainID `json:"chain_id"`

	// VaultAddress vault地址
	VaultAddress string `json:"vault_address"`
}

// RequestCreatePoolAndLiquidityReq defines model for request.CreatePoolAndLiquidityReq.
type RequestCreatePoolAndLiquidityReq struct {
	ChainId CommonChainID `json:"chain_id"`

	// VaultAddress vault地址
	VaultAddress string `json:"vault_address"`
}

// RequestDepositReq defines model for request.DepositReq.
type RequestDepositReq struct {
	// Amount 投资额(以vault融资货币计价)
	Amount  int           `json:"amount"`
	ChainId CommonChainID `json:"chain_id"`

	// Investor 投资人地址
	Investor string `json:"investor"`

	// VaultAddress vault地址
	VaultAddress string `json:"vault_address"`
}

// RequestFinancingRule defines model for request.FinancingRule.
type RequestFinancingRule struct {
	// ExcessFundraisingRatioBps 超募比例bps
	ExcessFundraisingRatioBps *int `json:"excess_fundraising_ratio_bps,omitempty"`

	// FinancingCurrencyAddr 融资货币地址
	FinancingCurrencyAddr string `json:"financing_currency_addr"`
	FinancingDeadline     *int   `json:"financing_deadline,omitempty"`
	FinancingStartTime    *int   `json:"financing_start_time,omitempty"`

	// MinInvestmentBaseFinancingCurrency 最小投资额
	MinInvestmentBaseFinancingCurrency int `json:"min_investment_base_financing_currency"`

	// PriceBaseFinancingCurrency 融资货币计价
	PriceBaseFinancingCurrency int `json:"price_base_financing_currency"`

	// TargetAmountBaseFinancingCurrency 目标融资额
	TargetAmountBaseFinancingCurrency int `json:"target_amount_base_financing_currency"`
}

// RequestLiquidateReq defines model for request.LiquidateReq.
type RequestLiquidateReq struct {
	ChainId      CommonChainID `json:"chain_id"`
	VaultAddress string        `json:"vault_address"`
}

// RequestRedeemReq defines model for request.RedeemReq.
type RequestRedeemReq struct {
	// Amount 提取数额
	Amount  int           `json:"amount"`
	ChainId CommonChainID `json:"chain_id"`

	// Investor 投资人地址
	Investor string `json:"investor"`

	// VaultAddress vault地址
	VaultAddress string `json:"vault_address"`
}

// RequestSettleReq defines model for request.SettleReq.
type RequestSettleReq struct {
	// Amount 数量
	Amount  int           `json:"amount"`
	ChainId CommonChainID `json:"chain_id"`

	// VaultAddress vault地址
	VaultAddress string `json:"vault_address"`
}

// RequestSubmitReq defines model for request.SubmitReq.
type RequestSubmitReq struct {
	ChainId CommonChainID `json:"chain_id"`

	// Sender 提交人地址
	Sender string `json:"sender"`

	// Signature 签名字符串 base58编码
	Signature string `json:"signature"`

	// TxMsgBase64 待签名数据
	TxMsgBase64 string `json:"tx_msg_base64"`
}

// RequestSwapPrepareReq defines model for request.SwapPrepareReq.
type RequestSwapPrepareReq struct {
	Amount      string            `json:"amount"`
	ChainId     CommonChainID     `json:"chain_id"`
	InputMint   string            `json:"input_mint"`
	OutputMint  string            `json:"output_mint"`
	Platform    EntityDEXPlatform `json:"platform"`
	Sender      string            `json:"sender"`
	SlippageBps *int              `json:"slippage_bps,omitempty"`
}

// RequestTokenLaunchReq defines model for request.TokenLaunchReq.
type RequestTokenLaunchReq struct {
	ChainId CommonChainID `json:"chain_id"`

	// FinancingRuleData 融资信息
	FinancingRuleData RequestFinancingRule `json:"financing_rule_data"`

	// ManagementData 管理信息
	ManagementData RequestTokenManage `json:"management_data"`

	// TokenMetaData token元数据信息
	TokenMetaData RequestTokenMeta `json:"token_meta_data"`
}

// RequestTokenManage defines model for request.TokenManage.
type RequestTokenManage struct {
	// Borrower 融资成功后的提款人
	Borrower string `json:"borrower"`

	// Deployer 发行人
	Deployer string `json:"deployer"`

	// Manager 管理员
	Manager string `json:"manager"`
}

// RequestTokenMeta defines model for request.TokenMeta.
type RequestTokenMeta struct {
	TokenDecimals int    `json:"token_decimals"`
	TokenName     string `json:"token_name"`
	TokenSymbol   string `json:"token_symbol"`
	TokenUri      string `json:"token_uri"`
}

// ResponseBalanceResp defines model for response.BalanceResp.
type ResponseBalanceResp struct {
	Balance      *string `json:"balance,omitempty"`
	ChainId      *string `json:"chain_id,omitempty"`
	Owner        *string `json:"owner,omitempty"`
	TokenAddress *string `json:"token_address,omitempty"`
}

// ResponseCreatePoolAndLiquidityResp defines model for response.CreatePoolAndLiquidityResp.
type ResponseCreatePoolAndLiquidityResp struct {
	TxMsgBase64 string `json:"tx_msg_base64"`
}

// ResponseDepositPrepareResp defines model for response.DepositPrepareResp.
type ResponseDepositPrepareResp struct {
	TxMsgBase64 string `json:"tx_msg_base64"`
}

// ResponseLaunchPrepareResp defines model for response.LaunchPrepareResp.
type ResponseLaunchPrepareResp struct {
	// AssetMintAddr asset mint
	AssetMintAddr *string `json:"asset_mint_addr,omitempty"`

	// AssetTreasuryAddr asset treasury
	AssetTreasuryAddr *string `json:"asset_treasury_addr,omitempty"`

	// GlobalConfigAddr 全局配置信息
	GlobalConfigAddr *string `json:"global_config_addr,omitempty"`

	// TxMsgBase64 待签名信息
	TxMsgBase64 string `json:"tx_msg_base64"`

	// VaultAddr vault地址
	VaultAddr *string `json:"vault_addr,omitempty"`

	// VaultAuthAddr vault auth
	VaultAuthAddr *string `json:"vault_auth_addr,omitempty"`

	// VaultMintAddr vault mint
	VaultMintAddr *string `json:"vault_mint_addr,omitempty"`

	// VaultTreasuryAddr vault treasury
	VaultTreasuryAddr *string `json:"vault_treasury_addr,omitempty"`
}

// ResponseLiquidateResp defines model for response.LiquidateResp.
type ResponseLiquidateResp struct {
	TxMsgBase64 string `json:"tx_msg_base64"`
}

// ResponseReclaimPrepareResp defines model for response.ReclaimPrepareResp.
type ResponseReclaimPrepareResp struct {
	TxMsgBase64 string `json:"tx_msg_base64"`
}

// ResponseRedeemPrepareResp defines model for response.RedeemPrepareResp.
type ResponseRedeemPrepareResp struct {
	TxMsgBase64 string `json:"tx_msg_base64"`
}

// ResponseSenderBalanceChange defines model for response.SenderBalanceChange.
type ResponseSenderBalanceChange struct {
	// NativeBalanceChange 原生代币余额变化
	NativeBalanceChange *int `json:"native_balance_change,omitempty"`

	// NativeDecimals 原生代币decimals
	NativeDecimals *int `json:"native_decimals,omitempty"`

	// TokenBalanceChange 代币余额变化列表
	TokenBalanceChange *[]ResponseTokenBalanceChange `json:"token_balance_change,omitempty"`
}

// ResponseSettleResp defines model for response.SettleResp.
type ResponseSettleResp struct {
	TxMsgBase64 string `json:"tx_msg_base64"`
}

// ResponseSubmitResp defines model for response.SubmitResp.
type ResponseSubmitResp struct {
	FailedMsg *string `json:"failed_msg,omitempty"`

	// SenderBalanceChange 交易发送者余额变化，交易失败时为nil
	SenderBalanceChange *ResponseSenderBalanceChange `json:"sender_balance_change,omitempty"`
	Success             *bool                        `json:"success,omitempty"`
	TxHash              *string                      `json:"tx_hash,omitempty"`
}

// ResponseSwapPrepareResp defines model for response.SwapPrepareResp.
type ResponseSwapPrepareResp struct {
	TxMsgBase64 string `json:"tx_msg_base64"`
}

// ResponseSwapPriceResp defines model for response.SwapPriceResp.
type ResponseSwapPriceResp struct {
	InputMint        *string  `json:"input_mint,omitempty"`
	InputMintAmount  *string  `json:"input_mint_amount,omitempty"`
	OutputMint       *string  `json:"output_mint,omitempty"`
	OutputMintAmount *string  `json:"output_mint_amount,omitempty"`
	Price            *float32 `json:"price,omitempty"`
}

// ResponseTokenBalanceChange defines model for response.TokenBalanceChange.
type ResponseTokenBalanceChange struct {
	// BalanceChange 余额变化
	BalanceChange *int `json:"balance_change,omitempty"`

	// Decimals decimals
	Decimals *int `json:"decimals,omitempty"`

	// TokenMint 代币地址
	TokenMint *string `json:"token_mint,omitempty"`
}

// ResponseTxResultResp defines model for response.TxResultResp.
type ResponseTxResultResp struct {
	FailedMsg *string `json:"failed_msg,omitempty"`
	Success   *bool   `json:"success,omitempty"`
	TxHash    *string `json:"tx_hash,omitempty"`
}

// GetApiV1CommonBalanceParams defines parameters for GetApiV1CommonBalance.
type GetApiV1CommonBalanceParams struct {
	ChainId GetApiV1CommonBalanceParamsChainId `form:"chain_id" json:"chain_id"`

	// Owner 账户地址
	Owner string `form:"owner" json:"owner"`

	// TokenAddress token地址,原生token无需赋值
	TokenAddress *string `form:"token_address,omitempty" json:"token_address,omitempty"`
}

// GetApiV1CommonBalanceParamsChainId defines parameters for GetApiV1CommonBalance.
type GetApiV1CommonBalanceParamsChainId string

// GetApiV1CommonTxResultParams defines parameters for GetApiV1CommonTxResult.
type GetApiV1CommonTxResultParams struct {
	ChainId GetApiV1CommonTxResultParamsChainId `form:"chain_id" json:"chain_id"`
	TxHash  string                              `form:"tx_hash" json:"tx_hash"`
}

// GetApiV1CommonTxResultParamsChainId defines parameters for GetApiV1CommonTxResult.
type GetApiV1CommonTxResultParamsChainId string

// GetApiV1KeyGetParams defines parameters for GetApiV1KeyGet.
type GetApiV1KeyGetParams struct {
	AppId string `form:"app_id" json:"app_id"`
	Sign  string `form:"sign" json:"sign"`
	Ts    int    `form:"ts" json:"ts"`
}

// GetApiV1SwapPriceParams defines parameters for GetApiV1SwapPrice.
type GetApiV1SwapPriceParams struct {
	Amount             string                          `form:"amount" json:"amount"`
	ChainId            GetApiV1SwapPriceParamsChainId  `form:"chain_id" json:"chain_id"`
	InputMint          string                          `form:"input_mint" json:"input_mint"`
	InputMintDecimals  int                             `form:"input_mint_decimals" json:"input_mint_decimals"`
	OutputMint         string                          `form:"output_mint" json:"output_mint"`
	OutputMintDecimals int                             `form:"output_mint_decimals" json:"output_mint_decimals"`
	Platform           GetApiV1SwapPriceParamsPlatform `form:"platform" json:"platform"`
}

// GetApiV1SwapPriceParamsChainId defines parameters for GetApiV1SwapPrice.
type GetApiV1SwapPriceParamsChainId string

// GetApiV1SwapPriceParamsPlatform defines parameters for GetApiV1SwapPrice.
type GetApiV1SwapPriceParamsPlatform string

// PostApiV1CommonSubmitTxJSONRequestBody defines body for PostApiV1CommonSubmitTx for application/json ContentType.
type PostApiV1CommonSubmitTxJSONRequestBody = RequestSubmitReq

// PostApiV1PrimaryCreatePoolJSONRequestBody defines body for PostApiV1PrimaryCreatePool for application/json ContentType.
type PostApiV1PrimaryCreatePoolJSONRequestBody = RequestCreatePoolAndLiquidityReq

// PostApiV1PrimaryPrepareBorrowerWithdrawJSONRequestBody defines body for PostApiV1PrimaryPrepareBorrowerWithdraw for application/json ContentType.
type PostApiV1PrimaryPrepareBorrowerWithdrawJSONRequestBody = RequestBorrowerWithdrawReq

// PostApiV1PrimaryPrepareDepositJSONRequestBody defines body for PostApiV1PrimaryPrepareDeposit for application/json ContentType.
type PostApiV1PrimaryPrepareDepositJSONRequestBody = RequestDepositReq

// PostApiV1PrimaryPrepareLaunchJSONRequestBody defines body for PostApiV1PrimaryPrepareLaunch for application/json ContentType.
type PostApiV1PrimaryPrepareLaunchJSONRequestBody = RequestTokenLaunchReq

// PostApiV1PrimaryPrepareLiquidateJSONRequestBody defines body for PostApiV1PrimaryPrepareLiquidate for application/json ContentType.
type PostApiV1PrimaryPrepareLiquidateJSONRequestBody = RequestLiquidateReq

// PostApiV1PrimaryPrepareRedeemJSONRequestBody defines body for PostApiV1PrimaryPrepareRedeem for application/json ContentType.
type PostApiV1PrimaryPrepareRedeemJSONRequestBody = RequestRedeemReq

// PostApiV1PrimaryPrepareSettleJSONRequestBody defines body for PostApiV1PrimaryPrepareSettle for application/json ContentType.
type PostApiV1PrimaryPrepareSettleJSONRequestBody = RequestSettleReq

// PostApiV1SwapPrepareTxJSONRequestBody defines body for PostApiV1SwapPrepareTx for application/json ContentType.
type PostApiV1SwapPrepareTxJSONRequestBody = RequestSwapPrepareReq

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetApiV1CommonBalance request
	GetApiV1CommonBalance(ctx context.Context, params *GetApiV1CommonBalanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1CommonSubmitTxWithBody request with any body
	PostApiV1CommonSubmitTxWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1CommonSubmitTx(ctx context.Context, body PostApiV1CommonSubmitTxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1CommonTxResult request
	GetApiV1CommonTxResult(ctx context.Context, params *GetApiV1CommonTxResultParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1KeyGet request
	GetApiV1KeyGet(ctx context.Context, params *GetApiV1KeyGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1PrimaryCreatePoolWithBody request with any body
	PostApiV1PrimaryCreatePoolWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1PrimaryCreatePool(ctx context.Context, body PostApiV1PrimaryCreatePoolJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1PrimaryPrepareBorrowerWithdrawWithBody request with any body
	PostApiV1PrimaryPrepareBorrowerWithdrawWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1PrimaryPrepareBorrowerWithdraw(ctx context.Context, body PostApiV1PrimaryPrepareBorrowerWithdrawJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1PrimaryPrepareDepositWithBody request with any body
	PostApiV1PrimaryPrepareDepositWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1PrimaryPrepareDeposit(ctx context.Context, body PostApiV1PrimaryPrepareDepositJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1PrimaryPrepareLaunchWithBody request with any body
	PostApiV1PrimaryPrepareLaunchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1PrimaryPrepareLaunch(ctx context.Context, body PostApiV1PrimaryPrepareLaunchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1PrimaryPrepareLiquidateWithBody request with any body
	PostApiV1PrimaryPrepareLiquidateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1PrimaryPrepareLiquidate(ctx context.Context, body PostApiV1PrimaryPrepareLiquidateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1PrimaryPrepareRedeemWithBody request with any body
	PostApiV1PrimaryPrepareRedeemWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1PrimaryPrepareRedeem(ctx context.Context, body PostApiV1PrimaryPrepareRedeemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1PrimaryPrepareSettleWithBody request with any body
	PostApiV1PrimaryPrepareSettleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1PrimaryPrepareSettle(ctx context.Context, body PostApiV1PrimaryPrepareSettleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1SwapPrepareTxWithBody request with any body
	PostApiV1SwapPrepareTxWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1SwapPrepareTx(ctx context.Context, body PostApiV1SwapPrepareTxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1SwapPrice request
	GetApiV1SwapPrice(ctx context.Context, params *GetApiV1SwapPriceParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetApiV1CommonBalance(ctx context.Context, params *GetApiV1CommonBalanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1CommonBalanceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1CommonSubmitTxWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1CommonSubmitTxRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1CommonSubmitTx(ctx context.Context, body PostApiV1CommonSubmitTxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1CommonSubmitTxRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1CommonTxResult(ctx context.Context, params *GetApiV1CommonTxResultParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1CommonTxResultRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1KeyGet(ctx context.Context, params *GetApiV1KeyGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1KeyGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PrimaryCreatePoolWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PrimaryCreatePoolRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PrimaryCreatePool(ctx context.Context, body PostApiV1PrimaryCreatePoolJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PrimaryCreatePoolRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PrimaryPrepareBorrowerWithdrawWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PrimaryPrepareBorrowerWithdrawRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PrimaryPrepareBorrowerWithdraw(ctx context.Context, body PostApiV1PrimaryPrepareBorrowerWithdrawJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PrimaryPrepareBorrowerWithdrawRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PrimaryPrepareDepositWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PrimaryPrepareDepositRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PrimaryPrepareDeposit(ctx context.Context, body PostApiV1PrimaryPrepareDepositJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PrimaryPrepareDepositRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PrimaryPrepareLaunchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PrimaryPrepareLaunchRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PrimaryPrepareLaunch(ctx context.Context, body PostApiV1PrimaryPrepareLaunchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PrimaryPrepareLaunchRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PrimaryPrepareLiquidateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PrimaryPrepareLiquidateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PrimaryPrepareLiquidate(ctx context.Context, body PostApiV1PrimaryPrepareLiquidateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PrimaryPrepareLiquidateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PrimaryPrepareRedeemWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PrimaryPrepareRedeemRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PrimaryPrepareRedeem(ctx context.Context, body PostApiV1PrimaryPrepareRedeemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PrimaryPrepareRedeemRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PrimaryPrepareSettleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PrimaryPrepareSettleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PrimaryPrepareSettle(ctx context.Context, body PostApiV1PrimaryPrepareSettleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PrimaryPrepareSettleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1SwapPrepareTxWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1SwapPrepareTxRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1SwapPrepareTx(ctx context.Context, body PostApiV1SwapPrepareTxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1SwapPrepareTxRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1SwapPrice(ctx context.Context, params *GetApiV1SwapPriceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1SwapPriceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetApiV1CommonBalanceRequest generates requests for GetApiV1CommonBalance
func NewGetApiV1CommonBalanceRequest(server string, params *GetApiV1CommonBalanceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/common/balance")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "chain_id", runtime.ParamLocationQuery, params.ChainId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "owner", runtime.ParamLocationQuery, params.Owner); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TokenAddress != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token_address", runtime.ParamLocationQuery, *params.TokenAddress); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1CommonSubmitTxRequest calls the generic PostApiV1CommonSubmitTx builder with application/json body
func NewPostApiV1CommonSubmitTxRequest(server string, body PostApiV1CommonSubmitTxJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1CommonSubmitTxRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1CommonSubmitTxRequestWithBody generates requests for PostApiV1CommonSubmitTx with any type of body
func NewPostApiV1CommonSubmitTxRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/common/submit_tx")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1CommonTxResultRequest generates requests for GetApiV1CommonTxResult
func NewGetApiV1CommonTxResultRequest(server string, params *GetApiV1CommonTxResultParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/common/tx_result")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "chain_id", runtime.ParamLocationQuery, params.ChainId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tx_hash", runtime.ParamLocationQuery, params.TxHash); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1KeyGetRequest generates requests for GetApiV1KeyGet
func NewGetApiV1KeyGetRequest(server string, params *GetApiV1KeyGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/key/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "app_id", runtime.ParamLocationQuery, params.AppId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sign", runtime.ParamLocationQuery, params.Sign); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ts", runtime.ParamLocationQuery, params.Ts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1PrimaryCreatePoolRequest calls the generic PostApiV1PrimaryCreatePool builder with application/json body
func NewPostApiV1PrimaryCreatePoolRequest(server string, body PostApiV1PrimaryCreatePoolJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1PrimaryCreatePoolRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1PrimaryCreatePoolRequestWithBody generates requests for PostApiV1PrimaryCreatePool with any type of body
func NewPostApiV1PrimaryCreatePoolRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/primary/create_pool")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1PrimaryPrepareBorrowerWithdrawRequest calls the generic PostApiV1PrimaryPrepareBorrowerWithdraw builder with application/json body
func NewPostApiV1PrimaryPrepareBorrowerWithdrawRequest(server string, body PostApiV1PrimaryPrepareBorrowerWithdrawJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1PrimaryPrepareBorrowerWithdrawRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1PrimaryPrepareBorrowerWithdrawRequestWithBody generates requests for PostApiV1PrimaryPrepareBorrowerWithdraw with any type of body
func NewPostApiV1PrimaryPrepareBorrowerWithdrawRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/primary/prepare_borrower_withdraw")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1PrimaryPrepareDepositRequest calls the generic PostApiV1PrimaryPrepareDeposit builder with application/json body
func NewPostApiV1PrimaryPrepareDepositRequest(server string, body PostApiV1PrimaryPrepareDepositJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1PrimaryPrepareDepositRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1PrimaryPrepareDepositRequestWithBody generates requests for PostApiV1PrimaryPrepareDeposit with any type of body
func NewPostApiV1PrimaryPrepareDepositRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/primary/prepare_deposit")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1PrimaryPrepareLaunchRequest calls the generic PostApiV1PrimaryPrepareLaunch builder with application/json body
func NewPostApiV1PrimaryPrepareLaunchRequest(server string, body PostApiV1PrimaryPrepareLaunchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1PrimaryPrepareLaunchRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1PrimaryPrepareLaunchRequestWithBody generates requests for PostApiV1PrimaryPrepareLaunch with any type of body
func NewPostApiV1PrimaryPrepareLaunchRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/primary/prepare_launch")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1PrimaryPrepareLiquidateRequest calls the generic PostApiV1PrimaryPrepareLiquidate builder with application/json body
func NewPostApiV1PrimaryPrepareLiquidateRequest(server string, body PostApiV1PrimaryPrepareLiquidateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1PrimaryPrepareLiquidateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1PrimaryPrepareLiquidateRequestWithBody generates requests for PostApiV1PrimaryPrepareLiquidate with any type of body
func NewPostApiV1PrimaryPrepareLiquidateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/primary/prepare_liquidate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1PrimaryPrepareRedeemRequest calls the generic PostApiV1PrimaryPrepareRedeem builder with application/json body
func NewPostApiV1PrimaryPrepareRedeemRequest(server string, body PostApiV1PrimaryPrepareRedeemJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1PrimaryPrepareRedeemRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1PrimaryPrepareRedeemRequestWithBody generates requests for PostApiV1PrimaryPrepareRedeem with any type of body
func NewPostApiV1PrimaryPrepareRedeemRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/primary/prepare_redeem")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1PrimaryPrepareSettleRequest calls the generic PostApiV1PrimaryPrepareSettle builder with application/json body
func NewPostApiV1PrimaryPrepareSettleRequest(server string, body PostApiV1PrimaryPrepareSettleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1PrimaryPrepareSettleRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1PrimaryPrepareSettleRequestWithBody generates requests for PostApiV1PrimaryPrepareSettle with any type of body
func NewPostApiV1PrimaryPrepareSettleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/primary/prepare_settle")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1SwapPrepareTxRequest calls the generic PostApiV1SwapPrepareTx builder with application/json body
func NewPostApiV1SwapPrepareTxRequest(server string, body PostApiV1SwapPrepareTxJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1SwapPrepareTxRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1SwapPrepareTxRequestWithBody generates requests for PostApiV1SwapPrepareTx with any type of body
func NewPostApiV1SwapPrepareTxRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/swap/prepare_tx")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1SwapPriceRequest generates requests for GetApiV1SwapPrice
func NewGetApiV1SwapPriceRequest(server string, params *GetApiV1SwapPriceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/swap/price")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "amount", runtime.ParamLocationQuery, params.Amount); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "chain_id", runtime.ParamLocationQuery, params.ChainId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "input_mint", runtime.ParamLocationQuery, params.InputMint); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "input_mint_decimals", runtime.ParamLocationQuery, params.InputMintDecimals); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "output_mint", runtime.ParamLocationQuery, params.OutputMint); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "output_mint_decimals", runtime.ParamLocationQuery, params.OutputMintDecimals); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "platform", runtime.ParamLocationQuery, params.Platform); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetApiV1CommonBalanceWithResponse request
	GetApiV1CommonBalanceWithResponse(ctx context.Context, params *GetApiV1CommonBalanceParams, reqEditors ...RequestEditorFn) (*GetApiV1CommonBalanceResponse, error)

	// PostApiV1CommonSubmitTxWithBodyWithResponse request with any body
	PostApiV1CommonSubmitTxWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1CommonSubmitTxResponse, error)

	PostApiV1CommonSubmitTxWithResponse(ctx context.Context, body PostApiV1CommonSubmitTxJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1CommonSubmitTxResponse, error)

	// GetApiV1CommonTxResultWithResponse request
	GetApiV1CommonTxResultWithResponse(ctx context.Context, params *GetApiV1CommonTxResultParams, reqEditors ...RequestEditorFn) (*GetApiV1CommonTxResultResponse, error)

	// GetApiV1KeyGetWithResponse request
	GetApiV1KeyGetWithResponse(ctx context.Context, params *GetApiV1KeyGetParams, reqEditors ...RequestEditorFn) (*GetApiV1KeyGetResponse, error)

	// PostApiV1PrimaryCreatePoolWithBodyWithResponse request with any body
	PostApiV1PrimaryCreatePoolWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryCreatePoolResponse, error)

	PostApiV1PrimaryCreatePoolWithResponse(ctx context.Context, body PostApiV1PrimaryCreatePoolJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryCreatePoolResponse, error)

	// PostApiV1PrimaryPrepareBorrowerWithdrawWithBodyWithResponse request with any body
	PostApiV1PrimaryPrepareBorrowerWithdrawWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareBorrowerWithdrawResponse, error)

	PostApiV1PrimaryPrepareBorrowerWithdrawWithResponse(ctx context.Context, body PostApiV1PrimaryPrepareBorrowerWithdrawJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareBorrowerWithdrawResponse, error)

	// PostApiV1PrimaryPrepareDepositWithBodyWithResponse request with any body
	PostApiV1PrimaryPrepareDepositWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareDepositResponse, error)

	PostApiV1PrimaryPrepareDepositWithResponse(ctx context.Context, body PostApiV1PrimaryPrepareDepositJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareDepositResponse, error)

	// PostApiV1PrimaryPrepareLaunchWithBodyWithResponse request with any body
	PostApiV1PrimaryPrepareLaunchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareLaunchResponse, error)

	PostApiV1PrimaryPrepareLaunchWithResponse(ctx context.Context, body PostApiV1PrimaryPrepareLaunchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareLaunchResponse, error)

	// PostApiV1PrimaryPrepareLiquidateWithBodyWithResponse request with any body
	PostApiV1PrimaryPrepareLiquidateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareLiquidateResponse, error)

	PostApiV1PrimaryPrepareLiquidateWithResponse(ctx context.Context, body PostApiV1PrimaryPrepareLiquidateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareLiquidateResponse, error)

	// PostApiV1PrimaryPrepareRedeemWithBodyWithResponse request with any body
	PostApiV1PrimaryPrepareRedeemWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareRedeemResponse, error)

	PostApiV1PrimaryPrepareRedeemWithResponse(ctx context.Context, body PostApiV1PrimaryPrepareRedeemJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareRedeemResponse, error)

	// PostApiV1PrimaryPrepareSettleWithBodyWithResponse request with any body
	PostApiV1PrimaryPrepareSettleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareSettleResponse, error)

	PostApiV1PrimaryPrepareSettleWithResponse(ctx context.Context, body PostApiV1PrimaryPrepareSettleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareSettleResponse, error)

	// PostApiV1SwapPrepareTxWithBodyWithResponse request with any body
	PostApiV1SwapPrepareTxWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1SwapPrepareTxResponse, error)

	PostApiV1SwapPrepareTxWithResponse(ctx context.Context, body PostApiV1SwapPrepareTxJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1SwapPrepareTxResponse, error)

	// GetApiV1SwapPriceWithResponse request
	GetApiV1SwapPriceWithResponse(ctx context.Context, params *GetApiV1SwapPriceParams, reqEditors ...RequestEditorFn) (*GetApiV1SwapPriceResponse, error)
}

type GetApiV1CommonBalanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                 `json:"code,omitempty"`
		Data *ResponseBalanceResp `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1CommonBalanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1CommonBalanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1CommonSubmitTxResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                `json:"code,omitempty"`
		Data *ResponseSubmitResp `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1CommonSubmitTxResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1CommonSubmitTxResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1CommonTxResultResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                  `json:"code,omitempty"`
		Data *ResponseTxResultResp `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1CommonTxResultResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1CommonTxResultResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1KeyGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int    `json:"code,omitempty"`
		Data *string `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1KeyGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1KeyGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1PrimaryCreatePoolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                                `json:"code,omitempty"`
		Data *ResponseCreatePoolAndLiquidityResp `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1PrimaryCreatePoolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1PrimaryCreatePoolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1PrimaryPrepareBorrowerWithdrawResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                       `json:"code,omitempty"`
		Data *ResponseRedeemPrepareResp `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1PrimaryPrepareBorrowerWithdrawResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1PrimaryPrepareBorrowerWithdrawResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1PrimaryPrepareDepositResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                        `json:"code,omitempty"`
		Data *ResponseDepositPrepareResp `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1PrimaryPrepareDepositResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1PrimaryPrepareDepositResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1PrimaryPrepareLaunchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                       `json:"code,omitempty"`
		Data *ResponseLaunchPrepareResp `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1PrimaryPrepareLaunchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1PrimaryPrepareLaunchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1PrimaryPrepareLiquidateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                   `json:"code,omitempty"`
		Data *ResponseLiquidateResp `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1PrimaryPrepareLiquidateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1PrimaryPrepareLiquidateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1PrimaryPrepareRedeemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                        `json:"code,omitempty"`
		Data *ResponseReclaimPrepareResp `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1PrimaryPrepareRedeemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1PrimaryPrepareRedeemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1PrimaryPrepareSettleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                `json:"code,omitempty"`
		Data *ResponseSettleResp `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1PrimaryPrepareSettleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1PrimaryPrepareSettleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1SwapPrepareTxResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                     `json:"code,omitempty"`
		Data *ResponseSwapPrepareResp `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1SwapPrepareTxResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1SwapPrepareTxResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1SwapPriceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                   `json:"code,omitempty"`
		Data *ResponseSwapPriceResp `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1SwapPriceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1SwapPriceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetApiV1CommonBalanceWithResponse request returning *GetApiV1CommonBalanceResponse
func (c *ClientWithResponses) GetApiV1CommonBalanceWithResponse(ctx context.Context, params *GetApiV1CommonBalanceParams, reqEditors ...RequestEditorFn) (*GetApiV1CommonBalanceResponse, error) {
	rsp, err := c.GetApiV1CommonBalance(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1CommonBalanceResponse(rsp)
}

// PostApiV1CommonSubmitTxWithBodyWithResponse request with arbitrary body returning *PostApiV1CommonSubmitTxResponse
func (c *ClientWithResponses) PostApiV1CommonSubmitTxWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1CommonSubmitTxResponse, error) {
	rsp, err := c.PostApiV1CommonSubmitTxWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1CommonSubmitTxResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1CommonSubmitTxWithResponse(ctx context.Context, body PostApiV1CommonSubmitTxJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1CommonSubmitTxResponse, error) {
	rsp, err := c.PostApiV1CommonSubmitTx(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1CommonSubmitTxResponse(rsp)
}

// GetApiV1CommonTxResultWithResponse request returning *GetApiV1CommonTxResultResponse
func (c *ClientWithResponses) GetApiV1CommonTxResultWithResponse(ctx context.Context, params *GetApiV1CommonTxResultParams, reqEditors ...RequestEditorFn) (*GetApiV1CommonTxResultResponse, error) {
	rsp, err := c.GetApiV1CommonTxResult(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1CommonTxResultResponse(rsp)
}

// GetApiV1KeyGetWithResponse request returning *GetApiV1KeyGetResponse
func (c *ClientWithResponses) GetApiV1KeyGetWithResponse(ctx context.Context, params *GetApiV1KeyGetParams, reqEditors ...RequestEditorFn) (*GetApiV1KeyGetResponse, error) {
	rsp, err := c.GetApiV1KeyGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1KeyGetResponse(rsp)
}

// PostApiV1PrimaryCreatePoolWithBodyWithResponse request with arbitrary body returning *PostApiV1PrimaryCreatePoolResponse
func (c *ClientWithResponses) PostApiV1PrimaryCreatePoolWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryCreatePoolResponse, error) {
	rsp, err := c.PostApiV1PrimaryCreatePoolWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PrimaryCreatePoolResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1PrimaryCreatePoolWithResponse(ctx context.Context, body PostApiV1PrimaryCreatePoolJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryCreatePoolResponse, error) {
	rsp, err := c.PostApiV1PrimaryCreatePool(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PrimaryCreatePoolResponse(rsp)
}

// PostApiV1PrimaryPrepareBorrowerWithdrawWithBodyWithResponse request with arbitrary body returning *PostApiV1PrimaryPrepareBorrowerWithdrawResponse
func (c *ClientWithResponses) PostApiV1PrimaryPrepareBorrowerWithdrawWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareBorrowerWithdrawResponse, error) {
	rsp, err := c.PostApiV1PrimaryPrepareBorrowerWithdrawWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PrimaryPrepareBorrowerWithdrawResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1PrimaryPrepareBorrowerWithdrawWithResponse(ctx context.Context, body PostApiV1PrimaryPrepareBorrowerWithdrawJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareBorrowerWithdrawResponse, error) {
	rsp, err := c.PostApiV1PrimaryPrepareBorrowerWithdraw(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PrimaryPrepareBorrowerWithdrawResponse(rsp)
}

// PostApiV1PrimaryPrepareDepositWithBodyWithResponse request with arbitrary body returning *PostApiV1PrimaryPrepareDepositResponse
func (c *ClientWithResponses) PostApiV1PrimaryPrepareDepositWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareDepositResponse, error) {
	rsp, err := c.PostApiV1PrimaryPrepareDepositWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PrimaryPrepareDepositResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1PrimaryPrepareDepositWithResponse(ctx context.Context, body PostApiV1PrimaryPrepareDepositJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareDepositResponse, error) {
	rsp, err := c.PostApiV1PrimaryPrepareDeposit(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PrimaryPrepareDepositResponse(rsp)
}

// PostApiV1PrimaryPrepareLaunchWithBodyWithResponse request with arbitrary body returning *PostApiV1PrimaryPrepareLaunchResponse
func (c *ClientWithResponses) PostApiV1PrimaryPrepareLaunchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareLaunchResponse, error) {
	rsp, err := c.PostApiV1PrimaryPrepareLaunchWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PrimaryPrepareLaunchResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1PrimaryPrepareLaunchWithResponse(ctx context.Context, body PostApiV1PrimaryPrepareLaunchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareLaunchResponse, error) {
	rsp, err := c.PostApiV1PrimaryPrepareLaunch(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PrimaryPrepareLaunchResponse(rsp)
}

// PostApiV1PrimaryPrepareLiquidateWithBodyWithResponse request with arbitrary body returning *PostApiV1PrimaryPrepareLiquidateResponse
func (c *ClientWithResponses) PostApiV1PrimaryPrepareLiquidateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareLiquidateResponse, error) {
	rsp, err := c.PostApiV1PrimaryPrepareLiquidateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PrimaryPrepareLiquidateResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1PrimaryPrepareLiquidateWithResponse(ctx context.Context, body PostApiV1PrimaryPrepareLiquidateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareLiquidateResponse, error) {
	rsp, err := c.PostApiV1PrimaryPrepareLiquidate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PrimaryPrepareLiquidateResponse(rsp)
}

// PostApiV1PrimaryPrepareRedeemWithBodyWithResponse request with arbitrary body returning *PostApiV1PrimaryPrepareRedeemResponse
func (c *ClientWithResponses) PostApiV1PrimaryPrepareRedeemWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareRedeemResponse, error) {
	rsp, err := c.PostApiV1PrimaryPrepareRedeemWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PrimaryPrepareRedeemResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1PrimaryPrepareRedeemWithResponse(ctx context.Context, body PostApiV1PrimaryPrepareRedeemJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareRedeemResponse, error) {
	rsp, err := c.PostApiV1PrimaryPrepareRedeem(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PrimaryPrepareRedeemResponse(rsp)
}

// PostApiV1PrimaryPrepareSettleWithBodyWithResponse request with arbitrary body returning *PostApiV1PrimaryPrepareSettleResponse
func (c *ClientWithResponses) PostApiV1PrimaryPrepareSettleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareSettleResponse, error) {
	rsp, err := c.PostApiV1PrimaryPrepareSettleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PrimaryPrepareSettleResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1PrimaryPrepareSettleWithResponse(ctx context.Context, body PostApiV1PrimaryPrepareSettleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareSettleResponse, error) {
	rsp, err := c.PostApiV1PrimaryPrepareSettle(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PrimaryPrepareSettleResponse(rsp)
}

// PostApiV1SwapPrepareTxWithBodyWithResponse request with arbitrary body returning *PostApiV1SwapPrepareTxResponse
func (c *ClientWithResponses) PostApiV1SwapPrepareTxWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1SwapPrepareTxResponse, error) {
	rsp, err := c.PostApiV1SwapPrepareTxWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1SwapPrepareTxResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1SwapPrepareTxWithResponse(ctx context.Context, body PostApiV1SwapPrepareTxJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1SwapPrepareTxResponse, error) {
	rsp, err := c.PostApiV1SwapPrepareTx(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1SwapPrepareTxResponse(rsp)
}

// GetApiV1SwapPriceWithResponse request returning *GetApiV1SwapPriceResponse
func (c *ClientWithResponses) GetApiV1SwapPriceWithResponse(ctx context.Context, params *GetApiV1SwapPriceParams, reqEditors ...RequestEditorFn) (*GetApiV1SwapPriceResponse, error) {
	rsp, err := c.GetApiV1SwapPrice(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1SwapPriceResponse(rsp)
}

// ParseGetApiV1CommonBalanceResponse parses an HTTP response from a GetApiV1CommonBalanceWithResponse call
func ParseGetApiV1CommonBalanceResponse(rsp *http.Response) (*GetApiV1CommonBalanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1CommonBalanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                 `json:"code,omitempty"`
			Data *ResponseBalanceResp `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1CommonSubmitTxResponse parses an HTTP response from a PostApiV1CommonSubmitTxWithResponse call
func ParsePostApiV1CommonSubmitTxResponse(rsp *http.Response) (*PostApiV1CommonSubmitTxResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1CommonSubmitTxResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                `json:"code,omitempty"`
			Data *ResponseSubmitResp `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1CommonTxResultResponse parses an HTTP response from a GetApiV1CommonTxResultWithResponse call
func ParseGetApiV1CommonTxResultResponse(rsp *http.Response) (*GetApiV1CommonTxResultResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1CommonTxResultResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                  `json:"code,omitempty"`
			Data *ResponseTxResultResp `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1KeyGetResponse parses an HTTP response from a GetApiV1KeyGetWithResponse call
func ParseGetApiV1KeyGetResponse(rsp *http.Response) (*GetApiV1KeyGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1KeyGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int    `json:"code,omitempty"`
			Data *string `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1PrimaryCreatePoolResponse parses an HTTP response from a PostApiV1PrimaryCreatePoolWithResponse call
func ParsePostApiV1PrimaryCreatePoolResponse(rsp *http.Response) (*PostApiV1PrimaryCreatePoolResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1PrimaryCreatePoolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                                `json:"code,omitempty"`
			Data *ResponseCreatePoolAndLiquidityResp `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1PrimaryPrepareBorrowerWithdrawResponse parses an HTTP response from a PostApiV1PrimaryPrepareBorrowerWithdrawWithResponse call
func ParsePostApiV1PrimaryPrepareBorrowerWithdrawResponse(rsp *http.Response) (*PostApiV1PrimaryPrepareBorrowerWithdrawResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1PrimaryPrepareBorrowerWithdrawResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                       `json:"code,omitempty"`
			Data *ResponseRedeemPrepareResp `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1PrimaryPrepareDepositResponse parses an HTTP response from a PostApiV1PrimaryPrepareDepositWithResponse call
func ParsePostApiV1PrimaryPrepareDepositResponse(rsp *http.Response) (*PostApiV1PrimaryPrepareDepositResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1PrimaryPrepareDepositResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                        `json:"code,omitempty"`
			Data *ResponseDepositPrepareResp `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1PrimaryPrepareLaunchResponse parses an HTTP response from a PostApiV1PrimaryPrepareLaunchWithResponse call
func ParsePostApiV1PrimaryPrepareLaunchResponse(rsp *http.Response) (*PostApiV1PrimaryPrepareLaunchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1PrimaryPrepareLaunchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                       `json:"code,omitempty"`
			Data *ResponseLaunchPrepareResp `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1PrimaryPrepareLiquidateResponse parses an HTTP response from a PostApiV1PrimaryPrepareLiquidateWithResponse call
func ParsePostApiV1PrimaryPrepareLiquidateResponse(rsp *http.Response) (*PostApiV1PrimaryPrepareLiquidateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1PrimaryPrepareLiquidateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                   `json:"code,omitempty"`
			Data *ResponseLiquidateResp `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1PrimaryPrepareRedeemResponse parses an HTTP response from a PostApiV1PrimaryPrepareRedeemWithResponse call
func ParsePostApiV1PrimaryPrepareRedeemResponse(rsp *http.Response) (*PostApiV1PrimaryPrepareRedeemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1PrimaryPrepareRedeemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                        `json:"code,omitempty"`
			Data *ResponseReclaimPrepareResp `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1PrimaryPrepareSettleResponse parses an HTTP response from a PostApiV1PrimaryPrepareSettleWithResponse call
func ParsePostApiV1PrimaryPrepareSettleResponse(rsp *http.Response) (*PostApiV1PrimaryPrepareSettleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1PrimaryPrepareSettleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                `json:"code,omitempty"`
			Data *ResponseSettleResp `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1SwapPrepareTxResponse parses an HTTP response from a PostApiV1SwapPrepareTxWithResponse call
func ParsePostApiV1SwapPrepareTxResponse(rsp *http.Response) (*PostApiV1SwapPrepareTxResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1SwapPrepareTxResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                     `json:"code,omitempty"`
			Data *ResponseSwapPrepareResp `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1SwapPriceResponse parses an HTTP response from a GetApiV1SwapPriceWithResponse call
func ParseGetApiV1SwapPriceResponse(rsp *http.Response) (*GetApiV1SwapPriceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1SwapPriceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                   `json:"code,omitempty"`
			Data *ResponseSwapPriceResp `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Sd/beBL8JwAA//8onO9YYEIAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
