// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package client

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// Defines values for CommonChainID.
const (
	SOLANA CommonChainID = "1001"
)

// Defines values for EntityDEXPlatform.
const (
	DexRaydium     EntityDEXPlatform = "Raydium"
	DexRaydiumCLMM EntityDEXPlatform = "Raydium CLMM"
)

// Defines values for RequestChainId.
const (
	Base     RequestChainId = "8453"
	Bsc      RequestChainId = "56"
	OffChain RequestChainId = "0"
	Solana   RequestChainId = "1001"
	Tron     RequestChainId = "728126428"
)

// Defines values for RequestTokenType.
const (
	TokenTypeBNB  RequestTokenType = "BNB"
	TokenTypeETH  RequestTokenType = "ETH"
	TokenTypeTRX  RequestTokenType = "TRX"
	TokenTypeUSDC RequestTokenType = "USDC"
	TokenTypeUSDT RequestTokenType = "USDT"
)

// Defines values for GetApiV1CommonBalanceParamsChainId.
const (
	GetApiV1CommonBalanceParamsChainIdN1001 GetApiV1CommonBalanceParamsChainId = "1001"
)

// Defines values for GetApiV1CommonTxResultParamsChainId.
const (
	GetApiV1CommonTxResultParamsChainIdN1001 GetApiV1CommonTxResultParamsChainId = "1001"
)

// Defines values for GetApiV1SwapPriceParamsChainId.
const (
	GetApiV1SwapPriceParamsChainIdN1001 GetApiV1SwapPriceParamsChainId = "1001"
)

// Defines values for GetApiV1SwapPriceParamsPlatform.
const (
	Raydium     GetApiV1SwapPriceParamsPlatform = "Raydium"
	RaydiumCLMM GetApiV1SwapPriceParamsPlatform = "Raydium CLMM"
)

// Defines values for GetApiV2PrimaryDividendGetParamsChainId.
const (
	GetApiV2PrimaryDividendGetParamsChainIdN1001 GetApiV2PrimaryDividendGetParamsChainId = "1001"
)

// BigInt defines model for big.Int.
type BigInt = map[string]interface{}

// CommonApiResp API标准响应格式
type CommonApiResp struct {
	// Code Code is the response code
	// @Description 响应状态码
	Code *int `json:"code,omitempty"`

	// Data Data is the response data
	// @Description 响应数据
	Data interface{} `json:"data,omitempty"`

	// Message Message is the response message
	// @Description 响应消息
	Message *string `json:"message,omitempty"`
}

// CommonChainID defines model for common.ChainID.
type CommonChainID string

// EntityDEXPlatform defines model for entity.DEX_Platform.
type EntityDEXPlatform string

// EntityDepositPrepareTx defines model for entity.DepositPrepareTx.
type EntityDepositPrepareTx struct {
	ChainId      *BigInt           `json:"chain_id,omitempty"`
	ContractName *string           `json:"contract_name,omitempty"`
	From         *[]int            `json:"from,omitempty"`
	GasLimit     *int              `json:"gas_limit,omitempty"`
	GasPrice     *BigInt           `json:"gas_price,omitempty"`
	Hash         *string           `json:"hash,omitempty"`
	Nonce        *int              `json:"nonce,omitempty"`
	RawTxHex     *string           `json:"raw_tx_hex,omitempty"`
	TxData       *TypesTransaction `json:"tx_data,omitempty"`
}

// EntityFundingOverviewTx defines model for entity.FundingOverviewTx.
type EntityFundingOverviewTx struct {
	ChainId      *BigInt           `json:"chain_id,omitempty"`
	ContractName *string           `json:"contract_name,omitempty"`
	From         *[]int            `json:"from,omitempty"`
	GasLimit     *int              `json:"gas_limit,omitempty"`
	GasPrice     *BigInt           `json:"gas_price,omitempty"`
	Hash         *string           `json:"hash,omitempty"`
	Nonce        *int              `json:"nonce,omitempty"`
	RawTxHex     *string           `json:"raw_tx_hex,omitempty"`
	TxData       *TypesTransaction `json:"tx_data,omitempty"`
}

// EntityTokenLaunchPrepareTx defines model for entity.TokenLaunchPrepareTx.
type EntityTokenLaunchPrepareTx struct {
	ChainId      *BigInt `json:"chain_id,omitempty"`
	ContractName *string `json:"contract_name,omitempty"`

	// DividendAddr 分红地址
	DividendAddr *string           `json:"dividend_addr,omitempty"`
	From         *[]int            `json:"from,omitempty"`
	GasLimit     *int              `json:"gas_limit,omitempty"`
	GasPrice     *BigInt           `json:"gas_price,omitempty"`
	Hash         *string           `json:"hash,omitempty"`
	Nonce        *int              `json:"nonce,omitempty"`
	RawTxHex     *string           `json:"raw_tx_hex,omitempty"`
	TxData       *TypesTransaction `json:"tx_data,omitempty"`

	// VaultAddr vault地址
	VaultAddr *string `json:"vault_addr,omitempty"`

	// VaultMintAddr vault mint token地址
	VaultMintAddr *string `json:"vault_mint_addr,omitempty"`
}

// EntityVaultClaimRewardTx defines model for entity.VaultClaimRewardTx.
type EntityVaultClaimRewardTx struct {
	ChainId      *BigInt           `json:"chain_id,omitempty"`
	ContractName *string           `json:"contract_name,omitempty"`
	From         *[]int            `json:"from,omitempty"`
	GasLimit     *int              `json:"gas_limit,omitempty"`
	GasPrice     *BigInt           `json:"gas_price,omitempty"`
	Hash         *string           `json:"hash,omitempty"`
	Nonce        *int              `json:"nonce,omitempty"`
	RawTxHex     *string           `json:"raw_tx_hex,omitempty"`
	TxData       *TypesTransaction `json:"tx_data,omitempty"`
}

// EntityVaultDistributeDividendTx defines model for entity.VaultDistributeDividendTx.
type EntityVaultDistributeDividendTx struct {
	ChainId      *BigInt           `json:"chain_id,omitempty"`
	ContractName *string           `json:"contract_name,omitempty"`
	From         *[]int            `json:"from,omitempty"`
	GasLimit     *int              `json:"gas_limit,omitempty"`
	GasPrice     *BigInt           `json:"gas_price,omitempty"`
	Hash         *string           `json:"hash,omitempty"`
	Nonce        *int              `json:"nonce,omitempty"`
	RawTxHex     *string           `json:"raw_tx_hex,omitempty"`
	TxData       *TypesTransaction `json:"tx_data,omitempty"`
}

// EntityVaultRedeemTx defines model for entity.VaultRedeemTx.
type EntityVaultRedeemTx struct {
	ChainId      *BigInt           `json:"chain_id,omitempty"`
	ContractName *string           `json:"contract_name,omitempty"`
	From         *[]int            `json:"from,omitempty"`
	GasLimit     *int              `json:"gas_limit,omitempty"`
	GasPrice     *BigInt           `json:"gas_price,omitempty"`
	Hash         *string           `json:"hash,omitempty"`
	Nonce        *int              `json:"nonce,omitempty"`
	RawTxHex     *string           `json:"raw_tx_hex,omitempty"`
	TxData       *TypesTransaction `json:"tx_data,omitempty"`
}

// EntityWithdrawPrepareTx defines model for entity.WithdrawPrepareTx.
type EntityWithdrawPrepareTx struct {
	ChainId      *BigInt           `json:"chain_id,omitempty"`
	ContractName *string           `json:"contract_name,omitempty"`
	From         *[]int            `json:"from,omitempty"`
	GasLimit     *int              `json:"gas_limit,omitempty"`
	GasPrice     *BigInt           `json:"gas_price,omitempty"`
	Hash         *string           `json:"hash,omitempty"`
	Nonce        *int              `json:"nonce,omitempty"`
	RawTxHex     *string           `json:"raw_tx_hex,omitempty"`
	TxData       *TypesTransaction `json:"tx_data,omitempty"`
}

// RequestBalanceQueryReq defines model for request.BalanceQueryReq.
type RequestBalanceQueryReq struct {
	// ChainId 链ID
	ChainId RequestChainId `json:"chain_id"`

	// TokenAddr 代币合约地址(可选)
	TokenAddr *string `json:"token_addr,omitempty"`

	// TokenType 代币类型(ETH/USDT)
	TokenType RequestTokenType `json:"token_type"`

	// UserAddr 用户地址
	UserAddr string `json:"user_addr"`
}

// RequestBorrowerWithdrawReq defines model for request.BorrowerWithdrawReq.
type RequestBorrowerWithdrawReq struct {
	// Amount 提取数额
	Amount  int           `json:"amount"`
	ChainId CommonChainID `json:"chain_id"`

	// VaultAddress vault地址
	VaultAddress string `json:"vault_address"`

	// Withdrawer 提款人
	Withdrawer string `json:"withdrawer"`
}

// RequestChainId defines model for request.ChainId.
type RequestChainId string

// RequestCreatePoolAndLiquidityReq defines model for request.CreatePoolAndLiquidityReq.
type RequestCreatePoolAndLiquidityReq struct {
	ChainId CommonChainID `json:"chain_id"`

	// VaultAddress vault地址
	VaultAddress string `json:"vault_address"`
}

// RequestDeployPrepareReq defines model for request.DeployPrepareReq.
type RequestDeployPrepareReq struct {
	// ChainId 链ID
	ChainId int `json:"chain_id"`

	// ContractNames 要部署的合约名称列表
	ContractNames []string `json:"contract_names"`

	// FromAddress 部署者地址
	FromAddress string `json:"from_address"`
}

// RequestDeploySubmitReq defines model for request.DeploySubmitReq.
type RequestDeploySubmitReq struct {
	// ChainId 链ID
	ChainId int `json:"chain_id"`

	// SignedTxs 已签名的部署交易列表
	SignedTxs []RequestSignedDeploymentTx `json:"signed_txs"`
}

// RequestDepositReq defines model for request.DepositReq.
type RequestDepositReq struct {
	// Amount 投资额(以vault融资货币计价)
	Amount  int           `json:"amount"`
	ChainId CommonChainID `json:"chain_id"`

	// Investor 投资人地址
	Investor string `json:"investor"`

	// VaultAddress vault地址
	VaultAddress string `json:"vault_address"`
}

// RequestFinancingRule defines model for request.FinancingRule.
type RequestFinancingRule struct {
	// ExcessFundraisingRatioBps 超募比例bps
	ExcessFundraisingRatioBps *int `json:"excess_fundraising_ratio_bps,omitempty"`

	// FinancingCurrencyAddr 融资货币地址
	FinancingCurrencyAddr string `json:"financing_currency_addr"`
	FinancingDeadline     *int   `json:"financing_deadline,omitempty"`
	FinancingStartTime    *int   `json:"financing_start_time,omitempty"`

	// MinInvestmentBaseFinancingCurrency 最小投资额
	MinInvestmentBaseFinancingCurrency int `json:"min_investment_base_financing_currency"`

	// PriceBaseFinancingCurrency 融资货币计价
	PriceBaseFinancingCurrency int `json:"price_base_financing_currency"`

	// TargetAmountBaseFinancingCurrency 目标融资额
	TargetAmountBaseFinancingCurrency int `json:"target_amount_base_financing_currency"`
}

// RequestFinancingRuleInfo defines model for request.FinancingRuleInfo.
type RequestFinancingRuleInfo struct {
	// DecimalsMultiplier 精度倍数, 例如，使用ETH融资，就是 "1", 使用USDT融资，就是 "1"
	DecimalsMultiplier *string `json:"decimals_multiplier,omitempty"`

	// ExcessFundraisingRatioBps 超募比例bps uint64
	ExcessFundraisingRatioBps *string `json:"excess_fundraising_ratio_bps,omitempty"`

	// FinancingCurrencyAddr 融资货币地址
	FinancingCurrencyAddr string `json:"financing_currency_addr"`

	// FinancingDeadline 融资截止时间 int64(时间戳) 秒级时间戳字符串
	FinancingDeadline *int `json:"financing_deadline,omitempty"`

	// FinancingStartTime 融资开始时间 int64(时间戳) 秒级时间戳字符串
	FinancingStartTime *int `json:"financing_start_time,omitempty"`

	// FundingReceiver 融资接收地址
	FundingReceiver *string `json:"funding_receiver,omitempty"`

	// ManageFeeBps 管理费bps 比如2%，就写 "200"
	ManageFeeBps *string `json:"manage_fee_bps,omitempty"`

	// ManageFeeReceiver 管理费接收地址
	ManageFeeReceiver *string `json:"manage_fee_receiver,omitempty"`

	// MinInvestmentBaseFinancingCurrency 最小投资额 uint64， 100 U, 就写"100"
	MinInvestmentBaseFinancingCurrency string `json:"min_investment_base_financing_currency"`

	// ProjectName vault项目名称
	ProjectName string `json:"project_name"`

	// SharePrice 份额价格, 0.1U, 就写 ""0.1""
	SharePrice *string `json:"share_price,omitempty"`

	// SoftCap 软顶10万, "100000"
	SoftCap string `json:"soft_cap"`

	// TargetAmountBaseFinancingCurrency 目标融资额 uint64, 比如100万, "1000000"
	TargetAmountBaseFinancingCurrency string `json:"target_amount_base_financing_currency"`
}

// RequestFundingOverviewReq defines model for request.FundingOverviewReq.
type RequestFundingOverviewReq struct {
	ChainId CommonChainID `json:"chain_id"`

	// VaultAddress vault地址
	VaultAddress string `json:"vault_address"`
}

// RequestLiquidateReq defines model for request.LiquidateReq.
type RequestLiquidateReq struct {
	ChainId      CommonChainID `json:"chain_id"`
	VaultAddress string        `json:"vault_address"`
}

// RequestProcessTxReq defines model for request.ProcessTxReq.
type RequestProcessTxReq struct {
	// EndSlot 结束 slot (可选，如果不传则处理到最新)
	EndSlot *int `json:"end_slot,omitempty"`

	// Mint Token mint 地址
	Mint string `json:"mint"`

	// StartSlot 起始 slot
	StartSlot *int `json:"start_slot,omitempty"`

	// TaskId 任务ID
	TaskId string `json:"task_id"`

	// Vault Vault ID
	Vault string `json:"vault"`
}

// RequestRedeemReq defines model for request.RedeemReq.
type RequestRedeemReq struct {
	// Amount 提取数额
	Amount  int           `json:"amount"`
	ChainId CommonChainID `json:"chain_id"`

	// Investor 投资人地址
	Investor string `json:"investor"`

	// VaultAddress vault地址
	VaultAddress string `json:"vault_address"`
}

// RequestSettleReq defines model for request.SettleReq.
type RequestSettleReq struct {
	// Amount 数量
	Amount  int           `json:"amount"`
	ChainId CommonChainID `json:"chain_id"`

	// VaultAddress vault地址
	VaultAddress string `json:"vault_address"`
}

// RequestSignedDeploymentTx defines model for request.SignedDeploymentTx.
type RequestSignedDeploymentTx struct {
	// ContractName 合约名称
	ContractName string `json:"contract_name"`

	// SignedTxHex 已签名交易的十六进制表示
	SignedTxHex string `json:"signed_tx_hex"`
}

// RequestSubmitReq defines model for request.SubmitReq.
type RequestSubmitReq struct {
	ChainId CommonChainID `json:"chain_id"`

	// Sender 提交人地址
	Sender string `json:"sender"`

	// SignTxBase64 签名交易体字符串 base64编码
	SignTxBase64 string `json:"sign_tx_base64"`

	// TxMsgBase64 待签名数据
	TxMsgBase64 string `json:"tx_msg_base64"`
}

// RequestSwapPrepareReq defines model for request.SwapPrepareReq.
type RequestSwapPrepareReq struct {
	// Amount 存入数量
	Amount  string        `json:"amount"`
	ChainId CommonChainID `json:"chain_id"`

	// InputMint 存入代币地址
	InputMint string `json:"input_mint"`

	// MinOutAmount 限制最小可兑换出的数量
	MinOutAmount string `json:"min_out_amount"`

	// OutputMint 兑换出的代币地址
	OutputMint string            `json:"output_mint"`
	Platform   EntityDEXPlatform `json:"platform"`
	Sender     string            `json:"sender"`

	// VaultAddress vault地址
	VaultAddress string `json:"vault_address"`
}

// RequestSyncTxTaskReq defines model for request.SyncTxTaskReq.
type RequestSyncTxTaskReq struct {
	// LaunchTxHash 发起vault的交易哈希
	LaunchTxHash *string `json:"launch_tx_hash,omitempty"`

	// Mint Token mint 地址
	Mint string `json:"mint"`

	// StartSlot 起始 slot
	StartSlot *int `json:"start_slot,omitempty"`

	// Vault Vault ID
	Vault string `json:"vault"`
}

// RequestTokenLaunchReq defines model for request.TokenLaunchReq.
type RequestTokenLaunchReq struct {
	ChainId CommonChainID `json:"chain_id"`

	// FinancingRuleData 融资信息
	FinancingRuleData RequestFinancingRule `json:"financing_rule_data"`

	// ManagementData 管理信息
	ManagementData RequestTokenManage `json:"management_data"`

	// TokenMetaData token元数据信息
	TokenMetaData RequestTokenMeta `json:"token_meta_data"`
}

// RequestTokenManage defines model for request.TokenManage.
type RequestTokenManage struct {
	// Borrower 融资成功后的提款人
	Borrower string `json:"borrower"`

	// Deployer 发行人
	Deployer string `json:"deployer"`

	// Manager 管理员
	Manager string `json:"manager"`
}

// RequestTokenMeta defines model for request.TokenMeta.
type RequestTokenMeta struct {
	TokenDecimals int    `json:"token_decimals"`
	TokenName     string `json:"token_name"`
	TokenSymbol   string `json:"token_symbol"`
	TokenUri      string `json:"token_uri"`
}

// RequestTokenType defines model for request.TokenType.
type RequestTokenType string

// RequestTransferPrepareReq defines model for request.TransferPrepareReq.
type RequestTransferPrepareReq struct {
	// Amount 转账金额
	Amount string `json:"amount"`

	// ChainId 链ID
	ChainId RequestChainId `json:"chain_id"`

	// FromAddr 发送方地址
	FromAddr string `json:"from_addr"`

	// ToAddr 接收方地址
	ToAddr string `json:"to_addr"`

	// TokenAddr 代币合约地址(可选)
	TokenAddr *string `json:"token_addr,omitempty"`

	// TokenType 代币类型(ETH/USDT)
	TokenType RequestTokenType `json:"token_type"`
}

// RequestTransferSubmitReq defines model for request.TransferSubmitReq.
type RequestTransferSubmitReq struct {
	// ChainId 链ID
	ChainId RequestChainId `json:"chain_id"`

	// SignedTx 已签名的交易hex
	SignedTx string `json:"signed_tx"`
}

// RequestVaultClaimRewardReq defines model for request.VaultClaimRewardReq.
type RequestVaultClaimRewardReq struct {
	// Amount 提取数额 uint64
	Amount  string        `json:"amount"`
	ChainId CommonChainID `json:"chain_id"`

	// Investor 投资人地址
	Investor string `json:"investor"`

	// VaultAddress vault地址
	VaultAddress string `json:"vault_address"`
}

// RequestVaultCreateReq defines model for request.VaultCreateReq.
type RequestVaultCreateReq struct {
	ChainId CommonChainID `json:"chain_id"`

	// EnableWhitelist 是否开启白名单
	EnableWhitelist *bool `json:"enable_whitelist,omitempty"`

	// FinancingRuleData 融资信息
	FinancingRuleData RequestFinancingRuleInfo `json:"financing_rule_data"`

	// ManagementData 管理信息
	ManagementData RequestVaultManagement `json:"management_data"`

	// TokenMetaData token元数据信息
	TokenMetaData RequestTokenMeta `json:"token_meta_data"`
}

// RequestVaultDepositReq defines model for request.VaultDepositReq.
type RequestVaultDepositReq struct {
	// Amount 投资额(以vault融资货币计价) uint64
	Amount  string        `json:"amount"`
	ChainId CommonChainID `json:"chain_id"`

	// Investor 投资人地址
	Investor string `json:"investor"`

	// VaultAddress vault地址
	VaultAddress string `json:"vault_address"`
}

// RequestVaultDistributeDividendReq defines model for request.VaultDistributeDividendReq.
type RequestVaultDistributeDividendReq struct {
	// Amount 派息数额 uint64
	Amount  string        `json:"amount"`
	ChainId CommonChainID `json:"chain_id"`

	// Signature 派息签名
	Signature string `json:"signature"`
}

// RequestVaultManagement defines model for request.VaultManagement.
type RequestVaultManagement struct {
	// Deployer 部署者
	Deployer string `json:"deployer"`

	// DividendManager 分红管理员钱包地址
	DividendManager string `json:"dividend_manager"`

	// Issuer 发行人
	Issuer string `json:"issuer"`

	// Manager vault管理员 (链上签名+链下调用)
	Manager string `json:"manager"`

	// Withdrawer 融资成功后的提款人
	Withdrawer string `json:"withdrawer"`
}

// RequestVaultRedeemReq defines model for request.VaultRedeemReq.
type RequestVaultRedeemReq struct {
	// Amount 提取数额
	Amount  int           `json:"amount"`
	ChainId CommonChainID `json:"chain_id"`

	// Investor 投资人地址
	Investor string `json:"investor"`

	// VaultAddress vault地址
	VaultAddress string `json:"vault_address"`
}

// RequestVaultWithdrawReq defines model for request.VaultWithdrawReq.
type RequestVaultWithdrawReq struct {
	// Amount 提取数额 uint64
	Amount  string        `json:"amount"`
	ChainId CommonChainID `json:"chain_id"`

	// VaultAddress vault地址
	VaultAddress string `json:"vault_address"`

	// Withdrawer 投资人地址
	Withdrawer string `json:"withdrawer"`
}

// ResponseBalanceQueryResp defines model for response.BalanceQueryResp.
type ResponseBalanceQueryResp struct {
	// Balance 余额
	Balance string `json:"balance"`

	// ChainId 链ID
	ChainId string `json:"chain_id"`

	// Decimals 精度
	Decimals int `json:"decimals"`

	// TokenAddr 代币合约地址(可选)
	TokenAddr *string `json:"token_addr,omitempty"`

	// TokenType 代币类型(ETH/USDT)
	TokenType string `json:"token_type"`

	// UserAddr 用户地址
	UserAddr string `json:"user_addr"`
}

// ResponseBalanceResp defines model for response.BalanceResp.
type ResponseBalanceResp struct {
	Balance      *string `json:"balance,omitempty"`
	ChainId      *string `json:"chain_id,omitempty"`
	Owner        *string `json:"owner,omitempty"`
	TokenAddress *string `json:"token_address,omitempty"`
}

// ResponseCreatePoolAndLiquidityResp defines model for response.CreatePoolAndLiquidityResp.
type ResponseCreatePoolAndLiquidityResp struct {
	TxMsgBase64 string `json:"tx_msg_base64"`
}

// ResponseDeployPrepareResp defines model for response.DeployPrepareResp.
type ResponseDeployPrepareResp struct {
	// UnsignedTxs 未签名的部署交易列表
	UnsignedTxs *[]ResponseUnsignedDeploymentTx `json:"unsigned_txs,omitempty"`
}

// ResponseDeploySubmitResp defines model for response.DeploySubmitResp.
type ResponseDeploySubmitResp struct {
	// Results 部署结果列表
	Results *[]ResponseDeploymentResult `json:"results,omitempty"`
}

// ResponseDeploymentResult defines model for response.DeploymentResult.
type ResponseDeploymentResult struct {
	// ContractAddress 部署后的合约地址
	ContractAddress *string `json:"contract_address,omitempty"`

	// ContractName 合约名称
	ContractName *string `json:"contract_name,omitempty"`

	// Error 错误信息（如果有）
	Error *string `json:"error,omitempty"`

	// Status 部署状态
	Status *string `json:"status,omitempty"`

	// TxHash 交易哈希
	TxHash *string `json:"tx_hash,omitempty"`
}

// ResponseDepositPrepareResp defines model for response.DepositPrepareResp.
type ResponseDepositPrepareResp struct {
	TxMsgBase64 string `json:"tx_msg_base64"`
}

// ResponseGetHolderInfoResp defines model for response.GetHolderInfoResp.
type ResponseGetHolderInfoResp struct {
	Holders *[]ResponseHolderInfo `json:"holders,omitempty"`
	Total   *int                  `json:"total,omitempty"`
}

// ResponseHolderInfo defines model for response.HolderInfo.
type ResponseHolderInfo struct {
	Balance       *int    `json:"balance,omitempty"`
	BalanceStr    *string `json:"balance_str,omitempty"`
	Decimals      *int    `json:"decimals,omitempty"`
	EndSlot       *int    `json:"end_slot,omitempty"`
	HolderAddress *string `json:"holder_address,omitempty"`
	StartSlot     *int    `json:"start_slot,omitempty"`
	TokenAddress  *string `json:"token_address,omitempty"`
}

// ResponseLaunchPrepareResp defines model for response.LaunchPrepareResp.
type ResponseLaunchPrepareResp struct {
	// AssetMintAddr asset mint
	AssetMintAddr *string `json:"asset_mint_addr,omitempty"`

	// AssetTreasuryAddr asset treasury
	AssetTreasuryAddr *string `json:"asset_treasury_addr,omitempty"`

	// GlobalConfigAddr 全局配置信息
	GlobalConfigAddr *string `json:"global_config_addr,omitempty"`

	// TxMsgBase64 待签名信息
	TxMsgBase64 string `json:"tx_msg_base64"`

	// VaultAddr vault地址
	VaultAddr *string `json:"vault_addr,omitempty"`

	// VaultAuthAddr vault auth
	VaultAuthAddr *string `json:"vault_auth_addr,omitempty"`

	// VaultMintAddr vault mint
	VaultMintAddr *string `json:"vault_mint_addr,omitempty"`

	// VaultTreasuryAddr vault treasury
	VaultTreasuryAddr *string `json:"vault_treasury_addr,omitempty"`
}

// ResponseLiquidateResp defines model for response.LiquidateResp.
type ResponseLiquidateResp struct {
	TxMsgBase64 string `json:"tx_msg_base64"`
}

// ResponseProcessTxResp defines model for response.ProcessTxResp.
type ResponseProcessTxResp struct {
	Status *int    `json:"status,omitempty"`
	Step   *int    `json:"step,omitempty"`
	TaskId *string `json:"task_id,omitempty"`
}

// ResponseReclaimPrepareResp defines model for response.ReclaimPrepareResp.
type ResponseReclaimPrepareResp struct {
	TxMsgBase64 string `json:"tx_msg_base64"`
}

// ResponseRedeemPrepareResp defines model for response.RedeemPrepareResp.
type ResponseRedeemPrepareResp struct {
	TxMsgBase64 string `json:"tx_msg_base64"`
}

// ResponseSenderBalanceChange defines model for response.SenderBalanceChange.
type ResponseSenderBalanceChange struct {
	// NativeBalanceChange 原生代币余额变化
	NativeBalanceChange *int `json:"native_balance_change,omitempty"`

	// NativeDecimals 原生代币decimals
	NativeDecimals *int `json:"native_decimals,omitempty"`

	// TokenBalanceChange 代币余额变化列表
	TokenBalanceChange *[]ResponseTokenBalanceChange `json:"token_balance_change,omitempty"`
}

// ResponseSettleResp defines model for response.SettleResp.
type ResponseSettleResp struct {
	TxMsgBase64 string `json:"tx_msg_base64"`
}

// ResponseSubmitResp defines model for response.SubmitResp.
type ResponseSubmitResp struct {
	FailedMsg *string `json:"failed_msg,omitempty"`

	// SenderBalanceChange 交易发送者余额变化，交易失败时为nil
	SenderBalanceChange *ResponseSenderBalanceChange `json:"sender_balance_change,omitempty"`
	Success             *bool                        `json:"success,omitempty"`
	TxHash              *string                      `json:"tx_hash,omitempty"`
}

// ResponseSwapPrepareResp defines model for response.SwapPrepareResp.
type ResponseSwapPrepareResp struct {
	TxMsgBase64 string `json:"tx_msg_base64"`
}

// ResponseSwapPriceResp defines model for response.SwapPriceResp.
type ResponseSwapPriceResp struct {
	InputMint       *string `json:"input_mint,omitempty"`
	InputMintAmount *string `json:"input_mint_amount,omitempty"`
	OutputMint      *string `json:"output_mint,omitempty"`

	// OutputMintAmount 预计可兑换出来的数量(已考虑raydium手续费和滑点)
	OutputMintAmount *string `json:"output_mint_amount,omitempty"`

	// Price 理论上一个单位的input可以兑换多少output(已除以各自decimals，不考虑手续费和滑点)
	Price *float32 `json:"price,omitempty"`

	// SlippageBps 本次交易预计产生的滑点(bps)
	SlippageBps *int `json:"slippage_bps,omitempty"`
}

// ResponseSyncTxTaskResp defines model for response.SyncTxTaskResp.
type ResponseSyncTxTaskResp struct {
	Status *int `json:"status,omitempty"`

	// Step 同步1，处理2
	Step   *int    `json:"step,omitempty"`
	TaskId *string `json:"task_id,omitempty"`
	Vault  *string `json:"vault,omitempty"`
}

// ResponseTaskInfoResp defines model for response.TaskInfoResp.
type ResponseTaskInfoResp struct {
	Status *int `json:"status,omitempty"`

	// Step 同步1，处理2
	Step   *int    `json:"step,omitempty"`
	TaskId *string `json:"task_id,omitempty"`
	Vault  *string `json:"vault,omitempty"`
}

// ResponseTokenBalanceChange defines model for response.TokenBalanceChange.
type ResponseTokenBalanceChange struct {
	// BalanceChange 余额变化
	BalanceChange *string `json:"balance_change,omitempty"`

	// Decimals decimals
	Decimals *int `json:"decimals,omitempty"`

	// TokenMint 代币地址
	TokenMint *string `json:"token_mint,omitempty"`
}

// ResponseTransferPrepareResp defines model for response.TransferPrepareResp.
type ResponseTransferPrepareResp struct {
	// ChainId 链ID
	ChainId *string `json:"chain_id,omitempty"`

	// GasLimit Gas限制
	GasLimit *int `json:"gas_limit,omitempty"`

	// GasPrice Gas价格
	GasPrice *string `json:"gas_price,omitempty"`

	// Nonce Nonce值
	Nonce *int `json:"nonce,omitempty"`

	// To 目标地址
	To *string `json:"to,omitempty"`

	// TxData 交易数据（hex编码）
	TxData *string `json:"tx_data,omitempty"`

	// Value 交易金额（ETH，对于ERC20转账为0）
	Value *string `json:"value,omitempty"`
}

// ResponseTransferSubmitResp defines model for response.TransferSubmitResp.
type ResponseTransferSubmitResp struct {
	// TxHash 交易哈希
	TxHash *string `json:"tx_hash,omitempty"`
}

// ResponseTxResultResp defines model for response.TxResultResp.
type ResponseTxResultResp struct {
	FailedMsg *string `json:"failed_msg,omitempty"`
	Success   *bool   `json:"success,omitempty"`
	TxHash    *string `json:"tx_hash,omitempty"`
}

// ResponseUnsignedDeploymentTx defines model for response.UnsignedDeploymentTx.
type ResponseUnsignedDeploymentTx struct {
	// ContractName 合约名称
	ContractName *string `json:"contract_name,omitempty"`

	// GasLimit Gas限制
	GasLimit *int `json:"gas_limit,omitempty"`

	// GasPrice Gas价格 (wei)
	GasPrice *string `json:"gas_price,omitempty"`

	// Nonce 交易序号
	Nonce *int `json:"nonce,omitempty"`

	// TxHex 未签名交易的十六进制表示
	TxHex *string `json:"tx_hex,omitempty"`
}

// ResponseUserDividendResp defines model for response.UserDividendResp.
type ResponseUserDividendResp struct {
	// AssetAddr 资产地址
	AssetAddr *string `json:"asset_addr,omitempty"`

	// Balance 余额
	Balance *string `json:"balance,omitempty"`

	// Decimals 精度
	Decimals *int `json:"decimals,omitempty"`

	// UserAddr 用户地址
	UserAddr *string `json:"user_addr,omitempty"`

	// Vault Vault ID
	Vault *string `json:"vault,omitempty"`
}

// TypesTransaction defines model for types.Transaction.
type TypesTransaction = map[string]interface{}

// GetApiV1CommonBalanceParams defines parameters for GetApiV1CommonBalance.
type GetApiV1CommonBalanceParams struct {
	ChainId GetApiV1CommonBalanceParamsChainId `form:"chain_id" json:"chain_id"`

	// Owner 账户地址
	Owner string `form:"owner" json:"owner"`

	// TokenAddress token地址,原生token无需赋值
	TokenAddress *string `form:"token_address,omitempty" json:"token_address,omitempty"`
}

// GetApiV1CommonBalanceParamsChainId defines parameters for GetApiV1CommonBalance.
type GetApiV1CommonBalanceParamsChainId string

// GetApiV1CommonTxResultParams defines parameters for GetApiV1CommonTxResult.
type GetApiV1CommonTxResultParams struct {
	ChainId GetApiV1CommonTxResultParamsChainId `form:"chain_id" json:"chain_id"`
	TxHash  string                              `form:"tx_hash" json:"tx_hash"`
}

// GetApiV1CommonTxResultParamsChainId defines parameters for GetApiV1CommonTxResult.
type GetApiV1CommonTxResultParamsChainId string

// GetApiV1SwapPriceParams defines parameters for GetApiV1SwapPrice.
type GetApiV1SwapPriceParams struct {
	Amount             string                          `form:"amount" json:"amount"`
	ChainId            GetApiV1SwapPriceParamsChainId  `form:"chain_id" json:"chain_id"`
	InputMintDecimals  *int                            `form:"inputMintDecimals,omitempty" json:"inputMintDecimals,omitempty"`
	InputMint          string                          `form:"input_mint" json:"input_mint"`
	OutputMintDecimals *int                            `form:"outputMintDecimals,omitempty" json:"outputMintDecimals,omitempty"`
	OutputMint         string                          `form:"output_mint" json:"output_mint"`
	Platform           GetApiV1SwapPriceParamsPlatform `form:"platform" json:"platform"`

	// VaultAddress vault地址
	VaultAddress string `form:"vault_address" json:"vault_address"`
}

// GetApiV1SwapPriceParamsChainId defines parameters for GetApiV1SwapPrice.
type GetApiV1SwapPriceParamsChainId string

// GetApiV1SwapPriceParamsPlatform defines parameters for GetApiV1SwapPrice.
type GetApiV1SwapPriceParamsPlatform string

// GetApiV2PrimaryDividendGetParams defines parameters for GetApiV2PrimaryDividendGet.
type GetApiV2PrimaryDividendGetParams struct {
	// AssetAddr 资产地址
	AssetAddr string `form:"asset_addr" json:"asset_addr"`

	// ChainId 链ID
	ChainId GetApiV2PrimaryDividendGetParamsChainId `form:"chain_id" json:"chain_id"`

	// UserAddr 用户地址
	UserAddr string `form:"user_addr" json:"user_addr"`

	// Vault Vault ID
	Vault string `form:"vault" json:"vault"`
}

// GetApiV2PrimaryDividendGetParamsChainId defines parameters for GetApiV2PrimaryDividendGet.
type GetApiV2PrimaryDividendGetParamsChainId string

// GetApiV2TokenTxsHolderInfoParams defines parameters for GetApiV2TokenTxsHolderInfo.
type GetApiV2TokenTxsHolderInfoParams struct {
	// Mint Token mint 地址
	Mint string `form:"mint" json:"mint"`

	// Sequence 序列号
	Sequence *int `form:"sequence,omitempty" json:"sequence,omitempty"`

	// UsingApi 使用API
	UsingApi *int `form:"using_api,omitempty" json:"using_api,omitempty"`

	// Vault Vault ID
	Vault string `form:"vault" json:"vault"`
}

// GetApiV2TokenTxsTaskInfoParams defines parameters for GetApiV2TokenTxsTaskInfo.
type GetApiV2TokenTxsTaskInfoParams struct {
	// TaskId 任务ID
	TaskId *string `form:"task_id,omitempty" json:"task_id,omitempty"`

	// Vault Vault ID
	Vault *string `form:"vault,omitempty" json:"vault,omitempty"`
}

// PostApiV1CommonSubmitTxJSONRequestBody defines body for PostApiV1CommonSubmitTx for application/json ContentType.
type PostApiV1CommonSubmitTxJSONRequestBody = RequestSubmitReq

// PostApiV1PrimaryCreatePoolJSONRequestBody defines body for PostApiV1PrimaryCreatePool for application/json ContentType.
type PostApiV1PrimaryCreatePoolJSONRequestBody = RequestCreatePoolAndLiquidityReq

// PostApiV1PrimaryPrepareBorrowerWithdrawJSONRequestBody defines body for PostApiV1PrimaryPrepareBorrowerWithdraw for application/json ContentType.
type PostApiV1PrimaryPrepareBorrowerWithdrawJSONRequestBody = RequestBorrowerWithdrawReq

// PostApiV1PrimaryPrepareDepositJSONRequestBody defines body for PostApiV1PrimaryPrepareDeposit for application/json ContentType.
type PostApiV1PrimaryPrepareDepositJSONRequestBody = RequestDepositReq

// PostApiV1PrimaryPrepareLaunchJSONRequestBody defines body for PostApiV1PrimaryPrepareLaunch for application/json ContentType.
type PostApiV1PrimaryPrepareLaunchJSONRequestBody = RequestTokenLaunchReq

// PostApiV1PrimaryPrepareLiquidateJSONRequestBody defines body for PostApiV1PrimaryPrepareLiquidate for application/json ContentType.
type PostApiV1PrimaryPrepareLiquidateJSONRequestBody = RequestLiquidateReq

// PostApiV1PrimaryPrepareRedeemJSONRequestBody defines body for PostApiV1PrimaryPrepareRedeem for application/json ContentType.
type PostApiV1PrimaryPrepareRedeemJSONRequestBody = RequestRedeemReq

// PostApiV1PrimaryPrepareSettleJSONRequestBody defines body for PostApiV1PrimaryPrepareSettle for application/json ContentType.
type PostApiV1PrimaryPrepareSettleJSONRequestBody = RequestSettleReq

// PostApiV1SwapPrepareTxJSONRequestBody defines body for PostApiV1SwapPrepareTx for application/json ContentType.
type PostApiV1SwapPrepareTxJSONRequestBody = RequestSwapPrepareReq

// PostApiV2BalanceGetJSONRequestBody defines body for PostApiV2BalanceGet for application/json ContentType.
type PostApiV2BalanceGetJSONRequestBody = RequestBalanceQueryReq

// PostApiV2DeployPrepareJSONRequestBody defines body for PostApiV2DeployPrepare for application/json ContentType.
type PostApiV2DeployPrepareJSONRequestBody = RequestDeployPrepareReq

// PostApiV2DeploySubmitJSONRequestBody defines body for PostApiV2DeploySubmit for application/json ContentType.
type PostApiV2DeploySubmitJSONRequestBody = RequestDeploySubmitReq

// GetApiV2PrimaryVaultFundingOverviewJSONRequestBody defines body for GetApiV2PrimaryVaultFundingOverview for application/json ContentType.
type GetApiV2PrimaryVaultFundingOverviewJSONRequestBody = RequestFundingOverviewReq

// PostApiV2PrimaryVaultPrepareCreateJSONRequestBody defines body for PostApiV2PrimaryVaultPrepareCreate for application/json ContentType.
type PostApiV2PrimaryVaultPrepareCreateJSONRequestBody = RequestVaultCreateReq

// PostApiV2PrimaryVaultPrepareClaimRewardJSONRequestBody defines body for PostApiV2PrimaryVaultPrepareClaimReward for application/json ContentType.
type PostApiV2PrimaryVaultPrepareClaimRewardJSONRequestBody = RequestVaultClaimRewardReq

// PostApiV2PrimaryVaultPrepareDepositJSONRequestBody defines body for PostApiV2PrimaryVaultPrepareDeposit for application/json ContentType.
type PostApiV2PrimaryVaultPrepareDepositJSONRequestBody = RequestVaultDepositReq

// PostApiV2PrimaryVaultPrepareDistributeDividendJSONRequestBody defines body for PostApiV2PrimaryVaultPrepareDistributeDividend for application/json ContentType.
type PostApiV2PrimaryVaultPrepareDistributeDividendJSONRequestBody = RequestVaultDistributeDividendReq

// PostApiV2PrimaryVaultPrepareRedeemJSONRequestBody defines body for PostApiV2PrimaryVaultPrepareRedeem for application/json ContentType.
type PostApiV2PrimaryVaultPrepareRedeemJSONRequestBody = RequestVaultRedeemReq

// PostApiV2PrimaryVaultPrepareWithdrawJSONRequestBody defines body for PostApiV2PrimaryVaultPrepareWithdraw for application/json ContentType.
type PostApiV2PrimaryVaultPrepareWithdrawJSONRequestBody = RequestVaultWithdrawReq

// PostApiV2TokenTxsProcessJSONRequestBody defines body for PostApiV2TokenTxsProcess for application/json ContentType.
type PostApiV2TokenTxsProcessJSONRequestBody = RequestProcessTxReq

// PostApiV2TokenTxsSyncJSONRequestBody defines body for PostApiV2TokenTxsSync for application/json ContentType.
type PostApiV2TokenTxsSyncJSONRequestBody = RequestSyncTxTaskReq

// PostApiV2TransferPrepareJSONRequestBody defines body for PostApiV2TransferPrepare for application/json ContentType.
type PostApiV2TransferPrepareJSONRequestBody = RequestTransferPrepareReq

// PostApiV2TransferSubmitJSONRequestBody defines body for PostApiV2TransferSubmit for application/json ContentType.
type PostApiV2TransferSubmitJSONRequestBody = RequestTransferSubmitReq

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetApiV1CommonBalance request
	GetApiV1CommonBalance(ctx context.Context, params *GetApiV1CommonBalanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1CommonSubmitTxWithBody request with any body
	PostApiV1CommonSubmitTxWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1CommonSubmitTx(ctx context.Context, body PostApiV1CommonSubmitTxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1CommonTxResult request
	GetApiV1CommonTxResult(ctx context.Context, params *GetApiV1CommonTxResultParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1PrimaryCreatePoolWithBody request with any body
	PostApiV1PrimaryCreatePoolWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1PrimaryCreatePool(ctx context.Context, body PostApiV1PrimaryCreatePoolJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1PrimaryPrepareBorrowerWithdrawWithBody request with any body
	PostApiV1PrimaryPrepareBorrowerWithdrawWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1PrimaryPrepareBorrowerWithdraw(ctx context.Context, body PostApiV1PrimaryPrepareBorrowerWithdrawJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1PrimaryPrepareDepositWithBody request with any body
	PostApiV1PrimaryPrepareDepositWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1PrimaryPrepareDeposit(ctx context.Context, body PostApiV1PrimaryPrepareDepositJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1PrimaryPrepareLaunchWithBody request with any body
	PostApiV1PrimaryPrepareLaunchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1PrimaryPrepareLaunch(ctx context.Context, body PostApiV1PrimaryPrepareLaunchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1PrimaryPrepareLiquidateWithBody request with any body
	PostApiV1PrimaryPrepareLiquidateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1PrimaryPrepareLiquidate(ctx context.Context, body PostApiV1PrimaryPrepareLiquidateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1PrimaryPrepareRedeemWithBody request with any body
	PostApiV1PrimaryPrepareRedeemWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1PrimaryPrepareRedeem(ctx context.Context, body PostApiV1PrimaryPrepareRedeemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1PrimaryPrepareSettleWithBody request with any body
	PostApiV1PrimaryPrepareSettleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1PrimaryPrepareSettle(ctx context.Context, body PostApiV1PrimaryPrepareSettleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1SwapPrepareTxWithBody request with any body
	PostApiV1SwapPrepareTxWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1SwapPrepareTx(ctx context.Context, body PostApiV1SwapPrepareTxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1SwapPrice request
	GetApiV1SwapPrice(ctx context.Context, params *GetApiV1SwapPriceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV2BalanceGetWithBody request with any body
	PostApiV2BalanceGetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV2BalanceGet(ctx context.Context, body PostApiV2BalanceGetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV2DeployPrepareWithBody request with any body
	PostApiV2DeployPrepareWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV2DeployPrepare(ctx context.Context, body PostApiV2DeployPrepareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV2DeploySubmitWithBody request with any body
	PostApiV2DeploySubmitWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV2DeploySubmit(ctx context.Context, body PostApiV2DeploySubmitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2PrimaryDividendGet request
	GetApiV2PrimaryDividendGet(ctx context.Context, params *GetApiV2PrimaryDividendGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2PrimaryVaultFundingOverviewWithBody request with any body
	GetApiV2PrimaryVaultFundingOverviewWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetApiV2PrimaryVaultFundingOverview(ctx context.Context, body GetApiV2PrimaryVaultFundingOverviewJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV2PrimaryVaultPrepareCreateWithBody request with any body
	PostApiV2PrimaryVaultPrepareCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV2PrimaryVaultPrepareCreate(ctx context.Context, body PostApiV2PrimaryVaultPrepareCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV2PrimaryVaultPrepareClaimRewardWithBody request with any body
	PostApiV2PrimaryVaultPrepareClaimRewardWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV2PrimaryVaultPrepareClaimReward(ctx context.Context, body PostApiV2PrimaryVaultPrepareClaimRewardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV2PrimaryVaultPrepareDepositWithBody request with any body
	PostApiV2PrimaryVaultPrepareDepositWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV2PrimaryVaultPrepareDeposit(ctx context.Context, body PostApiV2PrimaryVaultPrepareDepositJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV2PrimaryVaultPrepareDistributeDividendWithBody request with any body
	PostApiV2PrimaryVaultPrepareDistributeDividendWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV2PrimaryVaultPrepareDistributeDividend(ctx context.Context, body PostApiV2PrimaryVaultPrepareDistributeDividendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV2PrimaryVaultPrepareRedeemWithBody request with any body
	PostApiV2PrimaryVaultPrepareRedeemWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV2PrimaryVaultPrepareRedeem(ctx context.Context, body PostApiV2PrimaryVaultPrepareRedeemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV2PrimaryVaultPrepareWithdrawWithBody request with any body
	PostApiV2PrimaryVaultPrepareWithdrawWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV2PrimaryVaultPrepareWithdraw(ctx context.Context, body PostApiV2PrimaryVaultPrepareWithdrawJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2TokenTxsHolderInfo request
	GetApiV2TokenTxsHolderInfo(ctx context.Context, params *GetApiV2TokenTxsHolderInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV2TokenTxsProcessWithBody request with any body
	PostApiV2TokenTxsProcessWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV2TokenTxsProcess(ctx context.Context, body PostApiV2TokenTxsProcessJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV2TokenTxsSyncWithBody request with any body
	PostApiV2TokenTxsSyncWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV2TokenTxsSync(ctx context.Context, body PostApiV2TokenTxsSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2TokenTxsTaskInfo request
	GetApiV2TokenTxsTaskInfo(ctx context.Context, params *GetApiV2TokenTxsTaskInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV2TransferPrepareWithBody request with any body
	PostApiV2TransferPrepareWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV2TransferPrepare(ctx context.Context, body PostApiV2TransferPrepareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV2TransferSubmitWithBody request with any body
	PostApiV2TransferSubmitWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV2TransferSubmit(ctx context.Context, body PostApiV2TransferSubmitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetApiV1CommonBalance(ctx context.Context, params *GetApiV1CommonBalanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1CommonBalanceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1CommonSubmitTxWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1CommonSubmitTxRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1CommonSubmitTx(ctx context.Context, body PostApiV1CommonSubmitTxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1CommonSubmitTxRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1CommonTxResult(ctx context.Context, params *GetApiV1CommonTxResultParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1CommonTxResultRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PrimaryCreatePoolWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PrimaryCreatePoolRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PrimaryCreatePool(ctx context.Context, body PostApiV1PrimaryCreatePoolJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PrimaryCreatePoolRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PrimaryPrepareBorrowerWithdrawWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PrimaryPrepareBorrowerWithdrawRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PrimaryPrepareBorrowerWithdraw(ctx context.Context, body PostApiV1PrimaryPrepareBorrowerWithdrawJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PrimaryPrepareBorrowerWithdrawRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PrimaryPrepareDepositWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PrimaryPrepareDepositRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PrimaryPrepareDeposit(ctx context.Context, body PostApiV1PrimaryPrepareDepositJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PrimaryPrepareDepositRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PrimaryPrepareLaunchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PrimaryPrepareLaunchRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PrimaryPrepareLaunch(ctx context.Context, body PostApiV1PrimaryPrepareLaunchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PrimaryPrepareLaunchRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PrimaryPrepareLiquidateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PrimaryPrepareLiquidateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PrimaryPrepareLiquidate(ctx context.Context, body PostApiV1PrimaryPrepareLiquidateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PrimaryPrepareLiquidateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PrimaryPrepareRedeemWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PrimaryPrepareRedeemRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PrimaryPrepareRedeem(ctx context.Context, body PostApiV1PrimaryPrepareRedeemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PrimaryPrepareRedeemRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PrimaryPrepareSettleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PrimaryPrepareSettleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PrimaryPrepareSettle(ctx context.Context, body PostApiV1PrimaryPrepareSettleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PrimaryPrepareSettleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1SwapPrepareTxWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1SwapPrepareTxRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1SwapPrepareTx(ctx context.Context, body PostApiV1SwapPrepareTxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1SwapPrepareTxRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1SwapPrice(ctx context.Context, params *GetApiV1SwapPriceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1SwapPriceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2BalanceGetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2BalanceGetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2BalanceGet(ctx context.Context, body PostApiV2BalanceGetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2BalanceGetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2DeployPrepareWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2DeployPrepareRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2DeployPrepare(ctx context.Context, body PostApiV2DeployPrepareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2DeployPrepareRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2DeploySubmitWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2DeploySubmitRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2DeploySubmit(ctx context.Context, body PostApiV2DeploySubmitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2DeploySubmitRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2PrimaryDividendGet(ctx context.Context, params *GetApiV2PrimaryDividendGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2PrimaryDividendGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2PrimaryVaultFundingOverviewWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2PrimaryVaultFundingOverviewRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2PrimaryVaultFundingOverview(ctx context.Context, body GetApiV2PrimaryVaultFundingOverviewJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2PrimaryVaultFundingOverviewRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2PrimaryVaultPrepareCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2PrimaryVaultPrepareCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2PrimaryVaultPrepareCreate(ctx context.Context, body PostApiV2PrimaryVaultPrepareCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2PrimaryVaultPrepareCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2PrimaryVaultPrepareClaimRewardWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2PrimaryVaultPrepareClaimRewardRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2PrimaryVaultPrepareClaimReward(ctx context.Context, body PostApiV2PrimaryVaultPrepareClaimRewardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2PrimaryVaultPrepareClaimRewardRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2PrimaryVaultPrepareDepositWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2PrimaryVaultPrepareDepositRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2PrimaryVaultPrepareDeposit(ctx context.Context, body PostApiV2PrimaryVaultPrepareDepositJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2PrimaryVaultPrepareDepositRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2PrimaryVaultPrepareDistributeDividendWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2PrimaryVaultPrepareDistributeDividendRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2PrimaryVaultPrepareDistributeDividend(ctx context.Context, body PostApiV2PrimaryVaultPrepareDistributeDividendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2PrimaryVaultPrepareDistributeDividendRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2PrimaryVaultPrepareRedeemWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2PrimaryVaultPrepareRedeemRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2PrimaryVaultPrepareRedeem(ctx context.Context, body PostApiV2PrimaryVaultPrepareRedeemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2PrimaryVaultPrepareRedeemRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2PrimaryVaultPrepareWithdrawWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2PrimaryVaultPrepareWithdrawRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2PrimaryVaultPrepareWithdraw(ctx context.Context, body PostApiV2PrimaryVaultPrepareWithdrawJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2PrimaryVaultPrepareWithdrawRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2TokenTxsHolderInfo(ctx context.Context, params *GetApiV2TokenTxsHolderInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2TokenTxsHolderInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2TokenTxsProcessWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2TokenTxsProcessRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2TokenTxsProcess(ctx context.Context, body PostApiV2TokenTxsProcessJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2TokenTxsProcessRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2TokenTxsSyncWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2TokenTxsSyncRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2TokenTxsSync(ctx context.Context, body PostApiV2TokenTxsSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2TokenTxsSyncRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2TokenTxsTaskInfo(ctx context.Context, params *GetApiV2TokenTxsTaskInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2TokenTxsTaskInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2TransferPrepareWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2TransferPrepareRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2TransferPrepare(ctx context.Context, body PostApiV2TransferPrepareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2TransferPrepareRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2TransferSubmitWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2TransferSubmitRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2TransferSubmit(ctx context.Context, body PostApiV2TransferSubmitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2TransferSubmitRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetApiV1CommonBalanceRequest generates requests for GetApiV1CommonBalance
func NewGetApiV1CommonBalanceRequest(server string, params *GetApiV1CommonBalanceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/common/balance")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "chain_id", runtime.ParamLocationQuery, params.ChainId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "owner", runtime.ParamLocationQuery, params.Owner); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TokenAddress != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token_address", runtime.ParamLocationQuery, *params.TokenAddress); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1CommonSubmitTxRequest calls the generic PostApiV1CommonSubmitTx builder with application/json body
func NewPostApiV1CommonSubmitTxRequest(server string, body PostApiV1CommonSubmitTxJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1CommonSubmitTxRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1CommonSubmitTxRequestWithBody generates requests for PostApiV1CommonSubmitTx with any type of body
func NewPostApiV1CommonSubmitTxRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/common/submit_tx")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1CommonTxResultRequest generates requests for GetApiV1CommonTxResult
func NewGetApiV1CommonTxResultRequest(server string, params *GetApiV1CommonTxResultParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/common/tx_result")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "chain_id", runtime.ParamLocationQuery, params.ChainId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tx_hash", runtime.ParamLocationQuery, params.TxHash); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1PrimaryCreatePoolRequest calls the generic PostApiV1PrimaryCreatePool builder with application/json body
func NewPostApiV1PrimaryCreatePoolRequest(server string, body PostApiV1PrimaryCreatePoolJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1PrimaryCreatePoolRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1PrimaryCreatePoolRequestWithBody generates requests for PostApiV1PrimaryCreatePool with any type of body
func NewPostApiV1PrimaryCreatePoolRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/primary/create_pool")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1PrimaryPrepareBorrowerWithdrawRequest calls the generic PostApiV1PrimaryPrepareBorrowerWithdraw builder with application/json body
func NewPostApiV1PrimaryPrepareBorrowerWithdrawRequest(server string, body PostApiV1PrimaryPrepareBorrowerWithdrawJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1PrimaryPrepareBorrowerWithdrawRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1PrimaryPrepareBorrowerWithdrawRequestWithBody generates requests for PostApiV1PrimaryPrepareBorrowerWithdraw with any type of body
func NewPostApiV1PrimaryPrepareBorrowerWithdrawRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/primary/prepare_borrower_withdraw")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1PrimaryPrepareDepositRequest calls the generic PostApiV1PrimaryPrepareDeposit builder with application/json body
func NewPostApiV1PrimaryPrepareDepositRequest(server string, body PostApiV1PrimaryPrepareDepositJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1PrimaryPrepareDepositRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1PrimaryPrepareDepositRequestWithBody generates requests for PostApiV1PrimaryPrepareDeposit with any type of body
func NewPostApiV1PrimaryPrepareDepositRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/primary/prepare_deposit")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1PrimaryPrepareLaunchRequest calls the generic PostApiV1PrimaryPrepareLaunch builder with application/json body
func NewPostApiV1PrimaryPrepareLaunchRequest(server string, body PostApiV1PrimaryPrepareLaunchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1PrimaryPrepareLaunchRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1PrimaryPrepareLaunchRequestWithBody generates requests for PostApiV1PrimaryPrepareLaunch with any type of body
func NewPostApiV1PrimaryPrepareLaunchRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/primary/prepare_launch")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1PrimaryPrepareLiquidateRequest calls the generic PostApiV1PrimaryPrepareLiquidate builder with application/json body
func NewPostApiV1PrimaryPrepareLiquidateRequest(server string, body PostApiV1PrimaryPrepareLiquidateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1PrimaryPrepareLiquidateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1PrimaryPrepareLiquidateRequestWithBody generates requests for PostApiV1PrimaryPrepareLiquidate with any type of body
func NewPostApiV1PrimaryPrepareLiquidateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/primary/prepare_liquidate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1PrimaryPrepareRedeemRequest calls the generic PostApiV1PrimaryPrepareRedeem builder with application/json body
func NewPostApiV1PrimaryPrepareRedeemRequest(server string, body PostApiV1PrimaryPrepareRedeemJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1PrimaryPrepareRedeemRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1PrimaryPrepareRedeemRequestWithBody generates requests for PostApiV1PrimaryPrepareRedeem with any type of body
func NewPostApiV1PrimaryPrepareRedeemRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/primary/prepare_redeem")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1PrimaryPrepareSettleRequest calls the generic PostApiV1PrimaryPrepareSettle builder with application/json body
func NewPostApiV1PrimaryPrepareSettleRequest(server string, body PostApiV1PrimaryPrepareSettleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1PrimaryPrepareSettleRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1PrimaryPrepareSettleRequestWithBody generates requests for PostApiV1PrimaryPrepareSettle with any type of body
func NewPostApiV1PrimaryPrepareSettleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/primary/prepare_settle")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1SwapPrepareTxRequest calls the generic PostApiV1SwapPrepareTx builder with application/json body
func NewPostApiV1SwapPrepareTxRequest(server string, body PostApiV1SwapPrepareTxJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1SwapPrepareTxRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1SwapPrepareTxRequestWithBody generates requests for PostApiV1SwapPrepareTx with any type of body
func NewPostApiV1SwapPrepareTxRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/swap/prepare_tx")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1SwapPriceRequest generates requests for GetApiV1SwapPrice
func NewGetApiV1SwapPriceRequest(server string, params *GetApiV1SwapPriceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/swap/price")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "amount", runtime.ParamLocationQuery, params.Amount); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "chain_id", runtime.ParamLocationQuery, params.ChainId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.InputMintDecimals != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "inputMintDecimals", runtime.ParamLocationQuery, *params.InputMintDecimals); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "input_mint", runtime.ParamLocationQuery, params.InputMint); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.OutputMintDecimals != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "outputMintDecimals", runtime.ParamLocationQuery, *params.OutputMintDecimals); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "output_mint", runtime.ParamLocationQuery, params.OutputMint); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "platform", runtime.ParamLocationQuery, params.Platform); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vault_address", runtime.ParamLocationQuery, params.VaultAddress); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV2BalanceGetRequest calls the generic PostApiV2BalanceGet builder with application/json body
func NewPostApiV2BalanceGetRequest(server string, body PostApiV2BalanceGetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV2BalanceGetRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV2BalanceGetRequestWithBody generates requests for PostApiV2BalanceGet with any type of body
func NewPostApiV2BalanceGetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/balance/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV2DeployPrepareRequest calls the generic PostApiV2DeployPrepare builder with application/json body
func NewPostApiV2DeployPrepareRequest(server string, body PostApiV2DeployPrepareJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV2DeployPrepareRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV2DeployPrepareRequestWithBody generates requests for PostApiV2DeployPrepare with any type of body
func NewPostApiV2DeployPrepareRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/deploy/prepare")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV2DeploySubmitRequest calls the generic PostApiV2DeploySubmit builder with application/json body
func NewPostApiV2DeploySubmitRequest(server string, body PostApiV2DeploySubmitJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV2DeploySubmitRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV2DeploySubmitRequestWithBody generates requests for PostApiV2DeploySubmit with any type of body
func NewPostApiV2DeploySubmitRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/deploy/submit")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV2PrimaryDividendGetRequest generates requests for GetApiV2PrimaryDividendGet
func NewGetApiV2PrimaryDividendGetRequest(server string, params *GetApiV2PrimaryDividendGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/primary/dividend/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "asset_addr", runtime.ParamLocationQuery, params.AssetAddr); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "chain_id", runtime.ParamLocationQuery, params.ChainId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_addr", runtime.ParamLocationQuery, params.UserAddr); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vault", runtime.ParamLocationQuery, params.Vault); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2PrimaryVaultFundingOverviewRequest calls the generic GetApiV2PrimaryVaultFundingOverview builder with application/json body
func NewGetApiV2PrimaryVaultFundingOverviewRequest(server string, body GetApiV2PrimaryVaultFundingOverviewJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetApiV2PrimaryVaultFundingOverviewRequestWithBody(server, "application/json", bodyReader)
}

// NewGetApiV2PrimaryVaultFundingOverviewRequestWithBody generates requests for GetApiV2PrimaryVaultFundingOverview with any type of body
func NewGetApiV2PrimaryVaultFundingOverviewRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/primary/vault/funding_overview")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV2PrimaryVaultPrepareCreateRequest calls the generic PostApiV2PrimaryVaultPrepareCreate builder with application/json body
func NewPostApiV2PrimaryVaultPrepareCreateRequest(server string, body PostApiV2PrimaryVaultPrepareCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV2PrimaryVaultPrepareCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV2PrimaryVaultPrepareCreateRequestWithBody generates requests for PostApiV2PrimaryVaultPrepareCreate with any type of body
func NewPostApiV2PrimaryVaultPrepareCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/primary/vault/prepare-create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV2PrimaryVaultPrepareClaimRewardRequest calls the generic PostApiV2PrimaryVaultPrepareClaimReward builder with application/json body
func NewPostApiV2PrimaryVaultPrepareClaimRewardRequest(server string, body PostApiV2PrimaryVaultPrepareClaimRewardJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV2PrimaryVaultPrepareClaimRewardRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV2PrimaryVaultPrepareClaimRewardRequestWithBody generates requests for PostApiV2PrimaryVaultPrepareClaimReward with any type of body
func NewPostApiV2PrimaryVaultPrepareClaimRewardRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/primary/vault/prepare_claim_reward")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV2PrimaryVaultPrepareDepositRequest calls the generic PostApiV2PrimaryVaultPrepareDeposit builder with application/json body
func NewPostApiV2PrimaryVaultPrepareDepositRequest(server string, body PostApiV2PrimaryVaultPrepareDepositJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV2PrimaryVaultPrepareDepositRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV2PrimaryVaultPrepareDepositRequestWithBody generates requests for PostApiV2PrimaryVaultPrepareDeposit with any type of body
func NewPostApiV2PrimaryVaultPrepareDepositRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/primary/vault/prepare_deposit")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV2PrimaryVaultPrepareDistributeDividendRequest calls the generic PostApiV2PrimaryVaultPrepareDistributeDividend builder with application/json body
func NewPostApiV2PrimaryVaultPrepareDistributeDividendRequest(server string, body PostApiV2PrimaryVaultPrepareDistributeDividendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV2PrimaryVaultPrepareDistributeDividendRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV2PrimaryVaultPrepareDistributeDividendRequestWithBody generates requests for PostApiV2PrimaryVaultPrepareDistributeDividend with any type of body
func NewPostApiV2PrimaryVaultPrepareDistributeDividendRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/primary/vault/prepare_distribute_dividend")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV2PrimaryVaultPrepareRedeemRequest calls the generic PostApiV2PrimaryVaultPrepareRedeem builder with application/json body
func NewPostApiV2PrimaryVaultPrepareRedeemRequest(server string, body PostApiV2PrimaryVaultPrepareRedeemJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV2PrimaryVaultPrepareRedeemRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV2PrimaryVaultPrepareRedeemRequestWithBody generates requests for PostApiV2PrimaryVaultPrepareRedeem with any type of body
func NewPostApiV2PrimaryVaultPrepareRedeemRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/primary/vault/prepare_redeem")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV2PrimaryVaultPrepareWithdrawRequest calls the generic PostApiV2PrimaryVaultPrepareWithdraw builder with application/json body
func NewPostApiV2PrimaryVaultPrepareWithdrawRequest(server string, body PostApiV2PrimaryVaultPrepareWithdrawJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV2PrimaryVaultPrepareWithdrawRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV2PrimaryVaultPrepareWithdrawRequestWithBody generates requests for PostApiV2PrimaryVaultPrepareWithdraw with any type of body
func NewPostApiV2PrimaryVaultPrepareWithdrawRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/primary/vault/prepare_withdraw")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV2TokenTxsHolderInfoRequest generates requests for GetApiV2TokenTxsHolderInfo
func NewGetApiV2TokenTxsHolderInfoRequest(server string, params *GetApiV2TokenTxsHolderInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/token_txs/holder_info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mint", runtime.ParamLocationQuery, params.Mint); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Sequence != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sequence", runtime.ParamLocationQuery, *params.Sequence); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsingApi != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "using_api", runtime.ParamLocationQuery, *params.UsingApi); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vault", runtime.ParamLocationQuery, params.Vault); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV2TokenTxsProcessRequest calls the generic PostApiV2TokenTxsProcess builder with application/json body
func NewPostApiV2TokenTxsProcessRequest(server string, body PostApiV2TokenTxsProcessJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV2TokenTxsProcessRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV2TokenTxsProcessRequestWithBody generates requests for PostApiV2TokenTxsProcess with any type of body
func NewPostApiV2TokenTxsProcessRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/token_txs/process")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV2TokenTxsSyncRequest calls the generic PostApiV2TokenTxsSync builder with application/json body
func NewPostApiV2TokenTxsSyncRequest(server string, body PostApiV2TokenTxsSyncJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV2TokenTxsSyncRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV2TokenTxsSyncRequestWithBody generates requests for PostApiV2TokenTxsSync with any type of body
func NewPostApiV2TokenTxsSyncRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/token_txs/sync")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV2TokenTxsTaskInfoRequest generates requests for GetApiV2TokenTxsTaskInfo
func NewGetApiV2TokenTxsTaskInfoRequest(server string, params *GetApiV2TokenTxsTaskInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/token_txs/task_info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TaskId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "task_id", runtime.ParamLocationQuery, *params.TaskId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Vault != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vault", runtime.ParamLocationQuery, *params.Vault); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV2TransferPrepareRequest calls the generic PostApiV2TransferPrepare builder with application/json body
func NewPostApiV2TransferPrepareRequest(server string, body PostApiV2TransferPrepareJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV2TransferPrepareRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV2TransferPrepareRequestWithBody generates requests for PostApiV2TransferPrepare with any type of body
func NewPostApiV2TransferPrepareRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/transfer/prepare")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV2TransferSubmitRequest calls the generic PostApiV2TransferSubmit builder with application/json body
func NewPostApiV2TransferSubmitRequest(server string, body PostApiV2TransferSubmitJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV2TransferSubmitRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV2TransferSubmitRequestWithBody generates requests for PostApiV2TransferSubmit with any type of body
func NewPostApiV2TransferSubmitRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/transfer/submit")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetApiV1CommonBalanceWithResponse request
	GetApiV1CommonBalanceWithResponse(ctx context.Context, params *GetApiV1CommonBalanceParams, reqEditors ...RequestEditorFn) (*GetApiV1CommonBalanceResponse, error)

	// PostApiV1CommonSubmitTxWithBodyWithResponse request with any body
	PostApiV1CommonSubmitTxWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1CommonSubmitTxResponse, error)

	PostApiV1CommonSubmitTxWithResponse(ctx context.Context, body PostApiV1CommonSubmitTxJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1CommonSubmitTxResponse, error)

	// GetApiV1CommonTxResultWithResponse request
	GetApiV1CommonTxResultWithResponse(ctx context.Context, params *GetApiV1CommonTxResultParams, reqEditors ...RequestEditorFn) (*GetApiV1CommonTxResultResponse, error)

	// PostApiV1PrimaryCreatePoolWithBodyWithResponse request with any body
	PostApiV1PrimaryCreatePoolWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryCreatePoolResponse, error)

	PostApiV1PrimaryCreatePoolWithResponse(ctx context.Context, body PostApiV1PrimaryCreatePoolJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryCreatePoolResponse, error)

	// PostApiV1PrimaryPrepareBorrowerWithdrawWithBodyWithResponse request with any body
	PostApiV1PrimaryPrepareBorrowerWithdrawWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareBorrowerWithdrawResponse, error)

	PostApiV1PrimaryPrepareBorrowerWithdrawWithResponse(ctx context.Context, body PostApiV1PrimaryPrepareBorrowerWithdrawJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareBorrowerWithdrawResponse, error)

	// PostApiV1PrimaryPrepareDepositWithBodyWithResponse request with any body
	PostApiV1PrimaryPrepareDepositWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareDepositResponse, error)

	PostApiV1PrimaryPrepareDepositWithResponse(ctx context.Context, body PostApiV1PrimaryPrepareDepositJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareDepositResponse, error)

	// PostApiV1PrimaryPrepareLaunchWithBodyWithResponse request with any body
	PostApiV1PrimaryPrepareLaunchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareLaunchResponse, error)

	PostApiV1PrimaryPrepareLaunchWithResponse(ctx context.Context, body PostApiV1PrimaryPrepareLaunchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareLaunchResponse, error)

	// PostApiV1PrimaryPrepareLiquidateWithBodyWithResponse request with any body
	PostApiV1PrimaryPrepareLiquidateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareLiquidateResponse, error)

	PostApiV1PrimaryPrepareLiquidateWithResponse(ctx context.Context, body PostApiV1PrimaryPrepareLiquidateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareLiquidateResponse, error)

	// PostApiV1PrimaryPrepareRedeemWithBodyWithResponse request with any body
	PostApiV1PrimaryPrepareRedeemWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareRedeemResponse, error)

	PostApiV1PrimaryPrepareRedeemWithResponse(ctx context.Context, body PostApiV1PrimaryPrepareRedeemJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareRedeemResponse, error)

	// PostApiV1PrimaryPrepareSettleWithBodyWithResponse request with any body
	PostApiV1PrimaryPrepareSettleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareSettleResponse, error)

	PostApiV1PrimaryPrepareSettleWithResponse(ctx context.Context, body PostApiV1PrimaryPrepareSettleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareSettleResponse, error)

	// PostApiV1SwapPrepareTxWithBodyWithResponse request with any body
	PostApiV1SwapPrepareTxWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1SwapPrepareTxResponse, error)

	PostApiV1SwapPrepareTxWithResponse(ctx context.Context, body PostApiV1SwapPrepareTxJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1SwapPrepareTxResponse, error)

	// GetApiV1SwapPriceWithResponse request
	GetApiV1SwapPriceWithResponse(ctx context.Context, params *GetApiV1SwapPriceParams, reqEditors ...RequestEditorFn) (*GetApiV1SwapPriceResponse, error)

	// PostApiV2BalanceGetWithBodyWithResponse request with any body
	PostApiV2BalanceGetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2BalanceGetResponse, error)

	PostApiV2BalanceGetWithResponse(ctx context.Context, body PostApiV2BalanceGetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2BalanceGetResponse, error)

	// PostApiV2DeployPrepareWithBodyWithResponse request with any body
	PostApiV2DeployPrepareWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2DeployPrepareResponse, error)

	PostApiV2DeployPrepareWithResponse(ctx context.Context, body PostApiV2DeployPrepareJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2DeployPrepareResponse, error)

	// PostApiV2DeploySubmitWithBodyWithResponse request with any body
	PostApiV2DeploySubmitWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2DeploySubmitResponse, error)

	PostApiV2DeploySubmitWithResponse(ctx context.Context, body PostApiV2DeploySubmitJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2DeploySubmitResponse, error)

	// GetApiV2PrimaryDividendGetWithResponse request
	GetApiV2PrimaryDividendGetWithResponse(ctx context.Context, params *GetApiV2PrimaryDividendGetParams, reqEditors ...RequestEditorFn) (*GetApiV2PrimaryDividendGetResponse, error)

	// GetApiV2PrimaryVaultFundingOverviewWithBodyWithResponse request with any body
	GetApiV2PrimaryVaultFundingOverviewWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetApiV2PrimaryVaultFundingOverviewResponse, error)

	GetApiV2PrimaryVaultFundingOverviewWithResponse(ctx context.Context, body GetApiV2PrimaryVaultFundingOverviewJSONRequestBody, reqEditors ...RequestEditorFn) (*GetApiV2PrimaryVaultFundingOverviewResponse, error)

	// PostApiV2PrimaryVaultPrepareCreateWithBodyWithResponse request with any body
	PostApiV2PrimaryVaultPrepareCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2PrimaryVaultPrepareCreateResponse, error)

	PostApiV2PrimaryVaultPrepareCreateWithResponse(ctx context.Context, body PostApiV2PrimaryVaultPrepareCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2PrimaryVaultPrepareCreateResponse, error)

	// PostApiV2PrimaryVaultPrepareClaimRewardWithBodyWithResponse request with any body
	PostApiV2PrimaryVaultPrepareClaimRewardWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2PrimaryVaultPrepareClaimRewardResponse, error)

	PostApiV2PrimaryVaultPrepareClaimRewardWithResponse(ctx context.Context, body PostApiV2PrimaryVaultPrepareClaimRewardJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2PrimaryVaultPrepareClaimRewardResponse, error)

	// PostApiV2PrimaryVaultPrepareDepositWithBodyWithResponse request with any body
	PostApiV2PrimaryVaultPrepareDepositWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2PrimaryVaultPrepareDepositResponse, error)

	PostApiV2PrimaryVaultPrepareDepositWithResponse(ctx context.Context, body PostApiV2PrimaryVaultPrepareDepositJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2PrimaryVaultPrepareDepositResponse, error)

	// PostApiV2PrimaryVaultPrepareDistributeDividendWithBodyWithResponse request with any body
	PostApiV2PrimaryVaultPrepareDistributeDividendWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2PrimaryVaultPrepareDistributeDividendResponse, error)

	PostApiV2PrimaryVaultPrepareDistributeDividendWithResponse(ctx context.Context, body PostApiV2PrimaryVaultPrepareDistributeDividendJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2PrimaryVaultPrepareDistributeDividendResponse, error)

	// PostApiV2PrimaryVaultPrepareRedeemWithBodyWithResponse request with any body
	PostApiV2PrimaryVaultPrepareRedeemWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2PrimaryVaultPrepareRedeemResponse, error)

	PostApiV2PrimaryVaultPrepareRedeemWithResponse(ctx context.Context, body PostApiV2PrimaryVaultPrepareRedeemJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2PrimaryVaultPrepareRedeemResponse, error)

	// PostApiV2PrimaryVaultPrepareWithdrawWithBodyWithResponse request with any body
	PostApiV2PrimaryVaultPrepareWithdrawWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2PrimaryVaultPrepareWithdrawResponse, error)

	PostApiV2PrimaryVaultPrepareWithdrawWithResponse(ctx context.Context, body PostApiV2PrimaryVaultPrepareWithdrawJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2PrimaryVaultPrepareWithdrawResponse, error)

	// GetApiV2TokenTxsHolderInfoWithResponse request
	GetApiV2TokenTxsHolderInfoWithResponse(ctx context.Context, params *GetApiV2TokenTxsHolderInfoParams, reqEditors ...RequestEditorFn) (*GetApiV2TokenTxsHolderInfoResponse, error)

	// PostApiV2TokenTxsProcessWithBodyWithResponse request with any body
	PostApiV2TokenTxsProcessWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2TokenTxsProcessResponse, error)

	PostApiV2TokenTxsProcessWithResponse(ctx context.Context, body PostApiV2TokenTxsProcessJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2TokenTxsProcessResponse, error)

	// PostApiV2TokenTxsSyncWithBodyWithResponse request with any body
	PostApiV2TokenTxsSyncWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2TokenTxsSyncResponse, error)

	PostApiV2TokenTxsSyncWithResponse(ctx context.Context, body PostApiV2TokenTxsSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2TokenTxsSyncResponse, error)

	// GetApiV2TokenTxsTaskInfoWithResponse request
	GetApiV2TokenTxsTaskInfoWithResponse(ctx context.Context, params *GetApiV2TokenTxsTaskInfoParams, reqEditors ...RequestEditorFn) (*GetApiV2TokenTxsTaskInfoResponse, error)

	// PostApiV2TransferPrepareWithBodyWithResponse request with any body
	PostApiV2TransferPrepareWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2TransferPrepareResponse, error)

	PostApiV2TransferPrepareWithResponse(ctx context.Context, body PostApiV2TransferPrepareJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2TransferPrepareResponse, error)

	// PostApiV2TransferSubmitWithBodyWithResponse request with any body
	PostApiV2TransferSubmitWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2TransferSubmitResponse, error)

	PostApiV2TransferSubmitWithResponse(ctx context.Context, body PostApiV2TransferSubmitJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2TransferSubmitResponse, error)
}

type GetApiV1CommonBalanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                 `json:"code,omitempty"`
		Data *ResponseBalanceResp `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1CommonBalanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1CommonBalanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1CommonSubmitTxResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                `json:"code,omitempty"`
		Data *ResponseSubmitResp `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1CommonSubmitTxResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1CommonSubmitTxResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1CommonTxResultResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                  `json:"code,omitempty"`
		Data *ResponseTxResultResp `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1CommonTxResultResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1CommonTxResultResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1PrimaryCreatePoolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                                `json:"code,omitempty"`
		Data *ResponseCreatePoolAndLiquidityResp `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1PrimaryCreatePoolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1PrimaryCreatePoolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1PrimaryPrepareBorrowerWithdrawResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                       `json:"code,omitempty"`
		Data *ResponseRedeemPrepareResp `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1PrimaryPrepareBorrowerWithdrawResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1PrimaryPrepareBorrowerWithdrawResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1PrimaryPrepareDepositResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                        `json:"code,omitempty"`
		Data *ResponseDepositPrepareResp `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1PrimaryPrepareDepositResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1PrimaryPrepareDepositResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1PrimaryPrepareLaunchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                       `json:"code,omitempty"`
		Data *ResponseLaunchPrepareResp `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1PrimaryPrepareLaunchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1PrimaryPrepareLaunchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1PrimaryPrepareLiquidateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                   `json:"code,omitempty"`
		Data *ResponseLiquidateResp `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1PrimaryPrepareLiquidateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1PrimaryPrepareLiquidateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1PrimaryPrepareRedeemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                        `json:"code,omitempty"`
		Data *ResponseReclaimPrepareResp `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1PrimaryPrepareRedeemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1PrimaryPrepareRedeemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1PrimaryPrepareSettleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                `json:"code,omitempty"`
		Data *ResponseSettleResp `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1PrimaryPrepareSettleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1PrimaryPrepareSettleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1SwapPrepareTxResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                     `json:"code,omitempty"`
		Data *ResponseSwapPrepareResp `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1SwapPrepareTxResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1SwapPrepareTxResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1SwapPriceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                   `json:"code,omitempty"`
		Data *ResponseSwapPriceResp `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1SwapPriceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1SwapPriceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV2BalanceGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                      `json:"code,omitempty"`
		Data *ResponseBalanceQueryResp `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV2BalanceGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV2BalanceGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV2DeployPrepareResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                       `json:"code,omitempty"`
		Data *ResponseDeployPrepareResp `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV2DeployPrepareResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV2DeployPrepareResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV2DeploySubmitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                      `json:"code,omitempty"`
		Data *ResponseDeploySubmitResp `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV2DeploySubmitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV2DeploySubmitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2PrimaryDividendGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                      `json:"code,omitempty"`
		Data *ResponseUserDividendResp `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV2PrimaryDividendGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2PrimaryDividendGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2PrimaryVaultFundingOverviewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                     `json:"code,omitempty"`
		Data *EntityFundingOverviewTx `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV2PrimaryVaultFundingOverviewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2PrimaryVaultFundingOverviewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV2PrimaryVaultPrepareCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                        `json:"code,omitempty"`
		Data *EntityTokenLaunchPrepareTx `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV2PrimaryVaultPrepareCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV2PrimaryVaultPrepareCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV2PrimaryVaultPrepareClaimRewardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                      `json:"code,omitempty"`
		Data *EntityVaultClaimRewardTx `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV2PrimaryVaultPrepareClaimRewardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV2PrimaryVaultPrepareClaimRewardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV2PrimaryVaultPrepareDepositResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                    `json:"code,omitempty"`
		Data *EntityDepositPrepareTx `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV2PrimaryVaultPrepareDepositResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV2PrimaryVaultPrepareDepositResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV2PrimaryVaultPrepareDistributeDividendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                             `json:"code,omitempty"`
		Data *EntityVaultDistributeDividendTx `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV2PrimaryVaultPrepareDistributeDividendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV2PrimaryVaultPrepareDistributeDividendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV2PrimaryVaultPrepareRedeemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                 `json:"code,omitempty"`
		Data *EntityVaultRedeemTx `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV2PrimaryVaultPrepareRedeemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV2PrimaryVaultPrepareRedeemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV2PrimaryVaultPrepareWithdrawResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                     `json:"code,omitempty"`
		Data *EntityWithdrawPrepareTx `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV2PrimaryVaultPrepareWithdrawResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV2PrimaryVaultPrepareWithdrawResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2TokenTxsHolderInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                       `json:"code,omitempty"`
		Data *ResponseGetHolderInfoResp `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV2TokenTxsHolderInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2TokenTxsHolderInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV2TokenTxsProcessResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                   `json:"code,omitempty"`
		Data *ResponseProcessTxResp `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV2TokenTxsProcessResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV2TokenTxsProcessResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV2TokenTxsSyncResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                    `json:"code,omitempty"`
		Data *ResponseSyncTxTaskResp `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV2TokenTxsSyncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV2TokenTxsSyncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2TokenTxsTaskInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                  `json:"code,omitempty"`
		Data *ResponseTaskInfoResp `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV2TokenTxsTaskInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2TokenTxsTaskInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV2TransferPrepareResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                         `json:"code,omitempty"`
		Data *ResponseTransferPrepareResp `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV2TransferPrepareResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV2TransferPrepareResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV2TransferSubmitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                        `json:"code,omitempty"`
		Data *ResponseTransferSubmitResp `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV2TransferSubmitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV2TransferSubmitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetApiV1CommonBalanceWithResponse request returning *GetApiV1CommonBalanceResponse
func (c *ClientWithResponses) GetApiV1CommonBalanceWithResponse(ctx context.Context, params *GetApiV1CommonBalanceParams, reqEditors ...RequestEditorFn) (*GetApiV1CommonBalanceResponse, error) {
	rsp, err := c.GetApiV1CommonBalance(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1CommonBalanceResponse(rsp)
}

// PostApiV1CommonSubmitTxWithBodyWithResponse request with arbitrary body returning *PostApiV1CommonSubmitTxResponse
func (c *ClientWithResponses) PostApiV1CommonSubmitTxWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1CommonSubmitTxResponse, error) {
	rsp, err := c.PostApiV1CommonSubmitTxWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1CommonSubmitTxResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1CommonSubmitTxWithResponse(ctx context.Context, body PostApiV1CommonSubmitTxJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1CommonSubmitTxResponse, error) {
	rsp, err := c.PostApiV1CommonSubmitTx(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1CommonSubmitTxResponse(rsp)
}

// GetApiV1CommonTxResultWithResponse request returning *GetApiV1CommonTxResultResponse
func (c *ClientWithResponses) GetApiV1CommonTxResultWithResponse(ctx context.Context, params *GetApiV1CommonTxResultParams, reqEditors ...RequestEditorFn) (*GetApiV1CommonTxResultResponse, error) {
	rsp, err := c.GetApiV1CommonTxResult(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1CommonTxResultResponse(rsp)
}

// PostApiV1PrimaryCreatePoolWithBodyWithResponse request with arbitrary body returning *PostApiV1PrimaryCreatePoolResponse
func (c *ClientWithResponses) PostApiV1PrimaryCreatePoolWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryCreatePoolResponse, error) {
	rsp, err := c.PostApiV1PrimaryCreatePoolWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PrimaryCreatePoolResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1PrimaryCreatePoolWithResponse(ctx context.Context, body PostApiV1PrimaryCreatePoolJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryCreatePoolResponse, error) {
	rsp, err := c.PostApiV1PrimaryCreatePool(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PrimaryCreatePoolResponse(rsp)
}

// PostApiV1PrimaryPrepareBorrowerWithdrawWithBodyWithResponse request with arbitrary body returning *PostApiV1PrimaryPrepareBorrowerWithdrawResponse
func (c *ClientWithResponses) PostApiV1PrimaryPrepareBorrowerWithdrawWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareBorrowerWithdrawResponse, error) {
	rsp, err := c.PostApiV1PrimaryPrepareBorrowerWithdrawWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PrimaryPrepareBorrowerWithdrawResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1PrimaryPrepareBorrowerWithdrawWithResponse(ctx context.Context, body PostApiV1PrimaryPrepareBorrowerWithdrawJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareBorrowerWithdrawResponse, error) {
	rsp, err := c.PostApiV1PrimaryPrepareBorrowerWithdraw(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PrimaryPrepareBorrowerWithdrawResponse(rsp)
}

// PostApiV1PrimaryPrepareDepositWithBodyWithResponse request with arbitrary body returning *PostApiV1PrimaryPrepareDepositResponse
func (c *ClientWithResponses) PostApiV1PrimaryPrepareDepositWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareDepositResponse, error) {
	rsp, err := c.PostApiV1PrimaryPrepareDepositWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PrimaryPrepareDepositResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1PrimaryPrepareDepositWithResponse(ctx context.Context, body PostApiV1PrimaryPrepareDepositJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareDepositResponse, error) {
	rsp, err := c.PostApiV1PrimaryPrepareDeposit(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PrimaryPrepareDepositResponse(rsp)
}

// PostApiV1PrimaryPrepareLaunchWithBodyWithResponse request with arbitrary body returning *PostApiV1PrimaryPrepareLaunchResponse
func (c *ClientWithResponses) PostApiV1PrimaryPrepareLaunchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareLaunchResponse, error) {
	rsp, err := c.PostApiV1PrimaryPrepareLaunchWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PrimaryPrepareLaunchResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1PrimaryPrepareLaunchWithResponse(ctx context.Context, body PostApiV1PrimaryPrepareLaunchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareLaunchResponse, error) {
	rsp, err := c.PostApiV1PrimaryPrepareLaunch(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PrimaryPrepareLaunchResponse(rsp)
}

// PostApiV1PrimaryPrepareLiquidateWithBodyWithResponse request with arbitrary body returning *PostApiV1PrimaryPrepareLiquidateResponse
func (c *ClientWithResponses) PostApiV1PrimaryPrepareLiquidateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareLiquidateResponse, error) {
	rsp, err := c.PostApiV1PrimaryPrepareLiquidateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PrimaryPrepareLiquidateResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1PrimaryPrepareLiquidateWithResponse(ctx context.Context, body PostApiV1PrimaryPrepareLiquidateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareLiquidateResponse, error) {
	rsp, err := c.PostApiV1PrimaryPrepareLiquidate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PrimaryPrepareLiquidateResponse(rsp)
}

// PostApiV1PrimaryPrepareRedeemWithBodyWithResponse request with arbitrary body returning *PostApiV1PrimaryPrepareRedeemResponse
func (c *ClientWithResponses) PostApiV1PrimaryPrepareRedeemWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareRedeemResponse, error) {
	rsp, err := c.PostApiV1PrimaryPrepareRedeemWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PrimaryPrepareRedeemResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1PrimaryPrepareRedeemWithResponse(ctx context.Context, body PostApiV1PrimaryPrepareRedeemJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareRedeemResponse, error) {
	rsp, err := c.PostApiV1PrimaryPrepareRedeem(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PrimaryPrepareRedeemResponse(rsp)
}

// PostApiV1PrimaryPrepareSettleWithBodyWithResponse request with arbitrary body returning *PostApiV1PrimaryPrepareSettleResponse
func (c *ClientWithResponses) PostApiV1PrimaryPrepareSettleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareSettleResponse, error) {
	rsp, err := c.PostApiV1PrimaryPrepareSettleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PrimaryPrepareSettleResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1PrimaryPrepareSettleWithResponse(ctx context.Context, body PostApiV1PrimaryPrepareSettleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareSettleResponse, error) {
	rsp, err := c.PostApiV1PrimaryPrepareSettle(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PrimaryPrepareSettleResponse(rsp)
}

// PostApiV1SwapPrepareTxWithBodyWithResponse request with arbitrary body returning *PostApiV1SwapPrepareTxResponse
func (c *ClientWithResponses) PostApiV1SwapPrepareTxWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1SwapPrepareTxResponse, error) {
	rsp, err := c.PostApiV1SwapPrepareTxWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1SwapPrepareTxResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1SwapPrepareTxWithResponse(ctx context.Context, body PostApiV1SwapPrepareTxJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1SwapPrepareTxResponse, error) {
	rsp, err := c.PostApiV1SwapPrepareTx(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1SwapPrepareTxResponse(rsp)
}

// GetApiV1SwapPriceWithResponse request returning *GetApiV1SwapPriceResponse
func (c *ClientWithResponses) GetApiV1SwapPriceWithResponse(ctx context.Context, params *GetApiV1SwapPriceParams, reqEditors ...RequestEditorFn) (*GetApiV1SwapPriceResponse, error) {
	rsp, err := c.GetApiV1SwapPrice(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1SwapPriceResponse(rsp)
}

// PostApiV2BalanceGetWithBodyWithResponse request with arbitrary body returning *PostApiV2BalanceGetResponse
func (c *ClientWithResponses) PostApiV2BalanceGetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2BalanceGetResponse, error) {
	rsp, err := c.PostApiV2BalanceGetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2BalanceGetResponse(rsp)
}

func (c *ClientWithResponses) PostApiV2BalanceGetWithResponse(ctx context.Context, body PostApiV2BalanceGetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2BalanceGetResponse, error) {
	rsp, err := c.PostApiV2BalanceGet(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2BalanceGetResponse(rsp)
}

// PostApiV2DeployPrepareWithBodyWithResponse request with arbitrary body returning *PostApiV2DeployPrepareResponse
func (c *ClientWithResponses) PostApiV2DeployPrepareWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2DeployPrepareResponse, error) {
	rsp, err := c.PostApiV2DeployPrepareWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2DeployPrepareResponse(rsp)
}

func (c *ClientWithResponses) PostApiV2DeployPrepareWithResponse(ctx context.Context, body PostApiV2DeployPrepareJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2DeployPrepareResponse, error) {
	rsp, err := c.PostApiV2DeployPrepare(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2DeployPrepareResponse(rsp)
}

// PostApiV2DeploySubmitWithBodyWithResponse request with arbitrary body returning *PostApiV2DeploySubmitResponse
func (c *ClientWithResponses) PostApiV2DeploySubmitWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2DeploySubmitResponse, error) {
	rsp, err := c.PostApiV2DeploySubmitWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2DeploySubmitResponse(rsp)
}

func (c *ClientWithResponses) PostApiV2DeploySubmitWithResponse(ctx context.Context, body PostApiV2DeploySubmitJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2DeploySubmitResponse, error) {
	rsp, err := c.PostApiV2DeploySubmit(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2DeploySubmitResponse(rsp)
}

// GetApiV2PrimaryDividendGetWithResponse request returning *GetApiV2PrimaryDividendGetResponse
func (c *ClientWithResponses) GetApiV2PrimaryDividendGetWithResponse(ctx context.Context, params *GetApiV2PrimaryDividendGetParams, reqEditors ...RequestEditorFn) (*GetApiV2PrimaryDividendGetResponse, error) {
	rsp, err := c.GetApiV2PrimaryDividendGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2PrimaryDividendGetResponse(rsp)
}

// GetApiV2PrimaryVaultFundingOverviewWithBodyWithResponse request with arbitrary body returning *GetApiV2PrimaryVaultFundingOverviewResponse
func (c *ClientWithResponses) GetApiV2PrimaryVaultFundingOverviewWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetApiV2PrimaryVaultFundingOverviewResponse, error) {
	rsp, err := c.GetApiV2PrimaryVaultFundingOverviewWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2PrimaryVaultFundingOverviewResponse(rsp)
}

func (c *ClientWithResponses) GetApiV2PrimaryVaultFundingOverviewWithResponse(ctx context.Context, body GetApiV2PrimaryVaultFundingOverviewJSONRequestBody, reqEditors ...RequestEditorFn) (*GetApiV2PrimaryVaultFundingOverviewResponse, error) {
	rsp, err := c.GetApiV2PrimaryVaultFundingOverview(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2PrimaryVaultFundingOverviewResponse(rsp)
}

// PostApiV2PrimaryVaultPrepareCreateWithBodyWithResponse request with arbitrary body returning *PostApiV2PrimaryVaultPrepareCreateResponse
func (c *ClientWithResponses) PostApiV2PrimaryVaultPrepareCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2PrimaryVaultPrepareCreateResponse, error) {
	rsp, err := c.PostApiV2PrimaryVaultPrepareCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2PrimaryVaultPrepareCreateResponse(rsp)
}

func (c *ClientWithResponses) PostApiV2PrimaryVaultPrepareCreateWithResponse(ctx context.Context, body PostApiV2PrimaryVaultPrepareCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2PrimaryVaultPrepareCreateResponse, error) {
	rsp, err := c.PostApiV2PrimaryVaultPrepareCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2PrimaryVaultPrepareCreateResponse(rsp)
}

// PostApiV2PrimaryVaultPrepareClaimRewardWithBodyWithResponse request with arbitrary body returning *PostApiV2PrimaryVaultPrepareClaimRewardResponse
func (c *ClientWithResponses) PostApiV2PrimaryVaultPrepareClaimRewardWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2PrimaryVaultPrepareClaimRewardResponse, error) {
	rsp, err := c.PostApiV2PrimaryVaultPrepareClaimRewardWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2PrimaryVaultPrepareClaimRewardResponse(rsp)
}

func (c *ClientWithResponses) PostApiV2PrimaryVaultPrepareClaimRewardWithResponse(ctx context.Context, body PostApiV2PrimaryVaultPrepareClaimRewardJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2PrimaryVaultPrepareClaimRewardResponse, error) {
	rsp, err := c.PostApiV2PrimaryVaultPrepareClaimReward(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2PrimaryVaultPrepareClaimRewardResponse(rsp)
}

// PostApiV2PrimaryVaultPrepareDepositWithBodyWithResponse request with arbitrary body returning *PostApiV2PrimaryVaultPrepareDepositResponse
func (c *ClientWithResponses) PostApiV2PrimaryVaultPrepareDepositWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2PrimaryVaultPrepareDepositResponse, error) {
	rsp, err := c.PostApiV2PrimaryVaultPrepareDepositWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2PrimaryVaultPrepareDepositResponse(rsp)
}

func (c *ClientWithResponses) PostApiV2PrimaryVaultPrepareDepositWithResponse(ctx context.Context, body PostApiV2PrimaryVaultPrepareDepositJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2PrimaryVaultPrepareDepositResponse, error) {
	rsp, err := c.PostApiV2PrimaryVaultPrepareDeposit(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2PrimaryVaultPrepareDepositResponse(rsp)
}

// PostApiV2PrimaryVaultPrepareDistributeDividendWithBodyWithResponse request with arbitrary body returning *PostApiV2PrimaryVaultPrepareDistributeDividendResponse
func (c *ClientWithResponses) PostApiV2PrimaryVaultPrepareDistributeDividendWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2PrimaryVaultPrepareDistributeDividendResponse, error) {
	rsp, err := c.PostApiV2PrimaryVaultPrepareDistributeDividendWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2PrimaryVaultPrepareDistributeDividendResponse(rsp)
}

func (c *ClientWithResponses) PostApiV2PrimaryVaultPrepareDistributeDividendWithResponse(ctx context.Context, body PostApiV2PrimaryVaultPrepareDistributeDividendJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2PrimaryVaultPrepareDistributeDividendResponse, error) {
	rsp, err := c.PostApiV2PrimaryVaultPrepareDistributeDividend(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2PrimaryVaultPrepareDistributeDividendResponse(rsp)
}

// PostApiV2PrimaryVaultPrepareRedeemWithBodyWithResponse request with arbitrary body returning *PostApiV2PrimaryVaultPrepareRedeemResponse
func (c *ClientWithResponses) PostApiV2PrimaryVaultPrepareRedeemWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2PrimaryVaultPrepareRedeemResponse, error) {
	rsp, err := c.PostApiV2PrimaryVaultPrepareRedeemWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2PrimaryVaultPrepareRedeemResponse(rsp)
}

func (c *ClientWithResponses) PostApiV2PrimaryVaultPrepareRedeemWithResponse(ctx context.Context, body PostApiV2PrimaryVaultPrepareRedeemJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2PrimaryVaultPrepareRedeemResponse, error) {
	rsp, err := c.PostApiV2PrimaryVaultPrepareRedeem(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2PrimaryVaultPrepareRedeemResponse(rsp)
}

// PostApiV2PrimaryVaultPrepareWithdrawWithBodyWithResponse request with arbitrary body returning *PostApiV2PrimaryVaultPrepareWithdrawResponse
func (c *ClientWithResponses) PostApiV2PrimaryVaultPrepareWithdrawWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2PrimaryVaultPrepareWithdrawResponse, error) {
	rsp, err := c.PostApiV2PrimaryVaultPrepareWithdrawWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2PrimaryVaultPrepareWithdrawResponse(rsp)
}

func (c *ClientWithResponses) PostApiV2PrimaryVaultPrepareWithdrawWithResponse(ctx context.Context, body PostApiV2PrimaryVaultPrepareWithdrawJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2PrimaryVaultPrepareWithdrawResponse, error) {
	rsp, err := c.PostApiV2PrimaryVaultPrepareWithdraw(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2PrimaryVaultPrepareWithdrawResponse(rsp)
}

// GetApiV2TokenTxsHolderInfoWithResponse request returning *GetApiV2TokenTxsHolderInfoResponse
func (c *ClientWithResponses) GetApiV2TokenTxsHolderInfoWithResponse(ctx context.Context, params *GetApiV2TokenTxsHolderInfoParams, reqEditors ...RequestEditorFn) (*GetApiV2TokenTxsHolderInfoResponse, error) {
	rsp, err := c.GetApiV2TokenTxsHolderInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2TokenTxsHolderInfoResponse(rsp)
}

// PostApiV2TokenTxsProcessWithBodyWithResponse request with arbitrary body returning *PostApiV2TokenTxsProcessResponse
func (c *ClientWithResponses) PostApiV2TokenTxsProcessWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2TokenTxsProcessResponse, error) {
	rsp, err := c.PostApiV2TokenTxsProcessWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2TokenTxsProcessResponse(rsp)
}

func (c *ClientWithResponses) PostApiV2TokenTxsProcessWithResponse(ctx context.Context, body PostApiV2TokenTxsProcessJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2TokenTxsProcessResponse, error) {
	rsp, err := c.PostApiV2TokenTxsProcess(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2TokenTxsProcessResponse(rsp)
}

// PostApiV2TokenTxsSyncWithBodyWithResponse request with arbitrary body returning *PostApiV2TokenTxsSyncResponse
func (c *ClientWithResponses) PostApiV2TokenTxsSyncWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2TokenTxsSyncResponse, error) {
	rsp, err := c.PostApiV2TokenTxsSyncWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2TokenTxsSyncResponse(rsp)
}

func (c *ClientWithResponses) PostApiV2TokenTxsSyncWithResponse(ctx context.Context, body PostApiV2TokenTxsSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2TokenTxsSyncResponse, error) {
	rsp, err := c.PostApiV2TokenTxsSync(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2TokenTxsSyncResponse(rsp)
}

// GetApiV2TokenTxsTaskInfoWithResponse request returning *GetApiV2TokenTxsTaskInfoResponse
func (c *ClientWithResponses) GetApiV2TokenTxsTaskInfoWithResponse(ctx context.Context, params *GetApiV2TokenTxsTaskInfoParams, reqEditors ...RequestEditorFn) (*GetApiV2TokenTxsTaskInfoResponse, error) {
	rsp, err := c.GetApiV2TokenTxsTaskInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2TokenTxsTaskInfoResponse(rsp)
}

// PostApiV2TransferPrepareWithBodyWithResponse request with arbitrary body returning *PostApiV2TransferPrepareResponse
func (c *ClientWithResponses) PostApiV2TransferPrepareWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2TransferPrepareResponse, error) {
	rsp, err := c.PostApiV2TransferPrepareWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2TransferPrepareResponse(rsp)
}

func (c *ClientWithResponses) PostApiV2TransferPrepareWithResponse(ctx context.Context, body PostApiV2TransferPrepareJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2TransferPrepareResponse, error) {
	rsp, err := c.PostApiV2TransferPrepare(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2TransferPrepareResponse(rsp)
}

// PostApiV2TransferSubmitWithBodyWithResponse request with arbitrary body returning *PostApiV2TransferSubmitResponse
func (c *ClientWithResponses) PostApiV2TransferSubmitWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2TransferSubmitResponse, error) {
	rsp, err := c.PostApiV2TransferSubmitWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2TransferSubmitResponse(rsp)
}

func (c *ClientWithResponses) PostApiV2TransferSubmitWithResponse(ctx context.Context, body PostApiV2TransferSubmitJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2TransferSubmitResponse, error) {
	rsp, err := c.PostApiV2TransferSubmit(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2TransferSubmitResponse(rsp)
}

// ParseGetApiV1CommonBalanceResponse parses an HTTP response from a GetApiV1CommonBalanceWithResponse call
func ParseGetApiV1CommonBalanceResponse(rsp *http.Response) (*GetApiV1CommonBalanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1CommonBalanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                 `json:"code,omitempty"`
			Data *ResponseBalanceResp `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1CommonSubmitTxResponse parses an HTTP response from a PostApiV1CommonSubmitTxWithResponse call
func ParsePostApiV1CommonSubmitTxResponse(rsp *http.Response) (*PostApiV1CommonSubmitTxResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1CommonSubmitTxResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                `json:"code,omitempty"`
			Data *ResponseSubmitResp `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1CommonTxResultResponse parses an HTTP response from a GetApiV1CommonTxResultWithResponse call
func ParseGetApiV1CommonTxResultResponse(rsp *http.Response) (*GetApiV1CommonTxResultResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1CommonTxResultResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                  `json:"code,omitempty"`
			Data *ResponseTxResultResp `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1PrimaryCreatePoolResponse parses an HTTP response from a PostApiV1PrimaryCreatePoolWithResponse call
func ParsePostApiV1PrimaryCreatePoolResponse(rsp *http.Response) (*PostApiV1PrimaryCreatePoolResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1PrimaryCreatePoolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                                `json:"code,omitempty"`
			Data *ResponseCreatePoolAndLiquidityResp `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1PrimaryPrepareBorrowerWithdrawResponse parses an HTTP response from a PostApiV1PrimaryPrepareBorrowerWithdrawWithResponse call
func ParsePostApiV1PrimaryPrepareBorrowerWithdrawResponse(rsp *http.Response) (*PostApiV1PrimaryPrepareBorrowerWithdrawResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1PrimaryPrepareBorrowerWithdrawResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                       `json:"code,omitempty"`
			Data *ResponseRedeemPrepareResp `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1PrimaryPrepareDepositResponse parses an HTTP response from a PostApiV1PrimaryPrepareDepositWithResponse call
func ParsePostApiV1PrimaryPrepareDepositResponse(rsp *http.Response) (*PostApiV1PrimaryPrepareDepositResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1PrimaryPrepareDepositResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                        `json:"code,omitempty"`
			Data *ResponseDepositPrepareResp `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1PrimaryPrepareLaunchResponse parses an HTTP response from a PostApiV1PrimaryPrepareLaunchWithResponse call
func ParsePostApiV1PrimaryPrepareLaunchResponse(rsp *http.Response) (*PostApiV1PrimaryPrepareLaunchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1PrimaryPrepareLaunchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                       `json:"code,omitempty"`
			Data *ResponseLaunchPrepareResp `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1PrimaryPrepareLiquidateResponse parses an HTTP response from a PostApiV1PrimaryPrepareLiquidateWithResponse call
func ParsePostApiV1PrimaryPrepareLiquidateResponse(rsp *http.Response) (*PostApiV1PrimaryPrepareLiquidateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1PrimaryPrepareLiquidateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                   `json:"code,omitempty"`
			Data *ResponseLiquidateResp `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1PrimaryPrepareRedeemResponse parses an HTTP response from a PostApiV1PrimaryPrepareRedeemWithResponse call
func ParsePostApiV1PrimaryPrepareRedeemResponse(rsp *http.Response) (*PostApiV1PrimaryPrepareRedeemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1PrimaryPrepareRedeemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                        `json:"code,omitempty"`
			Data *ResponseReclaimPrepareResp `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1PrimaryPrepareSettleResponse parses an HTTP response from a PostApiV1PrimaryPrepareSettleWithResponse call
func ParsePostApiV1PrimaryPrepareSettleResponse(rsp *http.Response) (*PostApiV1PrimaryPrepareSettleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1PrimaryPrepareSettleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                `json:"code,omitempty"`
			Data *ResponseSettleResp `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1SwapPrepareTxResponse parses an HTTP response from a PostApiV1SwapPrepareTxWithResponse call
func ParsePostApiV1SwapPrepareTxResponse(rsp *http.Response) (*PostApiV1SwapPrepareTxResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1SwapPrepareTxResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                     `json:"code,omitempty"`
			Data *ResponseSwapPrepareResp `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1SwapPriceResponse parses an HTTP response from a GetApiV1SwapPriceWithResponse call
func ParseGetApiV1SwapPriceResponse(rsp *http.Response) (*GetApiV1SwapPriceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1SwapPriceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                   `json:"code,omitempty"`
			Data *ResponseSwapPriceResp `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV2BalanceGetResponse parses an HTTP response from a PostApiV2BalanceGetWithResponse call
func ParsePostApiV2BalanceGetResponse(rsp *http.Response) (*PostApiV2BalanceGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV2BalanceGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                      `json:"code,omitempty"`
			Data *ResponseBalanceQueryResp `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV2DeployPrepareResponse parses an HTTP response from a PostApiV2DeployPrepareWithResponse call
func ParsePostApiV2DeployPrepareResponse(rsp *http.Response) (*PostApiV2DeployPrepareResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV2DeployPrepareResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                       `json:"code,omitempty"`
			Data *ResponseDeployPrepareResp `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV2DeploySubmitResponse parses an HTTP response from a PostApiV2DeploySubmitWithResponse call
func ParsePostApiV2DeploySubmitResponse(rsp *http.Response) (*PostApiV2DeploySubmitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV2DeploySubmitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                      `json:"code,omitempty"`
			Data *ResponseDeploySubmitResp `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV2PrimaryDividendGetResponse parses an HTTP response from a GetApiV2PrimaryDividendGetWithResponse call
func ParseGetApiV2PrimaryDividendGetResponse(rsp *http.Response) (*GetApiV2PrimaryDividendGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2PrimaryDividendGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                      `json:"code,omitempty"`
			Data *ResponseUserDividendResp `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV2PrimaryVaultFundingOverviewResponse parses an HTTP response from a GetApiV2PrimaryVaultFundingOverviewWithResponse call
func ParseGetApiV2PrimaryVaultFundingOverviewResponse(rsp *http.Response) (*GetApiV2PrimaryVaultFundingOverviewResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2PrimaryVaultFundingOverviewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                     `json:"code,omitempty"`
			Data *EntityFundingOverviewTx `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV2PrimaryVaultPrepareCreateResponse parses an HTTP response from a PostApiV2PrimaryVaultPrepareCreateWithResponse call
func ParsePostApiV2PrimaryVaultPrepareCreateResponse(rsp *http.Response) (*PostApiV2PrimaryVaultPrepareCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV2PrimaryVaultPrepareCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                        `json:"code,omitempty"`
			Data *EntityTokenLaunchPrepareTx `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV2PrimaryVaultPrepareClaimRewardResponse parses an HTTP response from a PostApiV2PrimaryVaultPrepareClaimRewardWithResponse call
func ParsePostApiV2PrimaryVaultPrepareClaimRewardResponse(rsp *http.Response) (*PostApiV2PrimaryVaultPrepareClaimRewardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV2PrimaryVaultPrepareClaimRewardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                      `json:"code,omitempty"`
			Data *EntityVaultClaimRewardTx `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV2PrimaryVaultPrepareDepositResponse parses an HTTP response from a PostApiV2PrimaryVaultPrepareDepositWithResponse call
func ParsePostApiV2PrimaryVaultPrepareDepositResponse(rsp *http.Response) (*PostApiV2PrimaryVaultPrepareDepositResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV2PrimaryVaultPrepareDepositResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                    `json:"code,omitempty"`
			Data *EntityDepositPrepareTx `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV2PrimaryVaultPrepareDistributeDividendResponse parses an HTTP response from a PostApiV2PrimaryVaultPrepareDistributeDividendWithResponse call
func ParsePostApiV2PrimaryVaultPrepareDistributeDividendResponse(rsp *http.Response) (*PostApiV2PrimaryVaultPrepareDistributeDividendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV2PrimaryVaultPrepareDistributeDividendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                             `json:"code,omitempty"`
			Data *EntityVaultDistributeDividendTx `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV2PrimaryVaultPrepareRedeemResponse parses an HTTP response from a PostApiV2PrimaryVaultPrepareRedeemWithResponse call
func ParsePostApiV2PrimaryVaultPrepareRedeemResponse(rsp *http.Response) (*PostApiV2PrimaryVaultPrepareRedeemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV2PrimaryVaultPrepareRedeemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                 `json:"code,omitempty"`
			Data *EntityVaultRedeemTx `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV2PrimaryVaultPrepareWithdrawResponse parses an HTTP response from a PostApiV2PrimaryVaultPrepareWithdrawWithResponse call
func ParsePostApiV2PrimaryVaultPrepareWithdrawResponse(rsp *http.Response) (*PostApiV2PrimaryVaultPrepareWithdrawResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV2PrimaryVaultPrepareWithdrawResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                     `json:"code,omitempty"`
			Data *EntityWithdrawPrepareTx `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV2TokenTxsHolderInfoResponse parses an HTTP response from a GetApiV2TokenTxsHolderInfoWithResponse call
func ParseGetApiV2TokenTxsHolderInfoResponse(rsp *http.Response) (*GetApiV2TokenTxsHolderInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2TokenTxsHolderInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                       `json:"code,omitempty"`
			Data *ResponseGetHolderInfoResp `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV2TokenTxsProcessResponse parses an HTTP response from a PostApiV2TokenTxsProcessWithResponse call
func ParsePostApiV2TokenTxsProcessResponse(rsp *http.Response) (*PostApiV2TokenTxsProcessResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV2TokenTxsProcessResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                   `json:"code,omitempty"`
			Data *ResponseProcessTxResp `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV2TokenTxsSyncResponse parses an HTTP response from a PostApiV2TokenTxsSyncWithResponse call
func ParsePostApiV2TokenTxsSyncResponse(rsp *http.Response) (*PostApiV2TokenTxsSyncResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV2TokenTxsSyncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                    `json:"code,omitempty"`
			Data *ResponseSyncTxTaskResp `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV2TokenTxsTaskInfoResponse parses an HTTP response from a GetApiV2TokenTxsTaskInfoWithResponse call
func ParseGetApiV2TokenTxsTaskInfoResponse(rsp *http.Response) (*GetApiV2TokenTxsTaskInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2TokenTxsTaskInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                  `json:"code,omitempty"`
			Data *ResponseTaskInfoResp `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV2TransferPrepareResponse parses an HTTP response from a PostApiV2TransferPrepareWithResponse call
func ParsePostApiV2TransferPrepareResponse(rsp *http.Response) (*PostApiV2TransferPrepareResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV2TransferPrepareResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                         `json:"code,omitempty"`
			Data *ResponseTransferPrepareResp `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV2TransferSubmitResponse parses an HTTP response from a PostApiV2TransferSubmitWithResponse call
func ParsePostApiV2TransferSubmitResponse(rsp *http.Response) (*PostApiV2TransferSubmitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV2TransferSubmitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                        `json:"code,omitempty"`
			Data *ResponseTransferSubmitResp `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
