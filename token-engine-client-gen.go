// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package client

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// Defines values for CommonChainID.
const (
	SOLANA CommonChainID = "1001"
)

// Defines values for EntityDEXPlatform.
const (
	DexRaydium     EntityDEXPlatform = "Raydium"
	DexRaydiumCLMM EntityDEXPlatform = "Raydium CLMM"
)

// Defines values for GetApiV1CommonBalanceParamsChainId.
const (
	GetApiV1CommonBalanceParamsChainIdN1001 GetApiV1CommonBalanceParamsChainId = "1001"
)

// Defines values for GetApiV1CommonTxResultParamsChainId.
const (
	GetApiV1CommonTxResultParamsChainIdN1001 GetApiV1CommonTxResultParamsChainId = "1001"
)

// Defines values for GetApiV1SwapPriceParamsChainId.
const (
	N1001 GetApiV1SwapPriceParamsChainId = "1001"
)

// Defines values for GetApiV1SwapPriceParamsPlatform.
const (
	Raydium     GetApiV1SwapPriceParamsPlatform = "Raydium"
	RaydiumCLMM GetApiV1SwapPriceParamsPlatform = "Raydium CLMM"
)

// BigInt defines model for big.Int.
type BigInt = map[string]interface{}

// CommonApiResp API标准响应格式
type CommonApiResp struct {
	// Code Code is the response code
	// @Description 响应状态码
	Code *int `json:"code,omitempty"`

	// Data Data is the response data
	// @Description 响应数据
	Data interface{} `json:"data,omitempty"`

	// Message Message is the response message
	// @Description 响应消息
	Message *string `json:"message,omitempty"`
}

// CommonChainID defines model for common.ChainID.
type CommonChainID string

// EntityDEXPlatform defines model for entity.DEX_Platform.
type EntityDEXPlatform string

// EntityDepositPrepareTx defines model for entity.DepositPrepareTx.
type EntityDepositPrepareTx struct {
	ChainId      *BigInt           `json:"chain_id,omitempty"`
	ContractName *string           `json:"contract_name,omitempty"`
	From         *[]int            `json:"from,omitempty"`
	GasLimit     *int              `json:"gas_limit,omitempty"`
	GasPrice     *BigInt           `json:"gas_price,omitempty"`
	Hash         *string           `json:"hash,omitempty"`
	Nonce        *int              `json:"nonce,omitempty"`
	RawTxHex     *string           `json:"raw_tx_hex,omitempty"`
	TxData       *TypesTransaction `json:"tx_data,omitempty"`
}

// EntityFundingOverviewTx defines model for entity.FundingOverviewTx.
type EntityFundingOverviewTx struct {
	ChainId      *BigInt           `json:"chain_id,omitempty"`
	ContractName *string           `json:"contract_name,omitempty"`
	From         *[]int            `json:"from,omitempty"`
	GasLimit     *int              `json:"gas_limit,omitempty"`
	GasPrice     *BigInt           `json:"gas_price,omitempty"`
	Hash         *string           `json:"hash,omitempty"`
	Nonce        *int              `json:"nonce,omitempty"`
	RawTxHex     *string           `json:"raw_tx_hex,omitempty"`
	TxData       *TypesTransaction `json:"tx_data,omitempty"`
}

// EntityTokenLaunchPrepareTx defines model for entity.TokenLaunchPrepareTx.
type EntityTokenLaunchPrepareTx struct {
	ChainId      *BigInt           `json:"chain_id,omitempty"`
	ContractName *string           `json:"contract_name,omitempty"`
	From         *[]int            `json:"from,omitempty"`
	GasLimit     *int              `json:"gas_limit,omitempty"`
	GasPrice     *BigInt           `json:"gas_price,omitempty"`
	Hash         *string           `json:"hash,omitempty"`
	Nonce        *int              `json:"nonce,omitempty"`
	RawTxHex     *string           `json:"raw_tx_hex,omitempty"`
	TxData       *TypesTransaction `json:"tx_data,omitempty"`
}

// EntityVaultClaimProfitTx defines model for entity.VaultClaimProfitTx.
type EntityVaultClaimProfitTx struct {
	ChainId      *BigInt           `json:"chain_id,omitempty"`
	ContractName *string           `json:"contract_name,omitempty"`
	From         *[]int            `json:"from,omitempty"`
	GasLimit     *int              `json:"gas_limit,omitempty"`
	GasPrice     *BigInt           `json:"gas_price,omitempty"`
	Hash         *string           `json:"hash,omitempty"`
	Nonce        *int              `json:"nonce,omitempty"`
	RawTxHex     *string           `json:"raw_tx_hex,omitempty"`
	TxData       *TypesTransaction `json:"tx_data,omitempty"`
}

// EntityVaultDistributeDividendTx defines model for entity.VaultDistributeDividendTx.
type EntityVaultDistributeDividendTx struct {
	ChainId      *BigInt           `json:"chain_id,omitempty"`
	ContractName *string           `json:"contract_name,omitempty"`
	From         *[]int            `json:"from,omitempty"`
	GasLimit     *int              `json:"gas_limit,omitempty"`
	GasPrice     *BigInt           `json:"gas_price,omitempty"`
	Hash         *string           `json:"hash,omitempty"`
	Nonce        *int              `json:"nonce,omitempty"`
	RawTxHex     *string           `json:"raw_tx_hex,omitempty"`
	TxData       *TypesTransaction `json:"tx_data,omitempty"`
}

// EntityVaultRedeemTx defines model for entity.VaultRedeemTx.
type EntityVaultRedeemTx struct {
	ChainId      *BigInt           `json:"chain_id,omitempty"`
	ContractName *string           `json:"contract_name,omitempty"`
	From         *[]int            `json:"from,omitempty"`
	GasLimit     *int              `json:"gas_limit,omitempty"`
	GasPrice     *BigInt           `json:"gas_price,omitempty"`
	Hash         *string           `json:"hash,omitempty"`
	Nonce        *int              `json:"nonce,omitempty"`
	RawTxHex     *string           `json:"raw_tx_hex,omitempty"`
	TxData       *TypesTransaction `json:"tx_data,omitempty"`
}

// EntityWithdrawPrepareTx defines model for entity.WithdrawPrepareTx.
type EntityWithdrawPrepareTx struct {
	ChainId      *BigInt           `json:"chain_id,omitempty"`
	ContractName *string           `json:"contract_name,omitempty"`
	From         *[]int            `json:"from,omitempty"`
	GasLimit     *int              `json:"gas_limit,omitempty"`
	GasPrice     *BigInt           `json:"gas_price,omitempty"`
	Hash         *string           `json:"hash,omitempty"`
	Nonce        *int              `json:"nonce,omitempty"`
	RawTxHex     *string           `json:"raw_tx_hex,omitempty"`
	TxData       *TypesTransaction `json:"tx_data,omitempty"`
}

// RequestBorrowerWithdrawReq defines model for request.BorrowerWithdrawReq.
type RequestBorrowerWithdrawReq struct {
	// Amount 提取数额
	Amount  int           `json:"amount"`
	ChainId CommonChainID `json:"chain_id"`

	// VaultAddress vault地址
	VaultAddress string `json:"vault_address"`

	// Withdrawer 提款人
	Withdrawer string `json:"withdrawer"`
}

// RequestCreatePoolAndLiquidityReq defines model for request.CreatePoolAndLiquidityReq.
type RequestCreatePoolAndLiquidityReq struct {
	ChainId CommonChainID `json:"chain_id"`

	// VaultAddress vault地址
	VaultAddress string `json:"vault_address"`
}

// RequestDeployPrepareReq defines model for request.DeployPrepareReq.
type RequestDeployPrepareReq struct {
	// ContractNames 要部署的合约名称列表
	ContractNames []string `json:"contract_names"`

	// FromAddress 部署者地址
	FromAddress string `json:"from_address"`
}

// RequestDeploySubmitReq defines model for request.DeploySubmitReq.
type RequestDeploySubmitReq struct {
	// SignedTxs 已签名的部署交易列表
	SignedTxs []RequestSignedDeploymentTx `json:"signed_txs"`
}

// RequestDepositReq defines model for request.DepositReq.
type RequestDepositReq struct {
	// Amount 投资额(以vault融资货币计价)
	Amount  int           `json:"amount"`
	ChainId CommonChainID `json:"chain_id"`

	// Investor 投资人地址
	Investor string `json:"investor"`

	// VaultAddress vault地址
	VaultAddress string `json:"vault_address"`
}

// RequestFinancingRule defines model for request.FinancingRule.
type RequestFinancingRule struct {
	// ExcessFundraisingRatioBps 超募比例bps
	ExcessFundraisingRatioBps *int `json:"excess_fundraising_ratio_bps,omitempty"`

	// FinancingCurrencyAddr 融资货币地址
	FinancingCurrencyAddr string `json:"financing_currency_addr"`
	FinancingDeadline     *int   `json:"financing_deadline,omitempty"`
	FinancingStartTime    *int   `json:"financing_start_time,omitempty"`

	// MinInvestmentBaseFinancingCurrency 最小投资额
	MinInvestmentBaseFinancingCurrency int `json:"min_investment_base_financing_currency"`

	// PriceBaseFinancingCurrency 融资货币计价
	PriceBaseFinancingCurrency int `json:"price_base_financing_currency"`

	// TargetAmountBaseFinancingCurrency 目标融资额
	TargetAmountBaseFinancingCurrency int `json:"target_amount_base_financing_currency"`
}

// RequestFinancingRuleInfo defines model for request.FinancingRuleInfo.
type RequestFinancingRuleInfo struct {
	// DecimalsMultiplier 精度倍数, 例如，使用ETH融资，就是 "1", 使用USDT融资，就是 "1"
	DecimalsMultiplier *string `json:"decimals_multiplier,omitempty"`

	// ExcessFundraisingRatioBps 超募比例bps uint64
	ExcessFundraisingRatioBps *string `json:"excess_fundraising_ratio_bps,omitempty"`

	// FinancingCurrencyAddr 融资货币地址
	FinancingCurrencyAddr string `json:"financing_currency_addr"`

	// FinancingDeadline 融资截止时间 int64(时间戳) 秒级时间戳字符串
	FinancingDeadline *int `json:"financing_deadline,omitempty"`

	// FinancingStartTime 融资开始时间 int64(时间戳) 秒级时间戳字符串
	FinancingStartTime *int `json:"financing_start_time,omitempty"`

	// FundingReceiver 融资接收地址
	FundingReceiver *string `json:"funding_receiver,omitempty"`

	// ManageFeeBps 管理费bps 比如2%，就写 "200"
	ManageFeeBps *string `json:"manage_fee_bps,omitempty"`

	// ManageFeeReceiver 管理费接收地址
	ManageFeeReceiver *string `json:"manage_fee_receiver,omitempty"`

	// MinInvestmentBaseFinancingCurrency 最小投资额 uint64， 100 U, 就写"100"
	MinInvestmentBaseFinancingCurrency string `json:"min_investment_base_financing_currency"`

	// SharePrice 份额价格, 0.1U, 就写 ""0.1""
	SharePrice *string `json:"share_price,omitempty"`

	// SoftCap 软顶10万, "100000"
	SoftCap string `json:"soft_cap"`

	// TargetAmountBaseFinancingCurrency 目标融资额 uint64, 比如100万, "1000000"
	TargetAmountBaseFinancingCurrency string `json:"target_amount_base_financing_currency"`
}

// RequestFundingOverviewReq defines model for request.FundingOverviewReq.
type RequestFundingOverviewReq struct {
	ChainId CommonChainID `json:"chain_id"`

	// VaultAddress vault地址
	VaultAddress string `json:"vault_address"`
}

// RequestLiquidateReq defines model for request.LiquidateReq.
type RequestLiquidateReq struct {
	ChainId      CommonChainID `json:"chain_id"`
	VaultAddress string        `json:"vault_address"`
}

// RequestRedeemReq defines model for request.RedeemReq.
type RequestRedeemReq struct {
	// Amount 提取数额
	Amount  int           `json:"amount"`
	ChainId CommonChainID `json:"chain_id"`

	// Investor 投资人地址
	Investor string `json:"investor"`

	// VaultAddress vault地址
	VaultAddress string `json:"vault_address"`
}

// RequestSettleReq defines model for request.SettleReq.
type RequestSettleReq struct {
	// Amount 数量
	Amount  int           `json:"amount"`
	ChainId CommonChainID `json:"chain_id"`

	// VaultAddress vault地址
	VaultAddress string `json:"vault_address"`
}

// RequestSignedDeploymentTx defines model for request.SignedDeploymentTx.
type RequestSignedDeploymentTx struct {
	// ContractName 合约名称
	ContractName string `json:"contract_name"`

	// SignedTxHex 已签名交易的十六进制表示
	SignedTxHex string `json:"signed_tx_hex"`
}

// RequestSubmitReq defines model for request.SubmitReq.
type RequestSubmitReq struct {
	ChainId CommonChainID `json:"chain_id"`

	// Sender 提交人地址
	Sender string `json:"sender"`

	// SignTxBase64 签名交易体字符串 base64编码
	SignTxBase64 string `json:"sign_tx_base64"`

	// TxMsgBase64 待签名数据
	TxMsgBase64 string `json:"tx_msg_base64"`
}

// RequestSwapPrepareReq defines model for request.SwapPrepareReq.
type RequestSwapPrepareReq struct {
	// Amount 存入数量
	Amount  string        `json:"amount"`
	ChainId CommonChainID `json:"chain_id"`

	// InputMint 存入代币地址
	InputMint string `json:"input_mint"`

	// MinOutAmount 限制最小可兑换出的数量
	MinOutAmount string `json:"min_out_amount"`

	// OutputMint 兑换出的代币地址
	OutputMint string            `json:"output_mint"`
	Platform   EntityDEXPlatform `json:"platform"`
	Sender     string            `json:"sender"`

	// VaultAddress vault地址
	VaultAddress string `json:"vault_address"`
}

// RequestTokenLaunchReq defines model for request.TokenLaunchReq.
type RequestTokenLaunchReq struct {
	ChainId CommonChainID `json:"chain_id"`

	// FinancingRuleData 融资信息
	FinancingRuleData RequestFinancingRule `json:"financing_rule_data"`

	// ManagementData 管理信息
	ManagementData RequestTokenManage `json:"management_data"`

	// TokenMetaData token元数据信息
	TokenMetaData RequestTokenMeta `json:"token_meta_data"`
}

// RequestTokenManage defines model for request.TokenManage.
type RequestTokenManage struct {
	// Borrower 融资成功后的提款人
	Borrower string `json:"borrower"`

	// Deployer 发行人
	Deployer string `json:"deployer"`

	// Manager 管理员
	Manager string `json:"manager"`
}

// RequestTokenMeta defines model for request.TokenMeta.
type RequestTokenMeta struct {
	TokenDecimals int    `json:"token_decimals"`
	TokenName     string `json:"token_name"`
	TokenSymbol   string `json:"token_symbol"`
	TokenUri      string `json:"token_uri"`
}

// RequestTransferPrepareReq defines model for request.TransferPrepareReq.
type RequestTransferPrepareReq struct {
	// Amount 转账金额
	Amount string `json:"amount"`

	// ChainId 链ID
	ChainId int `json:"chain_id"`

	// FromAddr 发送方地址
	FromAddr string `json:"from_addr"`

	// ToAddr 接收方地址
	ToAddr string `json:"to_addr"`

	// TokenAddr 代币合约地址(可选)
	TokenAddr *string `json:"token_addr,omitempty"`

	// TokenType 代币类型(ETH/USDT)
	TokenType string `json:"token_type"`
}

// RequestTransferSubmitReq defines model for request.TransferSubmitReq.
type RequestTransferSubmitReq struct {
	// ChainId 链ID
	ChainId int `json:"chain_id"`

	// SignedTxHex 已签名的交易hex
	SignedTxHex string `json:"signed_tx_hex"`
}

// RequestVaultClaimProfitReq defines model for request.VaultClaimProfitReq.
type RequestVaultClaimProfitReq struct {
	// Amount 提取数额 uint64
	Amount  string        `json:"amount"`
	ChainId CommonChainID `json:"chain_id"`

	// Investor 投资人地址
	Investor string `json:"investor"`

	// VaultAddress vault地址
	VaultAddress string `json:"vault_address"`
}

// RequestVaultCreateReq defines model for request.VaultCreateReq.
type RequestVaultCreateReq struct {
	ChainId CommonChainID `json:"chain_id"`

	// EnableWhitelist 是否开启白名单
	EnableWhitelist *bool `json:"enable_whitelist,omitempty"`

	// FinancingRuleData 融资信息
	FinancingRuleData RequestFinancingRuleInfo `json:"financing_rule_data"`

	// ManagementData 管理信息
	ManagementData RequestVaultManagement `json:"management_data"`

	// TokenMetaData token元数据信息
	TokenMetaData RequestTokenMeta `json:"token_meta_data"`
}

// RequestVaultDepositReq defines model for request.VaultDepositReq.
type RequestVaultDepositReq struct {
	// Amount 投资额(以vault融资货币计价) uint64
	Amount  string        `json:"amount"`
	ChainId CommonChainID `json:"chain_id"`

	// Investor 投资人地址
	Investor string `json:"investor"`

	// VaultAddress vault地址
	VaultAddress string `json:"vault_address"`
}

// RequestVaultDistributeDividendReq defines model for request.VaultDistributeDividendReq.
type RequestVaultDistributeDividendReq struct {
	// Amount 派息数额 uint64
	Amount  string        `json:"amount"`
	ChainId CommonChainID `json:"chain_id"`

	// Signature 派息签名
	Signature string `json:"signature"`
}

// RequestVaultManagement defines model for request.VaultManagement.
type RequestVaultManagement struct {
	// Deployer 部署者
	Deployer string `json:"deployer"`

	// Issuer 发行人
	Issuer string `json:"issuer"`

	// Manager 管理员
	Manager string `json:"manager"`

	// Withdrawer 融资成功后的提款人
	Withdrawer string `json:"withdrawer"`
}

// RequestVaultRedeemReq defines model for request.VaultRedeemReq.
type RequestVaultRedeemReq struct {
	// Amount 提取数额
	Amount  int           `json:"amount"`
	ChainId CommonChainID `json:"chain_id"`

	// Investor 投资人地址
	Investor string `json:"investor"`

	// VaultAddress vault地址
	VaultAddress string `json:"vault_address"`
}

// RequestVaultWithdrawReq defines model for request.VaultWithdrawReq.
type RequestVaultWithdrawReq struct {
	// Amount 提取数额 uint64
	Amount  string        `json:"amount"`
	ChainId CommonChainID `json:"chain_id"`

	// VaultAddress vault地址
	VaultAddress string `json:"vault_address"`

	// Withdrawer 投资人地址
	Withdrawer string `json:"withdrawer"`
}

// ResponseBalanceResp defines model for response.BalanceResp.
type ResponseBalanceResp struct {
	Balance      *string `json:"balance,omitempty"`
	ChainId      *string `json:"chain_id,omitempty"`
	Owner        *string `json:"owner,omitempty"`
	TokenAddress *string `json:"token_address,omitempty"`
}

// ResponseCreatePoolAndLiquidityResp defines model for response.CreatePoolAndLiquidityResp.
type ResponseCreatePoolAndLiquidityResp struct {
	TxMsgBase64 string `json:"tx_msg_base64"`
}

// ResponseDeployPrepareResp defines model for response.DeployPrepareResp.
type ResponseDeployPrepareResp struct {
	// UnsignedTxs 未签名的部署交易列表
	UnsignedTxs *[]ResponseUnsignedDeploymentTx `json:"unsigned_txs,omitempty"`
}

// ResponseDeploySubmitResp defines model for response.DeploySubmitResp.
type ResponseDeploySubmitResp struct {
	// Results 部署结果列表
	Results *[]ResponseDeploymentResult `json:"results,omitempty"`
}

// ResponseDeploymentResult defines model for response.DeploymentResult.
type ResponseDeploymentResult struct {
	// ContractAddress 部署后的合约地址
	ContractAddress *string `json:"contract_address,omitempty"`

	// ContractName 合约名称
	ContractName *string `json:"contract_name,omitempty"`

	// Error 错误信息（如果有）
	Error *string `json:"error,omitempty"`

	// Status 部署状态
	Status *string `json:"status,omitempty"`

	// TxHash 交易哈希
	TxHash *string `json:"tx_hash,omitempty"`
}

// ResponseDepositPrepareResp defines model for response.DepositPrepareResp.
type ResponseDepositPrepareResp struct {
	TxMsgBase64 string `json:"tx_msg_base64"`
}

// ResponseLaunchPrepareResp defines model for response.LaunchPrepareResp.
type ResponseLaunchPrepareResp struct {
	// AssetMintAddr asset mint
	AssetMintAddr *string `json:"asset_mint_addr,omitempty"`

	// AssetTreasuryAddr asset treasury
	AssetTreasuryAddr *string `json:"asset_treasury_addr,omitempty"`

	// GlobalConfigAddr 全局配置信息
	GlobalConfigAddr *string `json:"global_config_addr,omitempty"`

	// TxMsgBase64 待签名信息
	TxMsgBase64 string `json:"tx_msg_base64"`

	// VaultAddr vault地址
	VaultAddr *string `json:"vault_addr,omitempty"`

	// VaultAuthAddr vault auth
	VaultAuthAddr *string `json:"vault_auth_addr,omitempty"`

	// VaultMintAddr vault mint
	VaultMintAddr *string `json:"vault_mint_addr,omitempty"`

	// VaultTreasuryAddr vault treasury
	VaultTreasuryAddr *string `json:"vault_treasury_addr,omitempty"`
}

// ResponseLiquidateResp defines model for response.LiquidateResp.
type ResponseLiquidateResp struct {
	TxMsgBase64 string `json:"tx_msg_base64"`
}

// ResponseReclaimPrepareResp defines model for response.ReclaimPrepareResp.
type ResponseReclaimPrepareResp struct {
	TxMsgBase64 string `json:"tx_msg_base64"`
}

// ResponseRedeemPrepareResp defines model for response.RedeemPrepareResp.
type ResponseRedeemPrepareResp struct {
	TxMsgBase64 string `json:"tx_msg_base64"`
}

// ResponseSenderBalanceChange defines model for response.SenderBalanceChange.
type ResponseSenderBalanceChange struct {
	// NativeBalanceChange 原生代币余额变化
	NativeBalanceChange *int `json:"native_balance_change,omitempty"`

	// NativeDecimals 原生代币decimals
	NativeDecimals *int `json:"native_decimals,omitempty"`

	// TokenBalanceChange 代币余额变化列表
	TokenBalanceChange *[]ResponseTokenBalanceChange `json:"token_balance_change,omitempty"`
}

// ResponseSettleResp defines model for response.SettleResp.
type ResponseSettleResp struct {
	TxMsgBase64 string `json:"tx_msg_base64"`
}

// ResponseSubmitResp defines model for response.SubmitResp.
type ResponseSubmitResp struct {
	FailedMsg *string `json:"failed_msg,omitempty"`

	// SenderBalanceChange 交易发送者余额变化，交易失败时为nil
	SenderBalanceChange *ResponseSenderBalanceChange `json:"sender_balance_change,omitempty"`
	Success             *bool                        `json:"success,omitempty"`
	TxHash              *string                      `json:"tx_hash,omitempty"`
}

// ResponseSwapPrepareResp defines model for response.SwapPrepareResp.
type ResponseSwapPrepareResp struct {
	TxMsgBase64 string `json:"tx_msg_base64"`
}

// ResponseSwapPriceResp defines model for response.SwapPriceResp.
type ResponseSwapPriceResp struct {
	InputMint       *string `json:"input_mint,omitempty"`
	InputMintAmount *string `json:"input_mint_amount,omitempty"`
	OutputMint      *string `json:"output_mint,omitempty"`

	// OutputMintAmount 预计可兑换出来的数量(已考虑raydium手续费和滑点)
	OutputMintAmount *string `json:"output_mint_amount,omitempty"`

	// Price 理论上一个单位的input可以兑换多少output(已除以各自decimals，不考虑手续费和滑点)
	Price *float32 `json:"price,omitempty"`

	// SlippageBps 本次交易预计产生的滑点(bps)
	SlippageBps *int `json:"slippage_bps,omitempty"`
}

// ResponseTokenBalanceChange defines model for response.TokenBalanceChange.
type ResponseTokenBalanceChange struct {
	// BalanceChange 余额变化
	BalanceChange *string `json:"balance_change,omitempty"`

	// Decimals decimals
	Decimals *int `json:"decimals,omitempty"`

	// TokenMint 代币地址
	TokenMint *string `json:"token_mint,omitempty"`
}

// ResponseTransferPrepareResp defines model for response.TransferPrepareResp.
type ResponseTransferPrepareResp struct {
	// ChainId 链ID
	ChainId *string `json:"chain_id,omitempty"`

	// GasLimit Gas限制
	GasLimit *int `json:"gas_limit,omitempty"`

	// GasPrice Gas价格
	GasPrice *string `json:"gas_price,omitempty"`

	// Nonce Nonce值
	Nonce *int `json:"nonce,omitempty"`

	// To 目标地址
	To *string `json:"to,omitempty"`

	// TxData 交易数据（hex编码）
	TxData *string `json:"tx_data,omitempty"`

	// Value 交易金额（ETH，对于ERC20转账为0）
	Value *string `json:"value,omitempty"`
}

// ResponseTransferSubmitResp defines model for response.TransferSubmitResp.
type ResponseTransferSubmitResp struct {
	// TxHash 交易哈希
	TxHash *string `json:"tx_hash,omitempty"`
}

// ResponseTxResultResp defines model for response.TxResultResp.
type ResponseTxResultResp struct {
	FailedMsg *string `json:"failed_msg,omitempty"`
	Success   *bool   `json:"success,omitempty"`
	TxHash    *string `json:"tx_hash,omitempty"`
}

// ResponseUnsignedDeploymentTx defines model for response.UnsignedDeploymentTx.
type ResponseUnsignedDeploymentTx struct {
	// ContractName 合约名称
	ContractName *string `json:"contract_name,omitempty"`

	// GasLimit Gas限制
	GasLimit *int `json:"gas_limit,omitempty"`

	// GasPrice Gas价格 (wei)
	GasPrice *string `json:"gas_price,omitempty"`

	// Nonce 交易序号
	Nonce *int `json:"nonce,omitempty"`

	// TxHex 未签名交易的十六进制表示
	TxHex *string `json:"tx_hex,omitempty"`
}

// TypesTransaction defines model for types.Transaction.
type TypesTransaction = map[string]interface{}

// GetApiV1CommonBalanceParams defines parameters for GetApiV1CommonBalance.
type GetApiV1CommonBalanceParams struct {
	ChainId GetApiV1CommonBalanceParamsChainId `form:"chain_id" json:"chain_id"`

	// Owner 账户地址
	Owner string `form:"owner" json:"owner"`

	// TokenAddress token地址,原生token无需赋值
	TokenAddress *string `form:"token_address,omitempty" json:"token_address,omitempty"`
}

// GetApiV1CommonBalanceParamsChainId defines parameters for GetApiV1CommonBalance.
type GetApiV1CommonBalanceParamsChainId string

// GetApiV1CommonTxResultParams defines parameters for GetApiV1CommonTxResult.
type GetApiV1CommonTxResultParams struct {
	ChainId GetApiV1CommonTxResultParamsChainId `form:"chain_id" json:"chain_id"`
	TxHash  string                              `form:"tx_hash" json:"tx_hash"`
}

// GetApiV1CommonTxResultParamsChainId defines parameters for GetApiV1CommonTxResult.
type GetApiV1CommonTxResultParamsChainId string

// GetApiV1SwapPriceParams defines parameters for GetApiV1SwapPrice.
type GetApiV1SwapPriceParams struct {
	Amount             string                          `form:"amount" json:"amount"`
	ChainId            GetApiV1SwapPriceParamsChainId  `form:"chain_id" json:"chain_id"`
	InputMintDecimals  *int                            `form:"inputMintDecimals,omitempty" json:"inputMintDecimals,omitempty"`
	InputMint          string                          `form:"input_mint" json:"input_mint"`
	OutputMintDecimals *int                            `form:"outputMintDecimals,omitempty" json:"outputMintDecimals,omitempty"`
	OutputMint         string                          `form:"output_mint" json:"output_mint"`
	Platform           GetApiV1SwapPriceParamsPlatform `form:"platform" json:"platform"`

	// VaultAddress vault地址
	VaultAddress string `form:"vault_address" json:"vault_address"`
}

// GetApiV1SwapPriceParamsChainId defines parameters for GetApiV1SwapPrice.
type GetApiV1SwapPriceParamsChainId string

// GetApiV1SwapPriceParamsPlatform defines parameters for GetApiV1SwapPrice.
type GetApiV1SwapPriceParamsPlatform string

// PostApiV1CommonSubmitTxJSONRequestBody defines body for PostApiV1CommonSubmitTx for application/json ContentType.
type PostApiV1CommonSubmitTxJSONRequestBody = RequestSubmitReq

// PostApiV1PrimaryCreatePoolJSONRequestBody defines body for PostApiV1PrimaryCreatePool for application/json ContentType.
type PostApiV1PrimaryCreatePoolJSONRequestBody = RequestCreatePoolAndLiquidityReq

// PostApiV1PrimaryPrepareBorrowerWithdrawJSONRequestBody defines body for PostApiV1PrimaryPrepareBorrowerWithdraw for application/json ContentType.
type PostApiV1PrimaryPrepareBorrowerWithdrawJSONRequestBody = RequestBorrowerWithdrawReq

// PostApiV1PrimaryPrepareDepositJSONRequestBody defines body for PostApiV1PrimaryPrepareDeposit for application/json ContentType.
type PostApiV1PrimaryPrepareDepositJSONRequestBody = RequestDepositReq

// PostApiV1PrimaryPrepareLaunchJSONRequestBody defines body for PostApiV1PrimaryPrepareLaunch for application/json ContentType.
type PostApiV1PrimaryPrepareLaunchJSONRequestBody = RequestTokenLaunchReq

// PostApiV1PrimaryPrepareLiquidateJSONRequestBody defines body for PostApiV1PrimaryPrepareLiquidate for application/json ContentType.
type PostApiV1PrimaryPrepareLiquidateJSONRequestBody = RequestLiquidateReq

// PostApiV1PrimaryPrepareRedeemJSONRequestBody defines body for PostApiV1PrimaryPrepareRedeem for application/json ContentType.
type PostApiV1PrimaryPrepareRedeemJSONRequestBody = RequestRedeemReq

// GetApiV1PrimaryPrepareSettleJSONRequestBody defines body for GetApiV1PrimaryPrepareSettle for application/json ContentType.
type GetApiV1PrimaryPrepareSettleJSONRequestBody = RequestFundingOverviewReq

// PostApiV1PrimaryPrepareSettleJSONRequestBody defines body for PostApiV1PrimaryPrepareSettle for application/json ContentType.
type PostApiV1PrimaryPrepareSettleJSONRequestBody = RequestSettleReq

// PostApiV1SwapPrepareTxJSONRequestBody defines body for PostApiV1SwapPrepareTx for application/json ContentType.
type PostApiV1SwapPrepareTxJSONRequestBody = RequestSwapPrepareReq

// PostApiV2DeployPrepareJSONRequestBody defines body for PostApiV2DeployPrepare for application/json ContentType.
type PostApiV2DeployPrepareJSONRequestBody = RequestDeployPrepareReq

// PostApiV2DeploySubmitJSONRequestBody defines body for PostApiV2DeploySubmit for application/json ContentType.
type PostApiV2DeploySubmitJSONRequestBody = RequestDeploySubmitReq

// PostApiV2PrimaryVaultPrepareCreateJSONRequestBody defines body for PostApiV2PrimaryVaultPrepareCreate for application/json ContentType.
type PostApiV2PrimaryVaultPrepareCreateJSONRequestBody = RequestVaultCreateReq

// PostApiV2PrimaryVaultPrepareClaimProfitJSONRequestBody defines body for PostApiV2PrimaryVaultPrepareClaimProfit for application/json ContentType.
type PostApiV2PrimaryVaultPrepareClaimProfitJSONRequestBody = RequestVaultClaimProfitReq

// PostApiV2PrimaryVaultPrepareDepositJSONRequestBody defines body for PostApiV2PrimaryVaultPrepareDeposit for application/json ContentType.
type PostApiV2PrimaryVaultPrepareDepositJSONRequestBody = RequestVaultDepositReq

// PostApiV2PrimaryVaultPrepareDistributeDividendJSONRequestBody defines body for PostApiV2PrimaryVaultPrepareDistributeDividend for application/json ContentType.
type PostApiV2PrimaryVaultPrepareDistributeDividendJSONRequestBody = RequestVaultDistributeDividendReq

// PostApiV2PrimaryVaultPrepareRedeemJSONRequestBody defines body for PostApiV2PrimaryVaultPrepareRedeem for application/json ContentType.
type PostApiV2PrimaryVaultPrepareRedeemJSONRequestBody = RequestVaultRedeemReq

// PostApiV2PrimaryVaultPrepareWithdrawJSONRequestBody defines body for PostApiV2PrimaryVaultPrepareWithdraw for application/json ContentType.
type PostApiV2PrimaryVaultPrepareWithdrawJSONRequestBody = RequestVaultWithdrawReq

// PostApiV2TransferPrepareJSONRequestBody defines body for PostApiV2TransferPrepare for application/json ContentType.
type PostApiV2TransferPrepareJSONRequestBody = RequestTransferPrepareReq

// PostApiV2TransferSubmitJSONRequestBody defines body for PostApiV2TransferSubmit for application/json ContentType.
type PostApiV2TransferSubmitJSONRequestBody = RequestTransferSubmitReq

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetApiV1CommonBalance request
	GetApiV1CommonBalance(ctx context.Context, params *GetApiV1CommonBalanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1CommonSubmitTxWithBody request with any body
	PostApiV1CommonSubmitTxWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1CommonSubmitTx(ctx context.Context, body PostApiV1CommonSubmitTxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1CommonTxResult request
	GetApiV1CommonTxResult(ctx context.Context, params *GetApiV1CommonTxResultParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1PrimaryCreatePoolWithBody request with any body
	PostApiV1PrimaryCreatePoolWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1PrimaryCreatePool(ctx context.Context, body PostApiV1PrimaryCreatePoolJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1PrimaryPrepareBorrowerWithdrawWithBody request with any body
	PostApiV1PrimaryPrepareBorrowerWithdrawWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1PrimaryPrepareBorrowerWithdraw(ctx context.Context, body PostApiV1PrimaryPrepareBorrowerWithdrawJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1PrimaryPrepareDepositWithBody request with any body
	PostApiV1PrimaryPrepareDepositWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1PrimaryPrepareDeposit(ctx context.Context, body PostApiV1PrimaryPrepareDepositJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1PrimaryPrepareLaunchWithBody request with any body
	PostApiV1PrimaryPrepareLaunchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1PrimaryPrepareLaunch(ctx context.Context, body PostApiV1PrimaryPrepareLaunchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1PrimaryPrepareLiquidateWithBody request with any body
	PostApiV1PrimaryPrepareLiquidateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1PrimaryPrepareLiquidate(ctx context.Context, body PostApiV1PrimaryPrepareLiquidateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1PrimaryPrepareRedeemWithBody request with any body
	PostApiV1PrimaryPrepareRedeemWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1PrimaryPrepareRedeem(ctx context.Context, body PostApiV1PrimaryPrepareRedeemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1PrimaryPrepareSettleWithBody request with any body
	GetApiV1PrimaryPrepareSettleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetApiV1PrimaryPrepareSettle(ctx context.Context, body GetApiV1PrimaryPrepareSettleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1PrimaryPrepareSettleWithBody request with any body
	PostApiV1PrimaryPrepareSettleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1PrimaryPrepareSettle(ctx context.Context, body PostApiV1PrimaryPrepareSettleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1SwapPrepareTxWithBody request with any body
	PostApiV1SwapPrepareTxWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1SwapPrepareTx(ctx context.Context, body PostApiV1SwapPrepareTxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1SwapPrice request
	GetApiV1SwapPrice(ctx context.Context, params *GetApiV1SwapPriceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV2DeployPrepareWithBody request with any body
	PostApiV2DeployPrepareWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV2DeployPrepare(ctx context.Context, body PostApiV2DeployPrepareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV2DeploySubmitWithBody request with any body
	PostApiV2DeploySubmitWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV2DeploySubmit(ctx context.Context, body PostApiV2DeploySubmitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV2PrimaryVaultPrepareCreateWithBody request with any body
	PostApiV2PrimaryVaultPrepareCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV2PrimaryVaultPrepareCreate(ctx context.Context, body PostApiV2PrimaryVaultPrepareCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV2PrimaryVaultPrepareClaimProfitWithBody request with any body
	PostApiV2PrimaryVaultPrepareClaimProfitWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV2PrimaryVaultPrepareClaimProfit(ctx context.Context, body PostApiV2PrimaryVaultPrepareClaimProfitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV2PrimaryVaultPrepareDepositWithBody request with any body
	PostApiV2PrimaryVaultPrepareDepositWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV2PrimaryVaultPrepareDeposit(ctx context.Context, body PostApiV2PrimaryVaultPrepareDepositJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV2PrimaryVaultPrepareDistributeDividendWithBody request with any body
	PostApiV2PrimaryVaultPrepareDistributeDividendWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV2PrimaryVaultPrepareDistributeDividend(ctx context.Context, body PostApiV2PrimaryVaultPrepareDistributeDividendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV2PrimaryVaultPrepareRedeemWithBody request with any body
	PostApiV2PrimaryVaultPrepareRedeemWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV2PrimaryVaultPrepareRedeem(ctx context.Context, body PostApiV2PrimaryVaultPrepareRedeemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV2PrimaryVaultPrepareWithdrawWithBody request with any body
	PostApiV2PrimaryVaultPrepareWithdrawWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV2PrimaryVaultPrepareWithdraw(ctx context.Context, body PostApiV2PrimaryVaultPrepareWithdrawJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV2TransferPrepareWithBody request with any body
	PostApiV2TransferPrepareWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV2TransferPrepare(ctx context.Context, body PostApiV2TransferPrepareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV2TransferSubmitWithBody request with any body
	PostApiV2TransferSubmitWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV2TransferSubmit(ctx context.Context, body PostApiV2TransferSubmitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetApiV1CommonBalance(ctx context.Context, params *GetApiV1CommonBalanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1CommonBalanceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1CommonSubmitTxWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1CommonSubmitTxRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1CommonSubmitTx(ctx context.Context, body PostApiV1CommonSubmitTxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1CommonSubmitTxRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1CommonTxResult(ctx context.Context, params *GetApiV1CommonTxResultParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1CommonTxResultRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PrimaryCreatePoolWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PrimaryCreatePoolRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PrimaryCreatePool(ctx context.Context, body PostApiV1PrimaryCreatePoolJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PrimaryCreatePoolRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PrimaryPrepareBorrowerWithdrawWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PrimaryPrepareBorrowerWithdrawRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PrimaryPrepareBorrowerWithdraw(ctx context.Context, body PostApiV1PrimaryPrepareBorrowerWithdrawJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PrimaryPrepareBorrowerWithdrawRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PrimaryPrepareDepositWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PrimaryPrepareDepositRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PrimaryPrepareDeposit(ctx context.Context, body PostApiV1PrimaryPrepareDepositJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PrimaryPrepareDepositRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PrimaryPrepareLaunchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PrimaryPrepareLaunchRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PrimaryPrepareLaunch(ctx context.Context, body PostApiV1PrimaryPrepareLaunchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PrimaryPrepareLaunchRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PrimaryPrepareLiquidateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PrimaryPrepareLiquidateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PrimaryPrepareLiquidate(ctx context.Context, body PostApiV1PrimaryPrepareLiquidateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PrimaryPrepareLiquidateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PrimaryPrepareRedeemWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PrimaryPrepareRedeemRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PrimaryPrepareRedeem(ctx context.Context, body PostApiV1PrimaryPrepareRedeemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PrimaryPrepareRedeemRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1PrimaryPrepareSettleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1PrimaryPrepareSettleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1PrimaryPrepareSettle(ctx context.Context, body GetApiV1PrimaryPrepareSettleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1PrimaryPrepareSettleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PrimaryPrepareSettleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PrimaryPrepareSettleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PrimaryPrepareSettle(ctx context.Context, body PostApiV1PrimaryPrepareSettleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PrimaryPrepareSettleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1SwapPrepareTxWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1SwapPrepareTxRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1SwapPrepareTx(ctx context.Context, body PostApiV1SwapPrepareTxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1SwapPrepareTxRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1SwapPrice(ctx context.Context, params *GetApiV1SwapPriceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1SwapPriceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2DeployPrepareWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2DeployPrepareRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2DeployPrepare(ctx context.Context, body PostApiV2DeployPrepareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2DeployPrepareRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2DeploySubmitWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2DeploySubmitRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2DeploySubmit(ctx context.Context, body PostApiV2DeploySubmitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2DeploySubmitRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2PrimaryVaultPrepareCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2PrimaryVaultPrepareCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2PrimaryVaultPrepareCreate(ctx context.Context, body PostApiV2PrimaryVaultPrepareCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2PrimaryVaultPrepareCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2PrimaryVaultPrepareClaimProfitWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2PrimaryVaultPrepareClaimProfitRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2PrimaryVaultPrepareClaimProfit(ctx context.Context, body PostApiV2PrimaryVaultPrepareClaimProfitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2PrimaryVaultPrepareClaimProfitRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2PrimaryVaultPrepareDepositWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2PrimaryVaultPrepareDepositRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2PrimaryVaultPrepareDeposit(ctx context.Context, body PostApiV2PrimaryVaultPrepareDepositJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2PrimaryVaultPrepareDepositRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2PrimaryVaultPrepareDistributeDividendWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2PrimaryVaultPrepareDistributeDividendRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2PrimaryVaultPrepareDistributeDividend(ctx context.Context, body PostApiV2PrimaryVaultPrepareDistributeDividendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2PrimaryVaultPrepareDistributeDividendRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2PrimaryVaultPrepareRedeemWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2PrimaryVaultPrepareRedeemRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2PrimaryVaultPrepareRedeem(ctx context.Context, body PostApiV2PrimaryVaultPrepareRedeemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2PrimaryVaultPrepareRedeemRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2PrimaryVaultPrepareWithdrawWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2PrimaryVaultPrepareWithdrawRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2PrimaryVaultPrepareWithdraw(ctx context.Context, body PostApiV2PrimaryVaultPrepareWithdrawJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2PrimaryVaultPrepareWithdrawRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2TransferPrepareWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2TransferPrepareRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2TransferPrepare(ctx context.Context, body PostApiV2TransferPrepareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2TransferPrepareRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2TransferSubmitWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2TransferSubmitRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2TransferSubmit(ctx context.Context, body PostApiV2TransferSubmitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2TransferSubmitRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetApiV1CommonBalanceRequest generates requests for GetApiV1CommonBalance
func NewGetApiV1CommonBalanceRequest(server string, params *GetApiV1CommonBalanceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/common/balance")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "chain_id", runtime.ParamLocationQuery, params.ChainId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "owner", runtime.ParamLocationQuery, params.Owner); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TokenAddress != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token_address", runtime.ParamLocationQuery, *params.TokenAddress); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1CommonSubmitTxRequest calls the generic PostApiV1CommonSubmitTx builder with application/json body
func NewPostApiV1CommonSubmitTxRequest(server string, body PostApiV1CommonSubmitTxJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1CommonSubmitTxRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1CommonSubmitTxRequestWithBody generates requests for PostApiV1CommonSubmitTx with any type of body
func NewPostApiV1CommonSubmitTxRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/common/submit_tx")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1CommonTxResultRequest generates requests for GetApiV1CommonTxResult
func NewGetApiV1CommonTxResultRequest(server string, params *GetApiV1CommonTxResultParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/common/tx_result")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "chain_id", runtime.ParamLocationQuery, params.ChainId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tx_hash", runtime.ParamLocationQuery, params.TxHash); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1PrimaryCreatePoolRequest calls the generic PostApiV1PrimaryCreatePool builder with application/json body
func NewPostApiV1PrimaryCreatePoolRequest(server string, body PostApiV1PrimaryCreatePoolJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1PrimaryCreatePoolRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1PrimaryCreatePoolRequestWithBody generates requests for PostApiV1PrimaryCreatePool with any type of body
func NewPostApiV1PrimaryCreatePoolRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/primary/create_pool")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1PrimaryPrepareBorrowerWithdrawRequest calls the generic PostApiV1PrimaryPrepareBorrowerWithdraw builder with application/json body
func NewPostApiV1PrimaryPrepareBorrowerWithdrawRequest(server string, body PostApiV1PrimaryPrepareBorrowerWithdrawJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1PrimaryPrepareBorrowerWithdrawRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1PrimaryPrepareBorrowerWithdrawRequestWithBody generates requests for PostApiV1PrimaryPrepareBorrowerWithdraw with any type of body
func NewPostApiV1PrimaryPrepareBorrowerWithdrawRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/primary/prepare_borrower_withdraw")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1PrimaryPrepareDepositRequest calls the generic PostApiV1PrimaryPrepareDeposit builder with application/json body
func NewPostApiV1PrimaryPrepareDepositRequest(server string, body PostApiV1PrimaryPrepareDepositJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1PrimaryPrepareDepositRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1PrimaryPrepareDepositRequestWithBody generates requests for PostApiV1PrimaryPrepareDeposit with any type of body
func NewPostApiV1PrimaryPrepareDepositRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/primary/prepare_deposit")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1PrimaryPrepareLaunchRequest calls the generic PostApiV1PrimaryPrepareLaunch builder with application/json body
func NewPostApiV1PrimaryPrepareLaunchRequest(server string, body PostApiV1PrimaryPrepareLaunchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1PrimaryPrepareLaunchRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1PrimaryPrepareLaunchRequestWithBody generates requests for PostApiV1PrimaryPrepareLaunch with any type of body
func NewPostApiV1PrimaryPrepareLaunchRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/primary/prepare_launch")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1PrimaryPrepareLiquidateRequest calls the generic PostApiV1PrimaryPrepareLiquidate builder with application/json body
func NewPostApiV1PrimaryPrepareLiquidateRequest(server string, body PostApiV1PrimaryPrepareLiquidateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1PrimaryPrepareLiquidateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1PrimaryPrepareLiquidateRequestWithBody generates requests for PostApiV1PrimaryPrepareLiquidate with any type of body
func NewPostApiV1PrimaryPrepareLiquidateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/primary/prepare_liquidate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1PrimaryPrepareRedeemRequest calls the generic PostApiV1PrimaryPrepareRedeem builder with application/json body
func NewPostApiV1PrimaryPrepareRedeemRequest(server string, body PostApiV1PrimaryPrepareRedeemJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1PrimaryPrepareRedeemRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1PrimaryPrepareRedeemRequestWithBody generates requests for PostApiV1PrimaryPrepareRedeem with any type of body
func NewPostApiV1PrimaryPrepareRedeemRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/primary/prepare_redeem")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1PrimaryPrepareSettleRequest calls the generic GetApiV1PrimaryPrepareSettle builder with application/json body
func NewGetApiV1PrimaryPrepareSettleRequest(server string, body GetApiV1PrimaryPrepareSettleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetApiV1PrimaryPrepareSettleRequestWithBody(server, "application/json", bodyReader)
}

// NewGetApiV1PrimaryPrepareSettleRequestWithBody generates requests for GetApiV1PrimaryPrepareSettle with any type of body
func NewGetApiV1PrimaryPrepareSettleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/primary/prepare_settle")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1PrimaryPrepareSettleRequest calls the generic PostApiV1PrimaryPrepareSettle builder with application/json body
func NewPostApiV1PrimaryPrepareSettleRequest(server string, body PostApiV1PrimaryPrepareSettleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1PrimaryPrepareSettleRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1PrimaryPrepareSettleRequestWithBody generates requests for PostApiV1PrimaryPrepareSettle with any type of body
func NewPostApiV1PrimaryPrepareSettleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/primary/prepare_settle")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1SwapPrepareTxRequest calls the generic PostApiV1SwapPrepareTx builder with application/json body
func NewPostApiV1SwapPrepareTxRequest(server string, body PostApiV1SwapPrepareTxJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1SwapPrepareTxRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1SwapPrepareTxRequestWithBody generates requests for PostApiV1SwapPrepareTx with any type of body
func NewPostApiV1SwapPrepareTxRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/swap/prepare_tx")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1SwapPriceRequest generates requests for GetApiV1SwapPrice
func NewGetApiV1SwapPriceRequest(server string, params *GetApiV1SwapPriceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/swap/price")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "amount", runtime.ParamLocationQuery, params.Amount); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "chain_id", runtime.ParamLocationQuery, params.ChainId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.InputMintDecimals != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "inputMintDecimals", runtime.ParamLocationQuery, *params.InputMintDecimals); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "input_mint", runtime.ParamLocationQuery, params.InputMint); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.OutputMintDecimals != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "outputMintDecimals", runtime.ParamLocationQuery, *params.OutputMintDecimals); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "output_mint", runtime.ParamLocationQuery, params.OutputMint); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "platform", runtime.ParamLocationQuery, params.Platform); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vault_address", runtime.ParamLocationQuery, params.VaultAddress); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV2DeployPrepareRequest calls the generic PostApiV2DeployPrepare builder with application/json body
func NewPostApiV2DeployPrepareRequest(server string, body PostApiV2DeployPrepareJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV2DeployPrepareRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV2DeployPrepareRequestWithBody generates requests for PostApiV2DeployPrepare with any type of body
func NewPostApiV2DeployPrepareRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/deploy/prepare")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV2DeploySubmitRequest calls the generic PostApiV2DeploySubmit builder with application/json body
func NewPostApiV2DeploySubmitRequest(server string, body PostApiV2DeploySubmitJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV2DeploySubmitRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV2DeploySubmitRequestWithBody generates requests for PostApiV2DeploySubmit with any type of body
func NewPostApiV2DeploySubmitRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/deploy/submit")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV2PrimaryVaultPrepareCreateRequest calls the generic PostApiV2PrimaryVaultPrepareCreate builder with application/json body
func NewPostApiV2PrimaryVaultPrepareCreateRequest(server string, body PostApiV2PrimaryVaultPrepareCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV2PrimaryVaultPrepareCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV2PrimaryVaultPrepareCreateRequestWithBody generates requests for PostApiV2PrimaryVaultPrepareCreate with any type of body
func NewPostApiV2PrimaryVaultPrepareCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/primary/vault/prepare-create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV2PrimaryVaultPrepareClaimProfitRequest calls the generic PostApiV2PrimaryVaultPrepareClaimProfit builder with application/json body
func NewPostApiV2PrimaryVaultPrepareClaimProfitRequest(server string, body PostApiV2PrimaryVaultPrepareClaimProfitJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV2PrimaryVaultPrepareClaimProfitRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV2PrimaryVaultPrepareClaimProfitRequestWithBody generates requests for PostApiV2PrimaryVaultPrepareClaimProfit with any type of body
func NewPostApiV2PrimaryVaultPrepareClaimProfitRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/primary/vault/prepare_claim_profit")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV2PrimaryVaultPrepareDepositRequest calls the generic PostApiV2PrimaryVaultPrepareDeposit builder with application/json body
func NewPostApiV2PrimaryVaultPrepareDepositRequest(server string, body PostApiV2PrimaryVaultPrepareDepositJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV2PrimaryVaultPrepareDepositRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV2PrimaryVaultPrepareDepositRequestWithBody generates requests for PostApiV2PrimaryVaultPrepareDeposit with any type of body
func NewPostApiV2PrimaryVaultPrepareDepositRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/primary/vault/prepare_deposit")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV2PrimaryVaultPrepareDistributeDividendRequest calls the generic PostApiV2PrimaryVaultPrepareDistributeDividend builder with application/json body
func NewPostApiV2PrimaryVaultPrepareDistributeDividendRequest(server string, body PostApiV2PrimaryVaultPrepareDistributeDividendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV2PrimaryVaultPrepareDistributeDividendRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV2PrimaryVaultPrepareDistributeDividendRequestWithBody generates requests for PostApiV2PrimaryVaultPrepareDistributeDividend with any type of body
func NewPostApiV2PrimaryVaultPrepareDistributeDividendRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/primary/vault/prepare_distribute_dividend")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV2PrimaryVaultPrepareRedeemRequest calls the generic PostApiV2PrimaryVaultPrepareRedeem builder with application/json body
func NewPostApiV2PrimaryVaultPrepareRedeemRequest(server string, body PostApiV2PrimaryVaultPrepareRedeemJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV2PrimaryVaultPrepareRedeemRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV2PrimaryVaultPrepareRedeemRequestWithBody generates requests for PostApiV2PrimaryVaultPrepareRedeem with any type of body
func NewPostApiV2PrimaryVaultPrepareRedeemRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/primary/vault/prepare_redeem")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV2PrimaryVaultPrepareWithdrawRequest calls the generic PostApiV2PrimaryVaultPrepareWithdraw builder with application/json body
func NewPostApiV2PrimaryVaultPrepareWithdrawRequest(server string, body PostApiV2PrimaryVaultPrepareWithdrawJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV2PrimaryVaultPrepareWithdrawRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV2PrimaryVaultPrepareWithdrawRequestWithBody generates requests for PostApiV2PrimaryVaultPrepareWithdraw with any type of body
func NewPostApiV2PrimaryVaultPrepareWithdrawRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/primary/vault/prepare_withdraw")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV2TransferPrepareRequest calls the generic PostApiV2TransferPrepare builder with application/json body
func NewPostApiV2TransferPrepareRequest(server string, body PostApiV2TransferPrepareJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV2TransferPrepareRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV2TransferPrepareRequestWithBody generates requests for PostApiV2TransferPrepare with any type of body
func NewPostApiV2TransferPrepareRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/transfer/prepare")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV2TransferSubmitRequest calls the generic PostApiV2TransferSubmit builder with application/json body
func NewPostApiV2TransferSubmitRequest(server string, body PostApiV2TransferSubmitJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV2TransferSubmitRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV2TransferSubmitRequestWithBody generates requests for PostApiV2TransferSubmit with any type of body
func NewPostApiV2TransferSubmitRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/transfer/submit")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetApiV1CommonBalanceWithResponse request
	GetApiV1CommonBalanceWithResponse(ctx context.Context, params *GetApiV1CommonBalanceParams, reqEditors ...RequestEditorFn) (*GetApiV1CommonBalanceResponse, error)

	// PostApiV1CommonSubmitTxWithBodyWithResponse request with any body
	PostApiV1CommonSubmitTxWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1CommonSubmitTxResponse, error)

	PostApiV1CommonSubmitTxWithResponse(ctx context.Context, body PostApiV1CommonSubmitTxJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1CommonSubmitTxResponse, error)

	// GetApiV1CommonTxResultWithResponse request
	GetApiV1CommonTxResultWithResponse(ctx context.Context, params *GetApiV1CommonTxResultParams, reqEditors ...RequestEditorFn) (*GetApiV1CommonTxResultResponse, error)

	// PostApiV1PrimaryCreatePoolWithBodyWithResponse request with any body
	PostApiV1PrimaryCreatePoolWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryCreatePoolResponse, error)

	PostApiV1PrimaryCreatePoolWithResponse(ctx context.Context, body PostApiV1PrimaryCreatePoolJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryCreatePoolResponse, error)

	// PostApiV1PrimaryPrepareBorrowerWithdrawWithBodyWithResponse request with any body
	PostApiV1PrimaryPrepareBorrowerWithdrawWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareBorrowerWithdrawResponse, error)

	PostApiV1PrimaryPrepareBorrowerWithdrawWithResponse(ctx context.Context, body PostApiV1PrimaryPrepareBorrowerWithdrawJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareBorrowerWithdrawResponse, error)

	// PostApiV1PrimaryPrepareDepositWithBodyWithResponse request with any body
	PostApiV1PrimaryPrepareDepositWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareDepositResponse, error)

	PostApiV1PrimaryPrepareDepositWithResponse(ctx context.Context, body PostApiV1PrimaryPrepareDepositJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareDepositResponse, error)

	// PostApiV1PrimaryPrepareLaunchWithBodyWithResponse request with any body
	PostApiV1PrimaryPrepareLaunchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareLaunchResponse, error)

	PostApiV1PrimaryPrepareLaunchWithResponse(ctx context.Context, body PostApiV1PrimaryPrepareLaunchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareLaunchResponse, error)

	// PostApiV1PrimaryPrepareLiquidateWithBodyWithResponse request with any body
	PostApiV1PrimaryPrepareLiquidateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareLiquidateResponse, error)

	PostApiV1PrimaryPrepareLiquidateWithResponse(ctx context.Context, body PostApiV1PrimaryPrepareLiquidateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareLiquidateResponse, error)

	// PostApiV1PrimaryPrepareRedeemWithBodyWithResponse request with any body
	PostApiV1PrimaryPrepareRedeemWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareRedeemResponse, error)

	PostApiV1PrimaryPrepareRedeemWithResponse(ctx context.Context, body PostApiV1PrimaryPrepareRedeemJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareRedeemResponse, error)

	// GetApiV1PrimaryPrepareSettleWithBodyWithResponse request with any body
	GetApiV1PrimaryPrepareSettleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetApiV1PrimaryPrepareSettleResponse, error)

	GetApiV1PrimaryPrepareSettleWithResponse(ctx context.Context, body GetApiV1PrimaryPrepareSettleJSONRequestBody, reqEditors ...RequestEditorFn) (*GetApiV1PrimaryPrepareSettleResponse, error)

	// PostApiV1PrimaryPrepareSettleWithBodyWithResponse request with any body
	PostApiV1PrimaryPrepareSettleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareSettleResponse, error)

	PostApiV1PrimaryPrepareSettleWithResponse(ctx context.Context, body PostApiV1PrimaryPrepareSettleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareSettleResponse, error)

	// PostApiV1SwapPrepareTxWithBodyWithResponse request with any body
	PostApiV1SwapPrepareTxWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1SwapPrepareTxResponse, error)

	PostApiV1SwapPrepareTxWithResponse(ctx context.Context, body PostApiV1SwapPrepareTxJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1SwapPrepareTxResponse, error)

	// GetApiV1SwapPriceWithResponse request
	GetApiV1SwapPriceWithResponse(ctx context.Context, params *GetApiV1SwapPriceParams, reqEditors ...RequestEditorFn) (*GetApiV1SwapPriceResponse, error)

	// PostApiV2DeployPrepareWithBodyWithResponse request with any body
	PostApiV2DeployPrepareWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2DeployPrepareResponse, error)

	PostApiV2DeployPrepareWithResponse(ctx context.Context, body PostApiV2DeployPrepareJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2DeployPrepareResponse, error)

	// PostApiV2DeploySubmitWithBodyWithResponse request with any body
	PostApiV2DeploySubmitWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2DeploySubmitResponse, error)

	PostApiV2DeploySubmitWithResponse(ctx context.Context, body PostApiV2DeploySubmitJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2DeploySubmitResponse, error)

	// PostApiV2PrimaryVaultPrepareCreateWithBodyWithResponse request with any body
	PostApiV2PrimaryVaultPrepareCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2PrimaryVaultPrepareCreateResponse, error)

	PostApiV2PrimaryVaultPrepareCreateWithResponse(ctx context.Context, body PostApiV2PrimaryVaultPrepareCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2PrimaryVaultPrepareCreateResponse, error)

	// PostApiV2PrimaryVaultPrepareClaimProfitWithBodyWithResponse request with any body
	PostApiV2PrimaryVaultPrepareClaimProfitWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2PrimaryVaultPrepareClaimProfitResponse, error)

	PostApiV2PrimaryVaultPrepareClaimProfitWithResponse(ctx context.Context, body PostApiV2PrimaryVaultPrepareClaimProfitJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2PrimaryVaultPrepareClaimProfitResponse, error)

	// PostApiV2PrimaryVaultPrepareDepositWithBodyWithResponse request with any body
	PostApiV2PrimaryVaultPrepareDepositWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2PrimaryVaultPrepareDepositResponse, error)

	PostApiV2PrimaryVaultPrepareDepositWithResponse(ctx context.Context, body PostApiV2PrimaryVaultPrepareDepositJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2PrimaryVaultPrepareDepositResponse, error)

	// PostApiV2PrimaryVaultPrepareDistributeDividendWithBodyWithResponse request with any body
	PostApiV2PrimaryVaultPrepareDistributeDividendWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2PrimaryVaultPrepareDistributeDividendResponse, error)

	PostApiV2PrimaryVaultPrepareDistributeDividendWithResponse(ctx context.Context, body PostApiV2PrimaryVaultPrepareDistributeDividendJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2PrimaryVaultPrepareDistributeDividendResponse, error)

	// PostApiV2PrimaryVaultPrepareRedeemWithBodyWithResponse request with any body
	PostApiV2PrimaryVaultPrepareRedeemWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2PrimaryVaultPrepareRedeemResponse, error)

	PostApiV2PrimaryVaultPrepareRedeemWithResponse(ctx context.Context, body PostApiV2PrimaryVaultPrepareRedeemJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2PrimaryVaultPrepareRedeemResponse, error)

	// PostApiV2PrimaryVaultPrepareWithdrawWithBodyWithResponse request with any body
	PostApiV2PrimaryVaultPrepareWithdrawWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2PrimaryVaultPrepareWithdrawResponse, error)

	PostApiV2PrimaryVaultPrepareWithdrawWithResponse(ctx context.Context, body PostApiV2PrimaryVaultPrepareWithdrawJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2PrimaryVaultPrepareWithdrawResponse, error)

	// PostApiV2TransferPrepareWithBodyWithResponse request with any body
	PostApiV2TransferPrepareWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2TransferPrepareResponse, error)

	PostApiV2TransferPrepareWithResponse(ctx context.Context, body PostApiV2TransferPrepareJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2TransferPrepareResponse, error)

	// PostApiV2TransferSubmitWithBodyWithResponse request with any body
	PostApiV2TransferSubmitWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2TransferSubmitResponse, error)

	PostApiV2TransferSubmitWithResponse(ctx context.Context, body PostApiV2TransferSubmitJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2TransferSubmitResponse, error)
}

type GetApiV1CommonBalanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                 `json:"code,omitempty"`
		Data *ResponseBalanceResp `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1CommonBalanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1CommonBalanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1CommonSubmitTxResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                `json:"code,omitempty"`
		Data *ResponseSubmitResp `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1CommonSubmitTxResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1CommonSubmitTxResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1CommonTxResultResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                  `json:"code,omitempty"`
		Data *ResponseTxResultResp `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1CommonTxResultResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1CommonTxResultResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1PrimaryCreatePoolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                                `json:"code,omitempty"`
		Data *ResponseCreatePoolAndLiquidityResp `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1PrimaryCreatePoolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1PrimaryCreatePoolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1PrimaryPrepareBorrowerWithdrawResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                       `json:"code,omitempty"`
		Data *ResponseRedeemPrepareResp `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1PrimaryPrepareBorrowerWithdrawResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1PrimaryPrepareBorrowerWithdrawResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1PrimaryPrepareDepositResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                        `json:"code,omitempty"`
		Data *ResponseDepositPrepareResp `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1PrimaryPrepareDepositResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1PrimaryPrepareDepositResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1PrimaryPrepareLaunchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                       `json:"code,omitempty"`
		Data *ResponseLaunchPrepareResp `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1PrimaryPrepareLaunchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1PrimaryPrepareLaunchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1PrimaryPrepareLiquidateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                   `json:"code,omitempty"`
		Data *ResponseLiquidateResp `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1PrimaryPrepareLiquidateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1PrimaryPrepareLiquidateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1PrimaryPrepareRedeemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                        `json:"code,omitempty"`
		Data *ResponseReclaimPrepareResp `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1PrimaryPrepareRedeemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1PrimaryPrepareRedeemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1PrimaryPrepareSettleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                     `json:"code,omitempty"`
		Data *EntityFundingOverviewTx `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1PrimaryPrepareSettleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1PrimaryPrepareSettleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1PrimaryPrepareSettleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                `json:"code,omitempty"`
		Data *ResponseSettleResp `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1PrimaryPrepareSettleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1PrimaryPrepareSettleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1SwapPrepareTxResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                     `json:"code,omitempty"`
		Data *ResponseSwapPrepareResp `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1SwapPrepareTxResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1SwapPrepareTxResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1SwapPriceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                   `json:"code,omitempty"`
		Data *ResponseSwapPriceResp `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1SwapPriceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1SwapPriceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV2DeployPrepareResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                       `json:"code,omitempty"`
		Data *ResponseDeployPrepareResp `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV2DeployPrepareResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV2DeployPrepareResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV2DeploySubmitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                      `json:"code,omitempty"`
		Data *ResponseDeploySubmitResp `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV2DeploySubmitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV2DeploySubmitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV2PrimaryVaultPrepareCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                        `json:"code,omitempty"`
		Data *EntityTokenLaunchPrepareTx `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV2PrimaryVaultPrepareCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV2PrimaryVaultPrepareCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV2PrimaryVaultPrepareClaimProfitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                      `json:"code,omitempty"`
		Data *EntityVaultClaimProfitTx `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV2PrimaryVaultPrepareClaimProfitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV2PrimaryVaultPrepareClaimProfitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV2PrimaryVaultPrepareDepositResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                    `json:"code,omitempty"`
		Data *EntityDepositPrepareTx `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV2PrimaryVaultPrepareDepositResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV2PrimaryVaultPrepareDepositResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV2PrimaryVaultPrepareDistributeDividendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                             `json:"code,omitempty"`
		Data *EntityVaultDistributeDividendTx `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV2PrimaryVaultPrepareDistributeDividendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV2PrimaryVaultPrepareDistributeDividendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV2PrimaryVaultPrepareRedeemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                 `json:"code,omitempty"`
		Data *EntityVaultRedeemTx `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV2PrimaryVaultPrepareRedeemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV2PrimaryVaultPrepareRedeemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV2PrimaryVaultPrepareWithdrawResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                     `json:"code,omitempty"`
		Data *EntityWithdrawPrepareTx `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV2PrimaryVaultPrepareWithdrawResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV2PrimaryVaultPrepareWithdrawResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV2TransferPrepareResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                         `json:"code,omitempty"`
		Data *ResponseTransferPrepareResp `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV2TransferPrepareResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV2TransferPrepareResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV2TransferSubmitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code Code is the response code
		// @Description 响应状态码
		Code *int                        `json:"code,omitempty"`
		Data *ResponseTransferSubmitResp `json:"data,omitempty"`

		// Message Message is the response message
		// @Description 响应消息
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV2TransferSubmitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV2TransferSubmitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetApiV1CommonBalanceWithResponse request returning *GetApiV1CommonBalanceResponse
func (c *ClientWithResponses) GetApiV1CommonBalanceWithResponse(ctx context.Context, params *GetApiV1CommonBalanceParams, reqEditors ...RequestEditorFn) (*GetApiV1CommonBalanceResponse, error) {
	rsp, err := c.GetApiV1CommonBalance(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1CommonBalanceResponse(rsp)
}

// PostApiV1CommonSubmitTxWithBodyWithResponse request with arbitrary body returning *PostApiV1CommonSubmitTxResponse
func (c *ClientWithResponses) PostApiV1CommonSubmitTxWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1CommonSubmitTxResponse, error) {
	rsp, err := c.PostApiV1CommonSubmitTxWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1CommonSubmitTxResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1CommonSubmitTxWithResponse(ctx context.Context, body PostApiV1CommonSubmitTxJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1CommonSubmitTxResponse, error) {
	rsp, err := c.PostApiV1CommonSubmitTx(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1CommonSubmitTxResponse(rsp)
}

// GetApiV1CommonTxResultWithResponse request returning *GetApiV1CommonTxResultResponse
func (c *ClientWithResponses) GetApiV1CommonTxResultWithResponse(ctx context.Context, params *GetApiV1CommonTxResultParams, reqEditors ...RequestEditorFn) (*GetApiV1CommonTxResultResponse, error) {
	rsp, err := c.GetApiV1CommonTxResult(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1CommonTxResultResponse(rsp)
}

// PostApiV1PrimaryCreatePoolWithBodyWithResponse request with arbitrary body returning *PostApiV1PrimaryCreatePoolResponse
func (c *ClientWithResponses) PostApiV1PrimaryCreatePoolWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryCreatePoolResponse, error) {
	rsp, err := c.PostApiV1PrimaryCreatePoolWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PrimaryCreatePoolResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1PrimaryCreatePoolWithResponse(ctx context.Context, body PostApiV1PrimaryCreatePoolJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryCreatePoolResponse, error) {
	rsp, err := c.PostApiV1PrimaryCreatePool(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PrimaryCreatePoolResponse(rsp)
}

// PostApiV1PrimaryPrepareBorrowerWithdrawWithBodyWithResponse request with arbitrary body returning *PostApiV1PrimaryPrepareBorrowerWithdrawResponse
func (c *ClientWithResponses) PostApiV1PrimaryPrepareBorrowerWithdrawWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareBorrowerWithdrawResponse, error) {
	rsp, err := c.PostApiV1PrimaryPrepareBorrowerWithdrawWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PrimaryPrepareBorrowerWithdrawResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1PrimaryPrepareBorrowerWithdrawWithResponse(ctx context.Context, body PostApiV1PrimaryPrepareBorrowerWithdrawJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareBorrowerWithdrawResponse, error) {
	rsp, err := c.PostApiV1PrimaryPrepareBorrowerWithdraw(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PrimaryPrepareBorrowerWithdrawResponse(rsp)
}

// PostApiV1PrimaryPrepareDepositWithBodyWithResponse request with arbitrary body returning *PostApiV1PrimaryPrepareDepositResponse
func (c *ClientWithResponses) PostApiV1PrimaryPrepareDepositWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareDepositResponse, error) {
	rsp, err := c.PostApiV1PrimaryPrepareDepositWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PrimaryPrepareDepositResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1PrimaryPrepareDepositWithResponse(ctx context.Context, body PostApiV1PrimaryPrepareDepositJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareDepositResponse, error) {
	rsp, err := c.PostApiV1PrimaryPrepareDeposit(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PrimaryPrepareDepositResponse(rsp)
}

// PostApiV1PrimaryPrepareLaunchWithBodyWithResponse request with arbitrary body returning *PostApiV1PrimaryPrepareLaunchResponse
func (c *ClientWithResponses) PostApiV1PrimaryPrepareLaunchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareLaunchResponse, error) {
	rsp, err := c.PostApiV1PrimaryPrepareLaunchWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PrimaryPrepareLaunchResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1PrimaryPrepareLaunchWithResponse(ctx context.Context, body PostApiV1PrimaryPrepareLaunchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareLaunchResponse, error) {
	rsp, err := c.PostApiV1PrimaryPrepareLaunch(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PrimaryPrepareLaunchResponse(rsp)
}

// PostApiV1PrimaryPrepareLiquidateWithBodyWithResponse request with arbitrary body returning *PostApiV1PrimaryPrepareLiquidateResponse
func (c *ClientWithResponses) PostApiV1PrimaryPrepareLiquidateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareLiquidateResponse, error) {
	rsp, err := c.PostApiV1PrimaryPrepareLiquidateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PrimaryPrepareLiquidateResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1PrimaryPrepareLiquidateWithResponse(ctx context.Context, body PostApiV1PrimaryPrepareLiquidateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareLiquidateResponse, error) {
	rsp, err := c.PostApiV1PrimaryPrepareLiquidate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PrimaryPrepareLiquidateResponse(rsp)
}

// PostApiV1PrimaryPrepareRedeemWithBodyWithResponse request with arbitrary body returning *PostApiV1PrimaryPrepareRedeemResponse
func (c *ClientWithResponses) PostApiV1PrimaryPrepareRedeemWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareRedeemResponse, error) {
	rsp, err := c.PostApiV1PrimaryPrepareRedeemWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PrimaryPrepareRedeemResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1PrimaryPrepareRedeemWithResponse(ctx context.Context, body PostApiV1PrimaryPrepareRedeemJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareRedeemResponse, error) {
	rsp, err := c.PostApiV1PrimaryPrepareRedeem(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PrimaryPrepareRedeemResponse(rsp)
}

// GetApiV1PrimaryPrepareSettleWithBodyWithResponse request with arbitrary body returning *GetApiV1PrimaryPrepareSettleResponse
func (c *ClientWithResponses) GetApiV1PrimaryPrepareSettleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetApiV1PrimaryPrepareSettleResponse, error) {
	rsp, err := c.GetApiV1PrimaryPrepareSettleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1PrimaryPrepareSettleResponse(rsp)
}

func (c *ClientWithResponses) GetApiV1PrimaryPrepareSettleWithResponse(ctx context.Context, body GetApiV1PrimaryPrepareSettleJSONRequestBody, reqEditors ...RequestEditorFn) (*GetApiV1PrimaryPrepareSettleResponse, error) {
	rsp, err := c.GetApiV1PrimaryPrepareSettle(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1PrimaryPrepareSettleResponse(rsp)
}

// PostApiV1PrimaryPrepareSettleWithBodyWithResponse request with arbitrary body returning *PostApiV1PrimaryPrepareSettleResponse
func (c *ClientWithResponses) PostApiV1PrimaryPrepareSettleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareSettleResponse, error) {
	rsp, err := c.PostApiV1PrimaryPrepareSettleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PrimaryPrepareSettleResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1PrimaryPrepareSettleWithResponse(ctx context.Context, body PostApiV1PrimaryPrepareSettleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PrimaryPrepareSettleResponse, error) {
	rsp, err := c.PostApiV1PrimaryPrepareSettle(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PrimaryPrepareSettleResponse(rsp)
}

// PostApiV1SwapPrepareTxWithBodyWithResponse request with arbitrary body returning *PostApiV1SwapPrepareTxResponse
func (c *ClientWithResponses) PostApiV1SwapPrepareTxWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1SwapPrepareTxResponse, error) {
	rsp, err := c.PostApiV1SwapPrepareTxWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1SwapPrepareTxResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1SwapPrepareTxWithResponse(ctx context.Context, body PostApiV1SwapPrepareTxJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1SwapPrepareTxResponse, error) {
	rsp, err := c.PostApiV1SwapPrepareTx(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1SwapPrepareTxResponse(rsp)
}

// GetApiV1SwapPriceWithResponse request returning *GetApiV1SwapPriceResponse
func (c *ClientWithResponses) GetApiV1SwapPriceWithResponse(ctx context.Context, params *GetApiV1SwapPriceParams, reqEditors ...RequestEditorFn) (*GetApiV1SwapPriceResponse, error) {
	rsp, err := c.GetApiV1SwapPrice(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1SwapPriceResponse(rsp)
}

// PostApiV2DeployPrepareWithBodyWithResponse request with arbitrary body returning *PostApiV2DeployPrepareResponse
func (c *ClientWithResponses) PostApiV2DeployPrepareWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2DeployPrepareResponse, error) {
	rsp, err := c.PostApiV2DeployPrepareWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2DeployPrepareResponse(rsp)
}

func (c *ClientWithResponses) PostApiV2DeployPrepareWithResponse(ctx context.Context, body PostApiV2DeployPrepareJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2DeployPrepareResponse, error) {
	rsp, err := c.PostApiV2DeployPrepare(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2DeployPrepareResponse(rsp)
}

// PostApiV2DeploySubmitWithBodyWithResponse request with arbitrary body returning *PostApiV2DeploySubmitResponse
func (c *ClientWithResponses) PostApiV2DeploySubmitWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2DeploySubmitResponse, error) {
	rsp, err := c.PostApiV2DeploySubmitWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2DeploySubmitResponse(rsp)
}

func (c *ClientWithResponses) PostApiV2DeploySubmitWithResponse(ctx context.Context, body PostApiV2DeploySubmitJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2DeploySubmitResponse, error) {
	rsp, err := c.PostApiV2DeploySubmit(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2DeploySubmitResponse(rsp)
}

// PostApiV2PrimaryVaultPrepareCreateWithBodyWithResponse request with arbitrary body returning *PostApiV2PrimaryVaultPrepareCreateResponse
func (c *ClientWithResponses) PostApiV2PrimaryVaultPrepareCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2PrimaryVaultPrepareCreateResponse, error) {
	rsp, err := c.PostApiV2PrimaryVaultPrepareCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2PrimaryVaultPrepareCreateResponse(rsp)
}

func (c *ClientWithResponses) PostApiV2PrimaryVaultPrepareCreateWithResponse(ctx context.Context, body PostApiV2PrimaryVaultPrepareCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2PrimaryVaultPrepareCreateResponse, error) {
	rsp, err := c.PostApiV2PrimaryVaultPrepareCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2PrimaryVaultPrepareCreateResponse(rsp)
}

// PostApiV2PrimaryVaultPrepareClaimProfitWithBodyWithResponse request with arbitrary body returning *PostApiV2PrimaryVaultPrepareClaimProfitResponse
func (c *ClientWithResponses) PostApiV2PrimaryVaultPrepareClaimProfitWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2PrimaryVaultPrepareClaimProfitResponse, error) {
	rsp, err := c.PostApiV2PrimaryVaultPrepareClaimProfitWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2PrimaryVaultPrepareClaimProfitResponse(rsp)
}

func (c *ClientWithResponses) PostApiV2PrimaryVaultPrepareClaimProfitWithResponse(ctx context.Context, body PostApiV2PrimaryVaultPrepareClaimProfitJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2PrimaryVaultPrepareClaimProfitResponse, error) {
	rsp, err := c.PostApiV2PrimaryVaultPrepareClaimProfit(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2PrimaryVaultPrepareClaimProfitResponse(rsp)
}

// PostApiV2PrimaryVaultPrepareDepositWithBodyWithResponse request with arbitrary body returning *PostApiV2PrimaryVaultPrepareDepositResponse
func (c *ClientWithResponses) PostApiV2PrimaryVaultPrepareDepositWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2PrimaryVaultPrepareDepositResponse, error) {
	rsp, err := c.PostApiV2PrimaryVaultPrepareDepositWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2PrimaryVaultPrepareDepositResponse(rsp)
}

func (c *ClientWithResponses) PostApiV2PrimaryVaultPrepareDepositWithResponse(ctx context.Context, body PostApiV2PrimaryVaultPrepareDepositJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2PrimaryVaultPrepareDepositResponse, error) {
	rsp, err := c.PostApiV2PrimaryVaultPrepareDeposit(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2PrimaryVaultPrepareDepositResponse(rsp)
}

// PostApiV2PrimaryVaultPrepareDistributeDividendWithBodyWithResponse request with arbitrary body returning *PostApiV2PrimaryVaultPrepareDistributeDividendResponse
func (c *ClientWithResponses) PostApiV2PrimaryVaultPrepareDistributeDividendWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2PrimaryVaultPrepareDistributeDividendResponse, error) {
	rsp, err := c.PostApiV2PrimaryVaultPrepareDistributeDividendWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2PrimaryVaultPrepareDistributeDividendResponse(rsp)
}

func (c *ClientWithResponses) PostApiV2PrimaryVaultPrepareDistributeDividendWithResponse(ctx context.Context, body PostApiV2PrimaryVaultPrepareDistributeDividendJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2PrimaryVaultPrepareDistributeDividendResponse, error) {
	rsp, err := c.PostApiV2PrimaryVaultPrepareDistributeDividend(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2PrimaryVaultPrepareDistributeDividendResponse(rsp)
}

// PostApiV2PrimaryVaultPrepareRedeemWithBodyWithResponse request with arbitrary body returning *PostApiV2PrimaryVaultPrepareRedeemResponse
func (c *ClientWithResponses) PostApiV2PrimaryVaultPrepareRedeemWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2PrimaryVaultPrepareRedeemResponse, error) {
	rsp, err := c.PostApiV2PrimaryVaultPrepareRedeemWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2PrimaryVaultPrepareRedeemResponse(rsp)
}

func (c *ClientWithResponses) PostApiV2PrimaryVaultPrepareRedeemWithResponse(ctx context.Context, body PostApiV2PrimaryVaultPrepareRedeemJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2PrimaryVaultPrepareRedeemResponse, error) {
	rsp, err := c.PostApiV2PrimaryVaultPrepareRedeem(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2PrimaryVaultPrepareRedeemResponse(rsp)
}

// PostApiV2PrimaryVaultPrepareWithdrawWithBodyWithResponse request with arbitrary body returning *PostApiV2PrimaryVaultPrepareWithdrawResponse
func (c *ClientWithResponses) PostApiV2PrimaryVaultPrepareWithdrawWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2PrimaryVaultPrepareWithdrawResponse, error) {
	rsp, err := c.PostApiV2PrimaryVaultPrepareWithdrawWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2PrimaryVaultPrepareWithdrawResponse(rsp)
}

func (c *ClientWithResponses) PostApiV2PrimaryVaultPrepareWithdrawWithResponse(ctx context.Context, body PostApiV2PrimaryVaultPrepareWithdrawJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2PrimaryVaultPrepareWithdrawResponse, error) {
	rsp, err := c.PostApiV2PrimaryVaultPrepareWithdraw(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2PrimaryVaultPrepareWithdrawResponse(rsp)
}

// PostApiV2TransferPrepareWithBodyWithResponse request with arbitrary body returning *PostApiV2TransferPrepareResponse
func (c *ClientWithResponses) PostApiV2TransferPrepareWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2TransferPrepareResponse, error) {
	rsp, err := c.PostApiV2TransferPrepareWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2TransferPrepareResponse(rsp)
}

func (c *ClientWithResponses) PostApiV2TransferPrepareWithResponse(ctx context.Context, body PostApiV2TransferPrepareJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2TransferPrepareResponse, error) {
	rsp, err := c.PostApiV2TransferPrepare(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2TransferPrepareResponse(rsp)
}

// PostApiV2TransferSubmitWithBodyWithResponse request with arbitrary body returning *PostApiV2TransferSubmitResponse
func (c *ClientWithResponses) PostApiV2TransferSubmitWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2TransferSubmitResponse, error) {
	rsp, err := c.PostApiV2TransferSubmitWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2TransferSubmitResponse(rsp)
}

func (c *ClientWithResponses) PostApiV2TransferSubmitWithResponse(ctx context.Context, body PostApiV2TransferSubmitJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2TransferSubmitResponse, error) {
	rsp, err := c.PostApiV2TransferSubmit(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2TransferSubmitResponse(rsp)
}

// ParseGetApiV1CommonBalanceResponse parses an HTTP response from a GetApiV1CommonBalanceWithResponse call
func ParseGetApiV1CommonBalanceResponse(rsp *http.Response) (*GetApiV1CommonBalanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1CommonBalanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                 `json:"code,omitempty"`
			Data *ResponseBalanceResp `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1CommonSubmitTxResponse parses an HTTP response from a PostApiV1CommonSubmitTxWithResponse call
func ParsePostApiV1CommonSubmitTxResponse(rsp *http.Response) (*PostApiV1CommonSubmitTxResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1CommonSubmitTxResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                `json:"code,omitempty"`
			Data *ResponseSubmitResp `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1CommonTxResultResponse parses an HTTP response from a GetApiV1CommonTxResultWithResponse call
func ParseGetApiV1CommonTxResultResponse(rsp *http.Response) (*GetApiV1CommonTxResultResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1CommonTxResultResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                  `json:"code,omitempty"`
			Data *ResponseTxResultResp `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1PrimaryCreatePoolResponse parses an HTTP response from a PostApiV1PrimaryCreatePoolWithResponse call
func ParsePostApiV1PrimaryCreatePoolResponse(rsp *http.Response) (*PostApiV1PrimaryCreatePoolResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1PrimaryCreatePoolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                                `json:"code,omitempty"`
			Data *ResponseCreatePoolAndLiquidityResp `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1PrimaryPrepareBorrowerWithdrawResponse parses an HTTP response from a PostApiV1PrimaryPrepareBorrowerWithdrawWithResponse call
func ParsePostApiV1PrimaryPrepareBorrowerWithdrawResponse(rsp *http.Response) (*PostApiV1PrimaryPrepareBorrowerWithdrawResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1PrimaryPrepareBorrowerWithdrawResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                       `json:"code,omitempty"`
			Data *ResponseRedeemPrepareResp `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1PrimaryPrepareDepositResponse parses an HTTP response from a PostApiV1PrimaryPrepareDepositWithResponse call
func ParsePostApiV1PrimaryPrepareDepositResponse(rsp *http.Response) (*PostApiV1PrimaryPrepareDepositResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1PrimaryPrepareDepositResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                        `json:"code,omitempty"`
			Data *ResponseDepositPrepareResp `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1PrimaryPrepareLaunchResponse parses an HTTP response from a PostApiV1PrimaryPrepareLaunchWithResponse call
func ParsePostApiV1PrimaryPrepareLaunchResponse(rsp *http.Response) (*PostApiV1PrimaryPrepareLaunchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1PrimaryPrepareLaunchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                       `json:"code,omitempty"`
			Data *ResponseLaunchPrepareResp `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1PrimaryPrepareLiquidateResponse parses an HTTP response from a PostApiV1PrimaryPrepareLiquidateWithResponse call
func ParsePostApiV1PrimaryPrepareLiquidateResponse(rsp *http.Response) (*PostApiV1PrimaryPrepareLiquidateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1PrimaryPrepareLiquidateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                   `json:"code,omitempty"`
			Data *ResponseLiquidateResp `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1PrimaryPrepareRedeemResponse parses an HTTP response from a PostApiV1PrimaryPrepareRedeemWithResponse call
func ParsePostApiV1PrimaryPrepareRedeemResponse(rsp *http.Response) (*PostApiV1PrimaryPrepareRedeemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1PrimaryPrepareRedeemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                        `json:"code,omitempty"`
			Data *ResponseReclaimPrepareResp `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1PrimaryPrepareSettleResponse parses an HTTP response from a GetApiV1PrimaryPrepareSettleWithResponse call
func ParseGetApiV1PrimaryPrepareSettleResponse(rsp *http.Response) (*GetApiV1PrimaryPrepareSettleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1PrimaryPrepareSettleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                     `json:"code,omitempty"`
			Data *EntityFundingOverviewTx `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1PrimaryPrepareSettleResponse parses an HTTP response from a PostApiV1PrimaryPrepareSettleWithResponse call
func ParsePostApiV1PrimaryPrepareSettleResponse(rsp *http.Response) (*PostApiV1PrimaryPrepareSettleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1PrimaryPrepareSettleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                `json:"code,omitempty"`
			Data *ResponseSettleResp `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1SwapPrepareTxResponse parses an HTTP response from a PostApiV1SwapPrepareTxWithResponse call
func ParsePostApiV1SwapPrepareTxResponse(rsp *http.Response) (*PostApiV1SwapPrepareTxResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1SwapPrepareTxResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                     `json:"code,omitempty"`
			Data *ResponseSwapPrepareResp `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1SwapPriceResponse parses an HTTP response from a GetApiV1SwapPriceWithResponse call
func ParseGetApiV1SwapPriceResponse(rsp *http.Response) (*GetApiV1SwapPriceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1SwapPriceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                   `json:"code,omitempty"`
			Data *ResponseSwapPriceResp `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV2DeployPrepareResponse parses an HTTP response from a PostApiV2DeployPrepareWithResponse call
func ParsePostApiV2DeployPrepareResponse(rsp *http.Response) (*PostApiV2DeployPrepareResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV2DeployPrepareResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                       `json:"code,omitempty"`
			Data *ResponseDeployPrepareResp `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV2DeploySubmitResponse parses an HTTP response from a PostApiV2DeploySubmitWithResponse call
func ParsePostApiV2DeploySubmitResponse(rsp *http.Response) (*PostApiV2DeploySubmitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV2DeploySubmitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                      `json:"code,omitempty"`
			Data *ResponseDeploySubmitResp `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV2PrimaryVaultPrepareCreateResponse parses an HTTP response from a PostApiV2PrimaryVaultPrepareCreateWithResponse call
func ParsePostApiV2PrimaryVaultPrepareCreateResponse(rsp *http.Response) (*PostApiV2PrimaryVaultPrepareCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV2PrimaryVaultPrepareCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                        `json:"code,omitempty"`
			Data *EntityTokenLaunchPrepareTx `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV2PrimaryVaultPrepareClaimProfitResponse parses an HTTP response from a PostApiV2PrimaryVaultPrepareClaimProfitWithResponse call
func ParsePostApiV2PrimaryVaultPrepareClaimProfitResponse(rsp *http.Response) (*PostApiV2PrimaryVaultPrepareClaimProfitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV2PrimaryVaultPrepareClaimProfitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                      `json:"code,omitempty"`
			Data *EntityVaultClaimProfitTx `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV2PrimaryVaultPrepareDepositResponse parses an HTTP response from a PostApiV2PrimaryVaultPrepareDepositWithResponse call
func ParsePostApiV2PrimaryVaultPrepareDepositResponse(rsp *http.Response) (*PostApiV2PrimaryVaultPrepareDepositResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV2PrimaryVaultPrepareDepositResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                    `json:"code,omitempty"`
			Data *EntityDepositPrepareTx `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV2PrimaryVaultPrepareDistributeDividendResponse parses an HTTP response from a PostApiV2PrimaryVaultPrepareDistributeDividendWithResponse call
func ParsePostApiV2PrimaryVaultPrepareDistributeDividendResponse(rsp *http.Response) (*PostApiV2PrimaryVaultPrepareDistributeDividendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV2PrimaryVaultPrepareDistributeDividendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                             `json:"code,omitempty"`
			Data *EntityVaultDistributeDividendTx `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV2PrimaryVaultPrepareRedeemResponse parses an HTTP response from a PostApiV2PrimaryVaultPrepareRedeemWithResponse call
func ParsePostApiV2PrimaryVaultPrepareRedeemResponse(rsp *http.Response) (*PostApiV2PrimaryVaultPrepareRedeemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV2PrimaryVaultPrepareRedeemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                 `json:"code,omitempty"`
			Data *EntityVaultRedeemTx `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV2PrimaryVaultPrepareWithdrawResponse parses an HTTP response from a PostApiV2PrimaryVaultPrepareWithdrawWithResponse call
func ParsePostApiV2PrimaryVaultPrepareWithdrawResponse(rsp *http.Response) (*PostApiV2PrimaryVaultPrepareWithdrawResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV2PrimaryVaultPrepareWithdrawResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                     `json:"code,omitempty"`
			Data *EntityWithdrawPrepareTx `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV2TransferPrepareResponse parses an HTTP response from a PostApiV2TransferPrepareWithResponse call
func ParsePostApiV2TransferPrepareResponse(rsp *http.Response) (*PostApiV2TransferPrepareResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV2TransferPrepareResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                         `json:"code,omitempty"`
			Data *ResponseTransferPrepareResp `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV2TransferSubmitResponse parses an HTTP response from a PostApiV2TransferSubmitWithResponse call
func ParsePostApiV2TransferSubmitResponse(rsp *http.Response) (*PostApiV2TransferSubmitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV2TransferSubmitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code Code is the response code
			// @Description 响应状态码
			Code *int                        `json:"code,omitempty"`
			Data *ResponseTransferSubmitResp `json:"data,omitempty"`

			// Message Message is the response message
			// @Description 响应消息
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xde08byZb/KlbvrpRIHtswc+dG/HUZyN1Em8xEgdxdKYmswi7svtf9mO5qHjtCggwE",
	"JoFABvImz01INEoCySaEGMN8GXe3+YuvcNVV3XY/qtptYzNcwl8hdvepU+f86tR5VfknLiMJsiRCEalc",
	"10+cmslDAeA/B/hc4rSIrD/RqAy5Lk4a+DvMIG4sbr0kSGKiW+bPQ1W2HslCNaPwMuIlkevius+dNp5M",
	"69NX9cU5vbhkPCnppXkuzsmKJEMF8RCPkJGyMPhuj5SFMV6NoTyMKVCVJVGFMevRS+JfemtPxghp89q6",
	"MT5hPpng4hwcAYJcgFxXRyqV6ow7bPMigjmoWHxnAQLBEXsBAoERrUepIxq31oy5txY1AaoqyFGmcJZ8",
	"EaBpv0Anuz5jTKy6Z8FBRZGUmAJ/1KCKYjJQgAARVLjqzFSk8GKOGxuLM1XUkwe8eLrX4hGKmsB1XeQ6",
	"UqkO7rKfSJwb+cp64qshoIhAsDR0kev74Uz3993c5bE4B0XEo9FE78n/SZ8rADQoKYKb6HkwmuU1gYs7",
	"f8V6zpw9G3GYXjhSe7/2nzQh4RocypLKo3MKlIEC+0csBnyQsqab5rPW3/+uwEGui/u3ZA3iSRvfSQfc",
	"WFAiUkAGpS12XGh3hBvnBhUJz5VHUFBdT7iAZX8CFAWMWv/PATVd4AUe0R+3vpYVPgMb4DMP1DyVPVES",
	"M5A+jgKG02gknYcj1DfRSNpZEWFMWO+piX4FiCrIYIhTEWcr6a+amOXF3A9DUBni4fCRlg6klvqlf0Dx",
	"DNDETP5oOR1kRf0NaAXUUwC8cE6RBnl0pKaDq6Ze3hplQEOwlx/is1DMHmnr4GrrPMxCKBxp6EBq6L95",
	"lM8qYPhoczqQWrKDksR3kqJIw1Bx1HUe/hhUFBAkjQSS3jDJmF/Q528bt9Z2nj3kaOFaVA37Yp2xODdk",
	"LfA0yGYVqKrBkfHX+vKa/nA8GE3FuWF7NlChMm283i4Xi9QwzJILr8CsFdXY03ZNw8+XZ6TLIWLuUSBA",
	"8JwkFbrF7Bn+R43P8miUKuw/Rma+qTNnHDbJXigXpFF7wdPn5l6+FBYrKxM7P78yt96b9yf1hRmzuKIv",
	"zJkv1/SZO5Wnr9yx9UUOi9R67XI8sNhdq8a31i3zwBYRGbwyPlUVUy2YT410dH79TSKRqC887yx9g9aX",
	"YJ82IPCIKkCVz4kwm0YjFOb1T+/NN9uWwO5PkomUi8+Nu4tV4VWlFAYrh5U+PBJhSICi5bYGxOmbt4u5",
	"OpOUVMb8mJbm2q3Kx8mdZw+PlTdfYERWHs1VPk5WPrzUNyYqb5+WNz8db7EJ4sUhqCJJYXFTLhbZFqiF",
	"a5Fmhqq8NbI+/8qLQMzwYu68VoBB2cORDFTV9KAmZhXAq7yYSyvWCksPyLSluj6lX39srC6Vt69bD9Bk",
	"P+gMmM5oigLFzCjmk0LMpUy2TGvkshBkC7zI2Ehrz6kIKCiNeIHxpGDJE4vSgnh6AKgwHWSaAoDlcX1t",
	"vgpK6uSxyxCdZBDPVKoIKDmI0gQT0ambD94aT6bJGHSGfaBjqS6yzOoJIOpUIgP6tDgoBUGdhRleAAU1",
	"LWgFxMsFnuYSmO+39eKKPj5n3FqLx8rb1/WVK7ul2fLW7+bSq5P9p4jcdkuz+to74+5q7BLXcYmLx8j3",
	"F/p6+6kP0CC8pzUW03gRfftN+NJo40qjUTJmfjPePDPurO/c+RDD7B0j/zFm/v94zHz5q1l8Wf1Af3PH",
	"fL1S3nhfx1p4ly1tWL00rr+83pphSbozrcAM5IcgU2bGjRfG0jpbZgIQQQ6mByGkK9N8+9RcuFr58NnS",
	"pLG6pK9c6fwPAhn96r3YJa4zlaKDxkWZzWSVfF0+W2PzbDDulmZjHalU7EI8RiZyietgzUPNAwXWQikv",
	"+fLm1s6zh+XNT8aTUjyWSnRUKcYucZe4VKLD+odKVhpE6QygVLEqW6s7T9c7UuWN6XgMM5Zi8dYau2oL",
	"JW7rtyPlHZo6dusNb1UgLbGx3mrAIQtZSCgGEGz3vNrAO0l/HZSA/dB5y30QoQJsTLy31nam5w9QJqTh",
	"hEaoQIIRYXiATwlRXTE91ZQ7EaSTBWNEuCSwNe9P6nMT+tSbyu8P9Jn1ytNX5vNiY9E55x8zVADsuLx5",
	"9apQzDLSVOXi89BVY3Fu8W2Z9W+/oWxOLlmVtxarblCMvGCWbpO2C1qqUVBzTLr69hQhbXdSNGCZ7dkG",
	"ePePGaqGYSCHJZlYq1N/c1efeuFfo7VZ78X2yRpKCzx71PLm/4U63NbeLmnORk1JTN1b0GfWiQumz6/q",
	"UzeNuWf6dNG8P8mekKShEL5cJOpxJ7v6RcIkQ2sx8UB8/w1/VQABGXvl45qkC6XRjaOrHN9iA1Hz1xSt",
	"AKs1AFAo/DDIdV2Mls3zpn7GLsepIU7596fGxGot5MB+ZnMDYnmcxVQow5FgpTYcsp5OCxCBPQ0HEaAM",
	"honrUz8Ta+UMyrZRNIEHJRJkui48bHEEsDFg12DYMfaCfu2xvnDDWu3s6oU1b2tvphHS529Wns4yXiNT",
	"Y8aU+s27dRdfdQouJmqE60sGEqV75UIE7GRwrE8EMMILmsB1dZygJsfwC8zSIPlaHRUGpELIA5rC1/fY",
	"fbx5xvaN5KYbKgkFiOogVJrZ2ypbrysfVnambxLHvla16EilEn9K1dvufJvN4vbpXk87JjVv4hQ1qGjb",
	"GZ8wbn9urIxiCYpBkSQ1WBT/9O2fTzApWqKnE7W3PeKTYrrH9PnVnfFfjvvop77+tmegN3QE8jF9BPPd",
	"pv7o+rGT/aeSF/p6+73UT/afamprq4m/JjYPM1GgFtGjbQYeUV15y/3AHqr1mE/snYMnItXbXP5lZGfe",
	"35bVdBwdkpU9iqZ94sZV8Bb7R1AEAwWYHs7zCBZ4laatu6v6wopeGtcXVs17W/rCnD53qzb1AUkqQCC2",
	"x9fCVYl98LewfM9WqRz5XLZI2lZsPlr2kZd9sKuyMXV82DYmVttobK1NAyBNgayxyU7VlNRqtOuKybV6",
	"KWVMlmdfbVmhyYRXVW1fwoHwlquGwhifUF3hhD2bGoeR269c7aJH+fJ2LvU9txG2ZYG3sZmwnq7a0VJI",
	"DqMlvgMFIGagc4DPl1MgX1LDXLcgg0nDYZGRq6uFUsyaFptZVgMkjfdA+rlOKB4hc2xz4etQpA2uiWE9",
	"dsbyby3psbP5uWAPVrfNrt6UnECONiMFqloBMbsdzc1F49FykxOoMX4ej9IU867X2QWlOj2bZFtxx/JU",
	"E7K38hQ+z0nhYOleZXWVOLm7pRl95YrxaNlY/mW39Au1bIMA0tjqwOdhGVUZp63cl2UgEFyc0Tdmo50t",
	"dSvAdSBzv5ej5/gafXCgqpCk6BlJHPxAzM7hB2RGXkcKBKqmjIaScB6ikckVpAFQSGckcZDPsZJeU6/0",
	"d+M7U3PmlhPw7KG0xqZQ2y4a3snsVzWUD3s/Zj3Afj1EF+R1li7I63V0QUiwdbEHsNVaPfYX5edhhqSZ",
	"/pA1RrzeP2jwPlxIsx2VnjwQaeUPESB+CKZtjyWdqT7mWxo3HptLj0lGtbx1b+fZQ33+rj57m+qX2zTd",
	"tQM2NXcWn1FTqMdckK0mN1ScVPEKrLEt1Wlb2WdFh/gfg4AvwKxFiupWkmIrRcJRs1EhWAsmpuy9Ehco",
	"KuNTbo3tlmbtb5+/q3x4YdxZL28URb6AmdQyGa/X68oaujbmRvZeTx/DPqsLD82zggdvP0Mwq1D92tWv",
	"UK/7IOx7dtvDs8nK26fuhgfj4Ytqz8Mx/dP7yvjPlXs3FXLfhPHLdXPzTeXDZ/3XWWPzpnnl83FqOwO9",
	"A9VcuFp5WyxvXCtvjJc3ftPnbpW3LD8fT1efXy1vvrDZeH5fX7tJ+Ld42Ln33PpuYbIy/ZtjSywwbcwR",
	"7kLZEjVhwK6YFHhZBjlG+7Cx/Np4/ZQAlIilXHxpLj22pIFpHhuQ1eP0xn42ECjmhhVKsm0f1Ri7q9Is",
	"IxzB8NKbV8IbVsJn7K+y0hZA/eJX0EV0HyL1vvOfQCX9O9R5eo6XBl4kDdG0AasnSb3vfG99rI+XGDJl",
	"tTCznUbXuVOaKSUZ/t3STB6OkI4yRtgzBAoaZFEhlevd0szJ/lO7pVl99XO5eOPk+Z7OFKlslzeKKSrd",
	"SLoO253aEVX1j5Bwtrn9sA1bDTXP0OrmzbaugNixYcgfb2Ad2OorzuvzjJNUjMp0NcXTaJNpQPzBo9jB",
	"q7iwA5TRFB6N9lkeDdFEt8z/FxzttuKw4NVcGspLCv+/+PBrDFtJnLLlurg8BKRvjSiQc7503EdMlRsb",
	"w3s4OS1l6RxksMqgAPiC89ZXUMzxIvxLzvowkZEEH1X7+1j3udOxPk2WJcWK+TTFIpBHSO5KJjs6/5xI",
	"JVKJjq4TqROppGo/NeZ3yfrzvBrj1RiIqbj2H1OhMgSVmGcc8lmCi3MFPgNFFZLIATPULYNMHsY6Eyk/",
	"C8PDwwmAv01ISi5pv6omz5zuOfl938mvOhOpRB4J2MVDUBHUHwb7oDKEoejQUIdBLgeVBC8l8SNJS6A8",
	"KtBEwcW5IaioZF4diRT2c2QoApnnurivLXFwcU4GKI/VnAQynxzqsDPWSVfONgdpTT43Punzt/GYZM/l",
	"MHV8gEw8nbWWC0TdMv+3jh5M0N7X8Yj21WMq9qcxWH7UIA6wbSG6EtI1pxIpGozbd8rVv4FsrM4VZIH5",
	"fFgxZj5Vdx4aVyQbHcZSYB3+RC1F40HiJOrDnxh3nuwsj1c+Xid7JW1wb8I7bNDLNVuLFduZSjmLyy7n",
	"AVku8BmsqeTfVWIKavSihTq+S/usqfqqhBHuh6CWDyjm6zI2EzRPjySMXTV9VRMEoIwyEIpATiV99xb3",
	"3GXrDR/wVbw/pxHZkyQVsdvhLZMcgP05SXXjnmz3/SNctTj1nZQdbUghkU7IV5unKKJy81tZ/WS8uxJA",
	"8di/IGhcnlREzLgFQZDjw4xPsxHggkbSSrVcEGIpPYOGm0rHYztAtpJqkWz3rxGD+K9omzwOdFTj5NJ2",
	"iHHygSIMbrLCW68mM7h2mZYl0jZMN1Dm5j2SfZ95oG8WjXdP9DcL+ud1C93bD4yPE/q1V8b4S7bpOkcG",
	"q9VJ22y92DfSMGV7iOxYSDk6ql1zVYLtI1Y00EWGhQNEG3RpASj/gIgOSJnkLtJO133aaRlgw9PXgkP6",
	"b+qi0U6S+C+JajM0aXdSfQmgDJZqWotFFgaagV6WFI7ZgCtvjJvFl/rGFX25SLpkoqLNrkm3GWSuxtAv",
	"AVuUQn9rwUXVdzPIKuCmADawSDyHGxijIor0GbQZUL4TgF8CqIL9G63FlFfVTYHJKfqHRJYbU+bbO5Gh",
	"VCXYXjR5Lqb4IrDkac9oLY6qKm4GQgrelUPw47SAVj7e0B88igokstm3GUW1lucvw38KNNq0GEcBVTcD",
	"KBV3aDBzF8bjF5XVZzuL2+WNa7bH9vOUfvUjM4PhxRXp/2gzriiXAh1igDF/F6HF6GIrngmzODMbsdjA",
	"prYvmKndp/Ml2CJXG1arEwqL0fcydRjIVbsTll43lx4bMwteFmbN4st6CXdXD1P78+3ee1++CBT5WsSa",
	"glJNj3RA1VO9AzQLTFR48XVrlqSGX+1ppu9j1aa0aEn46lGahmqDByqdjzvLzvIi6q01QgW4dzVyhVBx",
	"brHZszBIW9uemfLerbNnrlyX89RXUdSfshpr6reswnvuacz7D3gd7tqNt7c0avHGbSCoZRuvBWHZpM4k",
	"OS/qbHohYduTz8bcW5KHp942v1uaDZpG95kv5q7Y6Tlm1v48pvfSfYp07SNS01f159OHK6fpO80XdX/E",
	"KXBP8xVm3d12dfGytfpqMCTSIzDxocABI4EeFY6kw6FeewP7Bv81fbaoP7yzs7htbt00N5frYY/U6fcF",
	"eqFtEGQWZHaHDnlNNEM0AbxwaNSBn5N7wFuQYxS/IgVtNhrJlhaeYu+0Q0h87Nteg6Sq2mbU+W6SOfx5",
	"B+ov/bU2qPQqvH5kyQBWGuff0jK+UClCxhQ/HjOW1s0H1xoDWu3epn1Bm/eaqMMPOcpvFrYpk+qDQPPQ",
	"a6IgHdcXbmIiderTNATuT5Haf4XR4Ude4BeC212lDoJgDxisXnSUzto3HYVYQXy1UGOgC1yktC/4o17f",
	"9IUYQeovgrbYFjpAaB54rapR0kC3L4VK3wVNXwi4qj9g+seXKVnIqt9Z6LogL2p7IQ1m+9RbGLil6vBD",
	"LfhLrG0IHprvLexMIvuYZoSk3aPJnfEn5EioeX/Sd1RvtzRrLK0asxMn+0/pv85e6OvtZ0PQdw643c1h",
	"wbudKQInEzt0eTrakesmIGifBGYD0RYcfswFPQdeDNA1nppzMxJMzTWFwn3J1wVvfWZi8NBl7ChHwSNC",
	"0KNtchqcdoApFHY436cMOeVMckY1mSxIGVDISyrqOpE60WlXVS0u/hkAAP//tMrjhdaHAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
