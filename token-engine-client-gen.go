// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package client

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// Defines values for EntityDEXPlatform.
const (
	DexRaydium     EntityDEXPlatform = "Raydium"
	DexRaydiumCLMM EntityDEXPlatform = "Raydium CLMM"
)

// Defines values for GetSwapPriceParamsPlatform.
const (
	Raydium     GetSwapPriceParamsPlatform = "Raydium"
	RaydiumCLMM GetSwapPriceParamsPlatform = "Raydium CLMM"
)

// EntityDEXPlatform defines model for entity.DEX_Platform.
type EntityDEXPlatform string

// RequestSwapPrepareReq defines model for request.SwapPrepareReq.
type RequestSwapPrepareReq struct {
	Amount      string            `json:"amount"`
	ChainId     string            `json:"chain_id"`
	InputMint   string            `json:"input_mint"`
	OutputMint  string            `json:"output_mint"`
	Platform    EntityDEXPlatform `json:"platform"`
	Sender      string            `json:"sender"`
	SlippageBps *int              `json:"slippage_bps,omitempty"`
}

// RequestSwapSubmitReq defines model for request.SwapSubmitReq.
type RequestSwapSubmitReq struct {
	ChainId     string `json:"chain_id"`
	Sender      string `json:"sender"`
	Signature   string `json:"signature"`
	TxMsgBase64 string `json:"tx_msg_base64"`
}

// ResponseBalanceResp defines model for response.BalanceResp.
type ResponseBalanceResp struct {
	Balance      *string `json:"balance,omitempty"`
	ChainId      *string `json:"chain_id,omitempty"`
	Owner        *string `json:"owner,omitempty"`
	TokenAddress *string `json:"token_address,omitempty"`
}

// ResponseSwapPrepareResp defines model for response.SwapPrepareResp.
type ResponseSwapPrepareResp struct {
	TxMsgBase64 string `json:"tx_msg_base64"`
}

// ResponseSwapPriceResp defines model for response.SwapPriceResp.
type ResponseSwapPriceResp struct {
	InputMint        *string  `json:"input_mint,omitempty"`
	InputMintAmount  *string  `json:"input_mint_amount,omitempty"`
	OutputMint       *string  `json:"output_mint,omitempty"`
	OutputMintAmount *string  `json:"output_mint_amount,omitempty"`
	Price            *float32 `json:"price,omitempty"`
}

// ResponseSwapSubmitResp defines model for response.SwapSubmitResp.
type ResponseSwapSubmitResp struct {
	TxHash *string `json:"tx_hash,omitempty"`
}

// ResponseTxResultResp defines model for response.TxResultResp.
type ResponseTxResultResp struct {
	Success *bool   `json:"success,omitempty"`
	TxHash  *string `json:"tx_hash,omitempty"`
}

// GetCommonBalanceParams defines parameters for GetCommonBalance.
type GetCommonBalanceParams struct {
	ChainId      string `form:"chain_id" json:"chain_id"`
	Owner        string `form:"owner" json:"owner"`
	TokenAddress string `form:"token_address" json:"token_address"`
}

// GetCommonTxResultParams defines parameters for GetCommonTxResult.
type GetCommonTxResultParams struct {
	ChainId string `form:"chain_id" json:"chain_id"`
	TxHash  string `form:"tx_hash" json:"tx_hash"`
}

// GetKeyGetParams defines parameters for GetKeyGet.
type GetKeyGetParams struct {
	AppId string `form:"app_id" json:"app_id"`
	Sign  string `form:"sign" json:"sign"`
	Ts    int    `form:"ts" json:"ts"`
}

// GetSwapPriceParams defines parameters for GetSwapPrice.
type GetSwapPriceParams struct {
	Amount             string                     `form:"amount" json:"amount"`
	ChainId            string                     `form:"chain_id" json:"chain_id"`
	InputMint          string                     `form:"input_mint" json:"input_mint"`
	InputMintDecimals  int                        `form:"input_mint_decimals" json:"input_mint_decimals"`
	OutputMint         string                     `form:"output_mint" json:"output_mint"`
	OutputMintDecimals int                        `form:"output_mint_decimals" json:"output_mint_decimals"`
	Platform           GetSwapPriceParamsPlatform `form:"platform" json:"platform"`
}

// GetSwapPriceParamsPlatform defines parameters for GetSwapPrice.
type GetSwapPriceParamsPlatform string

// PostCommonSubmitTxJSONRequestBody defines body for PostCommonSubmitTx for application/json ContentType.
type PostCommonSubmitTxJSONRequestBody = RequestSwapSubmitReq

// PostSwapPrepareTxJSONRequestBody defines body for PostSwapPrepareTx for application/json ContentType.
type PostSwapPrepareTxJSONRequestBody = RequestSwapPrepareReq

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetCommonBalance request
	GetCommonBalance(ctx context.Context, params *GetCommonBalanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCommonSubmitTxWithBody request with any body
	PostCommonSubmitTxWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCommonSubmitTx(ctx context.Context, body PostCommonSubmitTxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCommonTxResult request
	GetCommonTxResult(ctx context.Context, params *GetCommonTxResultParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKeyGet request
	GetKeyGet(ctx context.Context, params *GetKeyGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSwapPrepareTxWithBody request with any body
	PostSwapPrepareTxWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSwapPrepareTx(ctx context.Context, body PostSwapPrepareTxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSwapPrice request
	GetSwapPrice(ctx context.Context, params *GetSwapPriceParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetCommonBalance(ctx context.Context, params *GetCommonBalanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCommonBalanceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCommonSubmitTxWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCommonSubmitTxRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCommonSubmitTx(ctx context.Context, body PostCommonSubmitTxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCommonSubmitTxRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCommonTxResult(ctx context.Context, params *GetCommonTxResultParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCommonTxResultRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKeyGet(ctx context.Context, params *GetKeyGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKeyGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSwapPrepareTxWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSwapPrepareTxRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSwapPrepareTx(ctx context.Context, body PostSwapPrepareTxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSwapPrepareTxRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSwapPrice(ctx context.Context, params *GetSwapPriceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSwapPriceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetCommonBalanceRequest generates requests for GetCommonBalance
func NewGetCommonBalanceRequest(server string, params *GetCommonBalanceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/common/balance")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "chain_id", runtime.ParamLocationQuery, params.ChainId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "owner", runtime.ParamLocationQuery, params.Owner); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token_address", runtime.ParamLocationQuery, params.TokenAddress); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCommonSubmitTxRequest calls the generic PostCommonSubmitTx builder with application/json body
func NewPostCommonSubmitTxRequest(server string, body PostCommonSubmitTxJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCommonSubmitTxRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCommonSubmitTxRequestWithBody generates requests for PostCommonSubmitTx with any type of body
func NewPostCommonSubmitTxRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/common/submit_tx")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCommonTxResultRequest generates requests for GetCommonTxResult
func NewGetCommonTxResultRequest(server string, params *GetCommonTxResultParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/common/tx_result")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "chain_id", runtime.ParamLocationQuery, params.ChainId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tx_hash", runtime.ParamLocationQuery, params.TxHash); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetKeyGetRequest generates requests for GetKeyGet
func NewGetKeyGetRequest(server string, params *GetKeyGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/key/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "app_id", runtime.ParamLocationQuery, params.AppId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sign", runtime.ParamLocationQuery, params.Sign); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ts", runtime.ParamLocationQuery, params.Ts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSwapPrepareTxRequest calls the generic PostSwapPrepareTx builder with application/json body
func NewPostSwapPrepareTxRequest(server string, body PostSwapPrepareTxJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSwapPrepareTxRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSwapPrepareTxRequestWithBody generates requests for PostSwapPrepareTx with any type of body
func NewPostSwapPrepareTxRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/swap/prepare_tx")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSwapPriceRequest generates requests for GetSwapPrice
func NewGetSwapPriceRequest(server string, params *GetSwapPriceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/swap/price")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "amount", runtime.ParamLocationQuery, params.Amount); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "chain_id", runtime.ParamLocationQuery, params.ChainId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "input_mint", runtime.ParamLocationQuery, params.InputMint); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "input_mint_decimals", runtime.ParamLocationQuery, params.InputMintDecimals); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "output_mint", runtime.ParamLocationQuery, params.OutputMint); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "output_mint_decimals", runtime.ParamLocationQuery, params.OutputMintDecimals); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "platform", runtime.ParamLocationQuery, params.Platform); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetCommonBalanceWithResponse request
	GetCommonBalanceWithResponse(ctx context.Context, params *GetCommonBalanceParams, reqEditors ...RequestEditorFn) (*GetCommonBalanceResponse, error)

	// PostCommonSubmitTxWithBodyWithResponse request with any body
	PostCommonSubmitTxWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCommonSubmitTxResponse, error)

	PostCommonSubmitTxWithResponse(ctx context.Context, body PostCommonSubmitTxJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCommonSubmitTxResponse, error)

	// GetCommonTxResultWithResponse request
	GetCommonTxResultWithResponse(ctx context.Context, params *GetCommonTxResultParams, reqEditors ...RequestEditorFn) (*GetCommonTxResultResponse, error)

	// GetKeyGetWithResponse request
	GetKeyGetWithResponse(ctx context.Context, params *GetKeyGetParams, reqEditors ...RequestEditorFn) (*GetKeyGetResponse, error)

	// PostSwapPrepareTxWithBodyWithResponse request with any body
	PostSwapPrepareTxWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSwapPrepareTxResponse, error)

	PostSwapPrepareTxWithResponse(ctx context.Context, body PostSwapPrepareTxJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSwapPrepareTxResponse, error)

	// GetSwapPriceWithResponse request
	GetSwapPriceWithResponse(ctx context.Context, params *GetSwapPriceParams, reqEditors ...RequestEditorFn) (*GetSwapPriceResponse, error)
}

type GetCommonBalanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseBalanceResp
}

// Status returns HTTPResponse.Status
func (r GetCommonBalanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCommonBalanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCommonSubmitTxResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseSwapSubmitResp
}

// Status returns HTTPResponse.Status
func (r PostCommonSubmitTxResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCommonSubmitTxResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCommonTxResultResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseTxResultResp
}

// Status returns HTTPResponse.Status
func (r GetCommonTxResultResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCommonTxResultResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKeyGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r GetKeyGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKeyGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSwapPrepareTxResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseSwapPrepareResp
}

// Status returns HTTPResponse.Status
func (r PostSwapPrepareTxResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSwapPrepareTxResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSwapPriceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseSwapPriceResp
}

// Status returns HTTPResponse.Status
func (r GetSwapPriceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSwapPriceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetCommonBalanceWithResponse request returning *GetCommonBalanceResponse
func (c *ClientWithResponses) GetCommonBalanceWithResponse(ctx context.Context, params *GetCommonBalanceParams, reqEditors ...RequestEditorFn) (*GetCommonBalanceResponse, error) {
	rsp, err := c.GetCommonBalance(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCommonBalanceResponse(rsp)
}

// PostCommonSubmitTxWithBodyWithResponse request with arbitrary body returning *PostCommonSubmitTxResponse
func (c *ClientWithResponses) PostCommonSubmitTxWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCommonSubmitTxResponse, error) {
	rsp, err := c.PostCommonSubmitTxWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCommonSubmitTxResponse(rsp)
}

func (c *ClientWithResponses) PostCommonSubmitTxWithResponse(ctx context.Context, body PostCommonSubmitTxJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCommonSubmitTxResponse, error) {
	rsp, err := c.PostCommonSubmitTx(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCommonSubmitTxResponse(rsp)
}

// GetCommonTxResultWithResponse request returning *GetCommonTxResultResponse
func (c *ClientWithResponses) GetCommonTxResultWithResponse(ctx context.Context, params *GetCommonTxResultParams, reqEditors ...RequestEditorFn) (*GetCommonTxResultResponse, error) {
	rsp, err := c.GetCommonTxResult(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCommonTxResultResponse(rsp)
}

// GetKeyGetWithResponse request returning *GetKeyGetResponse
func (c *ClientWithResponses) GetKeyGetWithResponse(ctx context.Context, params *GetKeyGetParams, reqEditors ...RequestEditorFn) (*GetKeyGetResponse, error) {
	rsp, err := c.GetKeyGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetKeyGetResponse(rsp)
}

// PostSwapPrepareTxWithBodyWithResponse request with arbitrary body returning *PostSwapPrepareTxResponse
func (c *ClientWithResponses) PostSwapPrepareTxWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSwapPrepareTxResponse, error) {
	rsp, err := c.PostSwapPrepareTxWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSwapPrepareTxResponse(rsp)
}

func (c *ClientWithResponses) PostSwapPrepareTxWithResponse(ctx context.Context, body PostSwapPrepareTxJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSwapPrepareTxResponse, error) {
	rsp, err := c.PostSwapPrepareTx(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSwapPrepareTxResponse(rsp)
}

// GetSwapPriceWithResponse request returning *GetSwapPriceResponse
func (c *ClientWithResponses) GetSwapPriceWithResponse(ctx context.Context, params *GetSwapPriceParams, reqEditors ...RequestEditorFn) (*GetSwapPriceResponse, error) {
	rsp, err := c.GetSwapPrice(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSwapPriceResponse(rsp)
}

// ParseGetCommonBalanceResponse parses an HTTP response from a GetCommonBalanceWithResponse call
func ParseGetCommonBalanceResponse(rsp *http.Response) (*GetCommonBalanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCommonBalanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseBalanceResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCommonSubmitTxResponse parses an HTTP response from a PostCommonSubmitTxWithResponse call
func ParsePostCommonSubmitTxResponse(rsp *http.Response) (*PostCommonSubmitTxResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCommonSubmitTxResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseSwapSubmitResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCommonTxResultResponse parses an HTTP response from a GetCommonTxResultWithResponse call
func ParseGetCommonTxResultResponse(rsp *http.Response) (*GetCommonTxResultResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCommonTxResultResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseTxResultResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetKeyGetResponse parses an HTTP response from a GetKeyGetWithResponse call
func ParseGetKeyGetResponse(rsp *http.Response) (*GetKeyGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKeyGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSwapPrepareTxResponse parses an HTTP response from a PostSwapPrepareTxWithResponse call
func ParsePostSwapPrepareTxResponse(rsp *http.Response) (*PostSwapPrepareTxResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSwapPrepareTxResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseSwapPrepareResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSwapPriceResponse parses an HTTP response from a GetSwapPriceWithResponse call
func ParseGetSwapPriceResponse(rsp *http.Response) (*GetSwapPriceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSwapPriceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseSwapPriceResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xYXW/bNhf+Kwbf99KR3GzYCl8t/UBRtN2CuBcDhkCg5ROZjUQyJBXbC3yxoRe72NYA",
	"DYat6D5RYMOAodhVgHQff8axu38xkJJiSaHkeDGy3dmieMjzPOd5eKgD5LOIMwpUSdQ+QNLvQ4TNT6CK",
	"qJFz6/b73maI1Q4TUfI4jlD7A7SFRz0SR6iZ/WrcvP/gAdpuIjXigNpIKkFogJpouKbnrO1jQXEEUk++",
	"BcP5/PkfLwkxbiIBezFI5XQGmG8K4FjAFuzp9blgHIQiYDaJIxZTpX8VVx03kd/HhHqkZx0klMfKi0jF",
	"XBar2nGeA+T/AnZQG/3PnSPppjC6NgzHTSSB9kBYI8uQcI4D8Lpc5l4gVEEAAo1TbIiAngYyzT+XbSG3",
	"Yia5fZ/tYc4X6z4CX6ES+J24GxFlxb4W4LoUSUCxigVYR9XQi2TgdbGEt960vFECIJd3umR+gXI4e7aS",
	"MyrBuYFDTH3YAsnPJ9tNBpevNDagFTgotgvUw72eACntmVZvtiAM24aXxHEJnJKlSRVSC6Q1H/ZqxLtI",
	"gLnxujBcbzM3QuOom6qoPr+s7CuQ7WPZX5axh8MtkHFYEVTGvl8sgy5jIWCaauLCKxrt+bEgatTRLpSE",
	"3+DkHow2YmWC9ED6gnBFGEVtpJ8yQT7E+n/DVKVxEdRGfcCJpLRzozbKBtM1sYmKxmPD6w4zrsCowr6h",
	"AyJMwmzWGtCAUHgn0A8dn0WlqOl4Y2PzbqMTc86ENqxY6AB9pXjbda+tv+20nJZzrX29db3lyvStcbOU",
	"0MM+kQ0iG7ghccRDaEgQ+yAahXWSZw5qopD4QKUpk3RDGxz7fWisO63yFgaDgYPNqMNE4KZTpXv/7s3b",
	"73Zur607LaevotCwBiKS7+10QOybKsxiyAEOAhAOYa55xdWAEhXaoEBNtA9CJnldc1qm9jlQzAlqozc0",
	"HNrWseobmvUZFDHq5twqAHWe8tefH58++cIsNvn9q79++BqZsMKUwN0eaqM7oG6aWKkrmlUEjkCB0Ef4",
	"QVIgezGI0ZzJnBvPzUWJGJppZ2EtYXusxDhXEKjos8sE3J7L18C73mplJQ6J42DOQ+Ib2NxHUmN7kItX",
	"1xpYjx2jpCJVCT+zV0+n3zyf/Pn99KOXicbjKMJiVMGlwoHps5JyQNt6RlYb0libp4bGhJi0lMf0yeHk",
	"5MXk5MX0y6fnKmOTybQ0EpN8OERnLcMN1hutECFbG2KBKL/d1y+Pp79+fI7l8VUwWTo4Fuw0obREZgn5",
	"Oh7V0BPmQFmg8sJqlTLPTqer13l2uP3nhFk4sG3KzAFbo8wS/lZKd2HkphTWMHl6cjQ7+mn27DHmpLEL",
	"Ixub92B0By7IIuZ8RRzqjnsltXAhf55fhi5bB+VtneM4Q9pGrIWOjFysG62EWjnA3OVJp15rurOjb6ef",
	"HE6f/zz75Y/Tw89mzx5PTj6dnfxYY8O5S8CVuHDuJl6ph3/bgPOXIpsDV+BrFfBCSjK+NclFvsnC7mvy",
	"6nj63W/puhYln12zLijm7EvApUW4SnMvfItYYTSvBz6JcLikX1S1moWPJJfvXHOX05XuM/f5pjrYsh/o",
	"xv/kC9321cmZ1PTGeQlZz96ixspyNXdlfQ1MZJXc9Fw3ZD4O+0wqc89E4+3x3wEAAP//fr11DycVAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
